// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.maps.search.implementation.SearchesImpl;
import com.azure.maps.search.models.BatchRequest;
import com.azure.maps.search.models.BoundingBox;
import com.azure.maps.search.models.ErrorResponseException;
import com.azure.maps.search.models.FuzzySearchOptions;
import com.azure.maps.search.models.JsonFormat;
import com.azure.maps.search.models.LatLong;
import com.azure.maps.search.models.PointOfInterestCategoryTreeResult;
import com.azure.maps.search.models.PolygonResult;
import com.azure.maps.search.models.ResponseFormat;
import com.azure.maps.search.models.ReverseSearchAddressBatchProcessResult;
import com.azure.maps.search.models.ReverseSearchAddressOptions;
import com.azure.maps.search.models.ReverseSearchAddressResult;
import com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions;
import com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult;
import com.azure.maps.search.models.SearchAddressBatchProcessResult;
import com.azure.maps.search.models.SearchAddressOptions;
import com.azure.maps.search.models.SearchAddressResult;
import com.azure.maps.search.models.SearchAlongRouteOptions;
import com.azure.maps.search.models.SearchAlongRouteRequest;
import com.azure.maps.search.models.SearchInsideGeometryOptions;
import com.azure.maps.search.models.SearchInsideGeometryRequest;
import com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions;
import com.azure.maps.search.models.SearchPointOfInterestCategoryOptions;
import com.azure.maps.search.models.SearchPointOfInterestOptions;
import com.azure.maps.search.models.SearchStructuredAddressOptions;
import com.azure.maps.search.models.StructuredAddress;

/** Initializes a new instance of the synchronous SearchClient type. */
@ServiceClient(builder = SearchClientBuilder.class)
public final class SearchClient {
    private final SearchesImpl serviceClient;

    /**
     * Initializes an instance of Searches client.
     *
     * @param serviceClient the service client implementation.
     */
    SearchClient(SearchesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List Polygons
     *
     * @param geometryIds
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolygonResult listPolygons(List<String> geometryIds) {
        return this.serviceClient.getPolygon(JsonFormat.JSON, geometryIds);
    }

    /**
     * **Get Polygon**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param geometryIds Comma separated list of geometry UUIDs, previously retrieved from an Online Search request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Polygon call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolygonResult> listPolygonsWithResponse(List<String> geometryIds, Context context) {
        return this.serviceClient.getPolygonWithResponse(JsonFormat.JSON, geometryIds, context);
    }

    /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult fuzzySearch(String query, LatLong coordinates, FuzzySearchOptions options){
        return this.fuzzySearchWithResponse(query, coordinates, null, options, null).getValue();
    }

    /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult fuzzySearch(String query, List<String> countryFilter, FuzzySearchOptions options){
        return this.fuzzySearchWithResponse(query, null, countryFilter, options, null).getValue();
    }

    /**
     * **Free Form Search**
     *
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> fuzzySearchWithResponse(
            String query, LatLong coordinates, List<String> countryFilter, FuzzySearchOptions options,
            Context context) {

        final FuzzySearchOptions param = Optional.ofNullable(options).orElse(new FuzzySearchOptions());

        return this.serviceClient.fuzzySearchWithResponse(
                ResponseFormat.JSON,
                query,
                param.isTypeAhead(),
                param.getTop(),
                param.getSkip(),
                param.getCategoryFilter(),
                countryFilter,
                coordinates.getLat(),
                coordinates.getLon(),
                param.getRadiusInMeters(),
                param.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                param.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                param.getLanguage(),
                param.getExtendedPostalCodesFor(),
                param.getMinFuzzyLevel(),
                param.getMaxFuzzyLevel(),
                param.getIdxSet(),
                param.getBrandFilter(),
                param.getElectricVehicleConnectorFilter(),
                param.getEntityType(),
                param.getLocalizedMapView(),
                param.getOperatingHours(),
                context);
    }

    /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchPointOfInterest(String query, LatLong coordinates,
            SearchPointOfInterestOptions options) {
        return this.searchPointOfInterestWithResponse(query, coordinates, null, options, null).getValue();
    }

        /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchPointOfInterest(String query, List<String> countryFilter,
            SearchPointOfInterestOptions options) {
        return this.searchPointOfInterestWithResponse(query, null, countryFilter, options, null).getValue();
    }

    /**
     * **Get POI by Name**
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchPointOfInterestWithResponse(String query, LatLong coordinates,
            List<String> countryFilter, SearchPointOfInterestOptions options, Context context) {

        final SearchPointOfInterestOptions param = Optional.ofNullable(options).orElse(new SearchPointOfInterestOptions());

        return this.serviceClient.searchPointOfInterestWithResponse(
                ResponseFormat.JSON,
                query,
                param.isTypeAhead(),
                param.getTop(),
                param.getSkip(),
                param.getCategoryFilter(),
                countryFilter,
                coordinates.getLat(),
                coordinates.getLon(),
                param.getRadiusInMeters(),
                param.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                param.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                param.getLanguage(),
                param.getExtendedPostalCodesFor(),
                param.getBrandFilter(),
                param.getElectricVehicleConnectorFilter(),
                param.getLocalizedMapView(),
                param.getOperatingHours(),
                context);
    }

    /**
     * **Nearby Search**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchNearbyPointOfInterest(LatLong coordinates,
            SearchNearbyPointsOfInterestOptions options) {
        return this.searchNearbyPointOfInterestWithResponse(coordinates, options, null).getValue();
    }

    /**
     * **Nearby Search**
     *
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchNearbyPointOfInterestWithResponse(
            LatLong coordinates,
            SearchNearbyPointsOfInterestOptions options,
            Context context) {

        final SearchNearbyPointsOfInterestOptions param = Optional.ofNullable(options)
                .orElse(new SearchNearbyPointsOfInterestOptions());

        return this.serviceClient.searchNearbyPointOfInterestWithResponse(
                ResponseFormat.JSON,
                coordinates.getLat(),
                coordinates.getLon(),
                param.getTop(),
                param.getSkip(),
                param.getCategoryFilter(),
                param.getCountryFilter(),
                param.getRadiusInMeters(),
                param.getLanguage(),
                param.getExtendedPostalCodesFor(),
                param.getBrandFilter(),
                param.getElectricVehicleConnectorFilter(),
                param.getLocalizedMapView(),
                context);
    }

    /**
     * **Get POI by Category**
     *
     * @param operatingHours Hours of operation for a POI (Points of Interest). The availability of hours of operation
     *     will vary based on the data available. If not passed, then no opening hours information will be returned.
     *     Supported value: nextSevenDays.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchPointOfInterestCategory(String query, LatLong coordinates,
            SearchPointOfInterestCategoryOptions options) {
        return this.searchPointOfInterestCategoryWithResponse(query, coordinates, null,
                options, null).getValue();
    }

     /**
     * **Get POI by Category**
     *
     * @param operatingHours Hours of operation for a POI (Points of Interest). The availability of hours of operation
     *     will vary based on the data available. If not passed, then no opening hours information will be returned.
     *     Supported value: nextSevenDays.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchPointOfInterestCategory(String query, List<String> countryFilter,
            SearchPointOfInterestCategoryOptions options) {
        return this.searchPointOfInterestCategoryWithResponse(query, null, countryFilter,
                options, null).getValue();
    }

    /**
     * **Get POI by Category**
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchPointOfInterestCategoryWithResponse(String query,
            LatLong coordinates, List<String> countryFilter, SearchPointOfInterestCategoryOptions options,
            Context context) {

        final SearchPointOfInterestCategoryOptions param = Optional.ofNullable(options)
                .orElse(new SearchPointOfInterestCategoryOptions());

        return this.serviceClient.searchPointOfInterestCategoryWithResponse(
                ResponseFormat.JSON,
                query,
                param.isTypeAhead(),
                param.getTop(),
                param.getSkip(),
                param.getCategoryFilter(),
                countryFilter,
                coordinates.getLat(),
                coordinates.getLon(),
                param.getRadiusInMeters(),
                param.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                param.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                param.getLanguage(),
                param.getExtendedPostalCodesFor(),
                param.getBrandFilter(),
                param.getElectricVehicleConnectorFilter(),
                param.getLocalizedMapView(),
                param.getOperatingHours(),
                context);
    }

    /**
     * **Get POI Category Tree**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>POI Category API provides a full list of supported Points of Interest (POI) categories and subcategories
     * together with their translations and synonyms. The returned content can be used to provide more meaningful
     * results through other Search Service APIs, like [Get Search
     * POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not
     *     available for a specific field, default language is used (English).
     *     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful POI Category Tree call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PointOfInterestCategoryTreeResult getPointOfInterestCategoryTree(String language) {
        return this.serviceClient.getPointOfInterestCategoryTree(JsonFormat.JSON, language);
    }

    /**
     * **Get POI Category Tree**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>POI Category API provides a full list of supported Points of Interest (POI) categories and subcategories
     * together with their translations and synonyms. The returned content can be used to provide more meaningful
     * results through other Search Service APIs, like [Get Search
     * POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not
     *     available for a specific field, default language is used (English).
     *     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful POI Category Tree call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PointOfInterestCategoryTreeResult> getPointOfInterestCategoryTreeWithResponse(
            String language, Context context) {
        return this.serviceClient.getPointOfInterestCategoryTreeWithResponse(JsonFormat.JSON, language, context);
    }

    /**
     * **Address Geocoding**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchAddress(String query, SearchAddressOptions options) {
        return this.searchAddressWithResponse(query, options, null).getValue();
    }

    /**
     * **Address Geocoding**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.

     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchAddressWithResponse(
            String query, SearchAddressOptions options, Context context) {

        final SearchAddressOptions param = Optional.ofNullable(options).orElse(new SearchAddressOptions());

        return this.serviceClient.searchAddressWithResponse(
                ResponseFormat.JSON,
                query,
                param.isTypeAhead(),
                param.getTop(),
                param.getSkip(),
                param.getCountryFilter(),
                param.getCoordinates().map(LatLong::getLat).orElse(null),
                param.getCoordinates().map(LatLong::getLon).orElse(null),
                param.getRadiusInMeters(),
                param.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                param.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                param.getLanguage(),
                param.getExtendedPostalCodesFor(),
                param.getEntityType(),
                param.getLocalizedMapView(),
                context);
    }

    /**
     * **Reverse Geocode to an Address**

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReverseSearchAddressResult reverseSearchAddress(LatLong coordinates,
            ReverseSearchAddressOptions options) {
        return this.reverseSearchAddressWithResponse(coordinates, options, null).getValue();
    }

    /**
     * **Reverse Geocode to an Address**
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReverseSearchAddressResult> reverseSearchAddressWithResponse(
            LatLong coordinates, ReverseSearchAddressOptions options, Context context) {

        final ReverseSearchAddressOptions param = Optional.ofNullable(options)
                .orElse(new ReverseSearchAddressOptions());

        return this.serviceClient.reverseSearchAddressWithResponse(
                ResponseFormat.JSON,
                Arrays.asList(coordinates.getLat(), coordinates.getLon()),
                param.getLanguage(),
                param.includeSpeedLimit(),
                param.getHeading(),
                param.getRadiusInMeters(),
                param.getNumber(),
                param.includeRoadUse(),
                param.getRoadUse(),
                param.allowFreeformNewline(),
                param.includeMatchType(),
                param.getEntityType(),
                param.getLocalizedMapView(),
                context);
    }

    /**
     * **Reverse Geocode to a Cross Street**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse CrossStreet call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReverseSearchCrossStreetAddressResult reverseSearchCrossStreetAddress(
            LatLong coordinates, ReverseSearchCrossStreetAddressOptions options) {
        return this.reverseSearchCrossStreetAddressWithResponse(coordinates, options, null).getValue();
    }

    /**
     * **Reverse Geocode to a Cross Street**
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse CrossStreet call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReverseSearchCrossStreetAddressResult> reverseSearchCrossStreetAddressWithResponse(
            LatLong coordinates, ReverseSearchCrossStreetAddressOptions options, Context context) {

        final ReverseSearchCrossStreetAddressOptions param = Optional.ofNullable(options)
                .orElse(new ReverseSearchCrossStreetAddressOptions());

        return this.serviceClient.reverseSearchCrossStreetAddressWithResponse(
                ResponseFormat.JSON,
                Arrays.asList(coordinates.getLat(), coordinates.getLon()),
                param.getTop(),
                param.getHeading(),
                param.getRadiusInMeters(),
                param.getLanguage(),
                param.getLocalizedMapView(),
                context);
    }

    /**
     * **Structured Address Geocoding**
     *

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchStructuredAddress(StructuredAddress address,
            SearchStructuredAddressOptions options) {
        return this.searchStructuredAddressWithResponse(address, options, null).getValue();
    }

    /**
     * **Structured Address Geocoding**
     *

     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchStructuredAddressWithResponse(
            StructuredAddress address, SearchStructuredAddressOptions options, Context context) {

        final SearchStructuredAddressOptions param = Optional.ofNullable(options)
                .orElse(new SearchStructuredAddressOptions());

        return this.serviceClient.searchStructuredAddressWithResponse(
                ResponseFormat.JSON,
                param.getLanguage(),
                address.getCountryCode(),
                param.getTop(),
                param.getSkip(),
                address.getStreetNumber(),
                address.getStreetName(),
                address.getCrossStreet(),
                address.getMunicipality(),
                address.getMunicipalitySubdivision(),
                address.getCountryTertiarySubdivision(),
                address.getCountrySecondarySubdivision(),
                address.getCountrySubdivision(),
                address.getPostalCode(),
                param.getExtendedPostalCodesFor(),
                param.getEntityType(),
                param.getLocalizedMapView(),
                context);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchInsideGeometry(String query, SearchInsideGeometryRequest request,
        SearchInsideGeometryOptions options) {
        return this.searchInsideGeometryWithResponse(query, request, options, null).getValue();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.

     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchInsideGeometryWithResponse(
            String query, SearchInsideGeometryRequest request, SearchInsideGeometryOptions options,
            Context context) {

        final SearchInsideGeometryOptions param = Optional.ofNullable(options)
                .orElse(new SearchInsideGeometryOptions());

        return this.serviceClient.searchInsideGeometryWithResponse(
                ResponseFormat.JSON,
                query,
                request,
                param.getTop(),
                param.getLanguage(),
                param.getCategoryFilter(),
                param.getExtendedPostalCodesFor(),
                param.getIdxSet(),
                param.getLocalizedMapView(),
                param.getOperatingHours(),
                context);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressResult searchAlongRoute(String query, int maxDetourTime,
            SearchAlongRouteRequest route, SearchAlongRouteOptions options) {
        return this.searchAlongRouteWithResponse(query, maxDetourTime, route, options, null).getValue();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressResult> searchAlongRouteWithResponse(
            String query, int maxDetourTime, SearchAlongRouteRequest route,
            SearchAlongRouteOptions options, Context context) {

        final SearchAlongRouteOptions param = Optional.ofNullable(options)
                .orElse(new SearchAlongRouteOptions());

        return this.serviceClient.searchAlongRouteWithResponse(
                ResponseFormat.JSON,
                query,
                maxDetourTime,
                route,
                param.getTop(),
                param.getBrandFilter(),
                param.getCategoryFilter(),
                param.getElectricVehicleConnectorFilter(),
                param.getLocalizedMapView(),
                param.getOperatingHours(),
                context);
    }

    /**
     * **Search Fuzzy Batch API**
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressBatchProcessResult fuzzySearchBatchSync(BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.fuzzySearchBatchSync(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressBatchProcessResult> fuzzySearchBatchSyncWithResponse(
            BatchRequest searchFuzzyBatchRequestBody, Context context) {
        return this.serviceClient.fuzzySearchBatchSyncWithResponse(JsonFormat.JSON, searchFuzzyBatchRequestBody, context);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginFuzzySearchBatch(
            BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.beginFuzzySearchBatch(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginFuzzySearchBatch(
            BatchRequest searchFuzzyBatchRequestBody, Context context) {
        return this.serviceClient.beginFuzzySearchBatch(JsonFormat.JSON, searchFuzzyBatchRequestBody, context);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetFuzzySearchBatch(
            String batchId) {
        return this.serviceClient.beginGetFuzzySearchBatch(batchId);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     *
     * @param batchId Batch id for querying the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetFuzzySearchBatch(
            String batchId, Context context) {
        return this.serviceClient.beginGetFuzzySearchBatch(batchId, context);
    }

    /**
     * **Search Address Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchAddressBatchProcessResult searchAddressBatchSync(BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.searchAddressBatchSync(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SearchAddressBatchProcessResult> searchAddressBatchSyncWithResponse(
            BatchRequest searchAddressBatchRequestBody, Context context) {
        return this.serviceClient.searchAddressBatchSyncWithResponse(JsonFormat.JSON, searchAddressBatchRequestBody, context);
    }

    /**
     * **Search Address Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginSearchAddressBatch(
            BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.beginSearchAddressBatch(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginSearchAddressBatch(
            BatchRequest searchAddressBatchRequestBody, Context context) {
        return this.serviceClient.beginSearchAddressBatch(JsonFormat.JSON, searchAddressBatchRequestBody, context);
    }

    /**
     * **Search Address Batch API**
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetSearchAddressBatch(
            String batchId) {
        return this.serviceClient.beginGetSearchAddressBatch(batchId);
    }

    /**
     * **Search Address Batch API**
     * @param batchId Batch id for querying the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetSearchAddressBatch(
            String batchId, Context context) {
        return this.serviceClient.beginGetSearchAddressBatch(batchId, context);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReverseSearchAddressBatchProcessResult reverseSearchAddressBatchSync(
            BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.reverseSearchAddressBatchSync(JsonFormat.JSON, searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReverseSearchAddressBatchProcessResult> reverseSearchAddressBatchSyncWithResponse(
            BatchRequest searchAddressReverseBatchRequestBody, Context context) {
        return this.serviceClient.reverseSearchAddressBatchSyncWithResponse(
                JsonFormat.JSON, searchAddressReverseBatchRequestBody, context);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginReverseSearchAddressBatch(BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.beginReverseSearchAddressBatch(JsonFormat.JSON, searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginReverseSearchAddressBatch(BatchRequest searchAddressReverseBatchRequestBody, Context context) {
        return this.serviceClient.beginReverseSearchAddressBatch(JsonFormat.JSON, searchAddressReverseBatchRequestBody, context);
    }

    /**
     * **Search Address Reverse Batch API**
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginGetReverseSearchAddressBatch(String batchId) {
        return this.serviceClient.beginGetReverseSearchAddressBatch(batchId);
    }

    /**
     * **Search Address Reverse Batch API**

     *
     * @param batchId Batch id for querying the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginGetReverseSearchAddressBatch(String batchId, Context context) {
        return this.serviceClient.beginGetReverseSearchAddressBatch(batchId, context);
    }
}
