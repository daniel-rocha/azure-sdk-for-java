// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.search.fluent.SearchesClient;
import com.azure.maps.search.fluent.models.SearchAddressBatchResponseInner;
import com.azure.maps.search.fluent.models.SearchAddressReverseBatchResponseInner;
import com.azure.maps.search.fluent.models.SearchAddressReverseCrossStreetResponseInner;
import com.azure.maps.search.fluent.models.SearchAddressReverseResponseInner;
import com.azure.maps.search.fluent.models.SearchCommonResponseInner;
import com.azure.maps.search.fluent.models.SearchFuzzyBatchResponseInner;
import com.azure.maps.search.fluent.models.SearchPoiCategoryTreeResponseInner;
import com.azure.maps.search.fluent.models.SearchPolygonResponseInner;
import com.azure.maps.search.models.BatchRequestBody;
import com.azure.maps.search.models.ConnectorSet;
import com.azure.maps.search.models.EntityType;
import com.azure.maps.search.models.OpeningHours;
import com.azure.maps.search.models.ResponseFormat;
import com.azure.maps.search.models.SearchAddressBatchResponse;
import com.azure.maps.search.models.SearchAddressReverseBatchResponse;
import com.azure.maps.search.models.SearchAddressReverseCrossStreetResponse;
import com.azure.maps.search.models.SearchAddressReverseResponse;
import com.azure.maps.search.models.SearchAlongRouteRequestBody;
import com.azure.maps.search.models.SearchCommonResponse;
import com.azure.maps.search.models.SearchFuzzyBatchResponse;
import com.azure.maps.search.models.SearchIndexSet;
import com.azure.maps.search.models.SearchInsideGeometryRequestBody;
import com.azure.maps.search.models.SearchPoiCategoryTreeResponse;
import com.azure.maps.search.models.SearchPolygonResponse;
import com.azure.maps.search.models.Searches;
import com.azure.maps.search.models.TextFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.List;

public final class SearchesImpl implements Searches {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SearchesImpl.class);

    private final SearchesClient innerClient;

    private final com.azure.maps.search.SearchManager serviceManager;

    public SearchesImpl(SearchesClient innerClient, com.azure.maps.search.SearchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SearchPolygonResponse getSearchPolygon(ResponseFormat format, List<String> geometries) {
        SearchPolygonResponseInner inner = this.serviceClient().getSearchPolygon(format, geometries);
        if (inner != null) {
            return new SearchPolygonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchPolygonResponse> getSearchPolygonWithResponse(
        ResponseFormat format, List<String> geometries, Context context) {
        Response<SearchPolygonResponseInner> inner =
            this.serviceClient().getSearchPolygonWithResponse(format, geometries, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchPolygonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchFuzzy(TextFormat format, String query) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchFuzzy(format, query);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchFuzzyWithResponse(
        TextFormat format,
        String query,
        Boolean typeahead,
        Integer limit,
        Integer ofs,
        List<Integer> categorySet,
        List<String> countrySet,
        Float lat,
        Float lon,
        Float radius,
        String topLeft,
        String btmRight,
        String language,
        String extendedPostalCodesFor,
        Integer minFuzzyLevel,
        Integer maxFuzzyLevel,
        List<SearchIndexSet> idxSet,
        List<String> brandSet,
        List<ConnectorSet> connectorSet,
        String view,
        OpeningHours openingHours,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchFuzzyWithResponse(
                    format,
                    query,
                    typeahead,
                    limit,
                    ofs,
                    categorySet,
                    countrySet,
                    lat,
                    lon,
                    radius,
                    topLeft,
                    btmRight,
                    language,
                    extendedPostalCodesFor,
                    minFuzzyLevel,
                    maxFuzzyLevel,
                    idxSet,
                    brandSet,
                    connectorSet,
                    view,
                    openingHours,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchPoi(TextFormat format, String query) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchPoi(format, query);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchPoiWithResponse(
        TextFormat format,
        String query,
        Boolean typeahead,
        Integer limit,
        Integer ofs,
        List<Integer> categorySet,
        List<String> countrySet,
        Float lat,
        Float lon,
        Float radius,
        String topLeft,
        String btmRight,
        String language,
        String extendedPostalCodesFor,
        List<String> brandSet,
        List<ConnectorSet> connectorSet,
        String view,
        OpeningHours openingHours,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchPoiWithResponse(
                    format,
                    query,
                    typeahead,
                    limit,
                    ofs,
                    categorySet,
                    countrySet,
                    lat,
                    lon,
                    radius,
                    topLeft,
                    btmRight,
                    language,
                    extendedPostalCodesFor,
                    brandSet,
                    connectorSet,
                    view,
                    openingHours,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchNearby(TextFormat format, float lat, float lon) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchNearby(format, lat, lon);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchNearbyWithResponse(
        TextFormat format,
        float lat,
        float lon,
        Integer limit,
        Integer ofs,
        List<Integer> categorySet,
        List<String> countrySet,
        Float radius,
        String language,
        String extendedPostalCodesFor,
        List<String> brandSet,
        List<ConnectorSet> connectorSet,
        String view,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchNearbyWithResponse(
                    format,
                    lat,
                    lon,
                    limit,
                    ofs,
                    categorySet,
                    countrySet,
                    radius,
                    language,
                    extendedPostalCodesFor,
                    brandSet,
                    connectorSet,
                    view,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchPoiCategory(TextFormat format, String query) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchPoiCategory(format, query);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchPoiCategoryWithResponse(
        TextFormat format,
        String query,
        Boolean typeahead,
        Integer limit,
        Integer ofs,
        List<Integer> categorySet,
        List<String> countrySet,
        Float lat,
        Float lon,
        Float radius,
        String topLeft,
        String btmRight,
        String language,
        String extendedPostalCodesFor,
        List<String> brandSet,
        List<ConnectorSet> connectorSet,
        String view,
        OpeningHours openingHours,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchPoiCategoryWithResponse(
                    format,
                    query,
                    typeahead,
                    limit,
                    ofs,
                    categorySet,
                    countrySet,
                    lat,
                    lon,
                    radius,
                    topLeft,
                    btmRight,
                    language,
                    extendedPostalCodesFor,
                    brandSet,
                    connectorSet,
                    view,
                    openingHours,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchPoiCategoryTreeResponse getSearchPoiCategoryTreePreview(ResponseFormat format) {
        SearchPoiCategoryTreeResponseInner inner = this.serviceClient().getSearchPoiCategoryTreePreview(format);
        if (inner != null) {
            return new SearchPoiCategoryTreeResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchPoiCategoryTreeResponse> getSearchPoiCategoryTreePreviewWithResponse(
        ResponseFormat format, String language, Context context) {
        Response<SearchPoiCategoryTreeResponseInner> inner =
            this.serviceClient().getSearchPoiCategoryTreePreviewWithResponse(format, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchPoiCategoryTreeResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchAddress(TextFormat format, String query) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchAddress(format, query);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchAddressWithResponse(
        TextFormat format,
        String query,
        Boolean typeahead,
        Integer limit,
        Integer ofs,
        List<String> countrySet,
        Float lat,
        Float lon,
        Float radius,
        String topLeft,
        String btmRight,
        String language,
        String extendedPostalCodesFor,
        String view,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchAddressWithResponse(
                    format,
                    query,
                    typeahead,
                    limit,
                    ofs,
                    countrySet,
                    lat,
                    lon,
                    radius,
                    topLeft,
                    btmRight,
                    language,
                    extendedPostalCodesFor,
                    view,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchAddressReverseResponse getSearchAddressReverse(TextFormat format, String query) {
        SearchAddressReverseResponseInner inner = this.serviceClient().getSearchAddressReverse(format, query);
        if (inner != null) {
            return new SearchAddressReverseResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchAddressReverseResponse> getSearchAddressReverseWithResponse(
        TextFormat format,
        String query,
        String language,
        Boolean returnSpeedLimit,
        Float heading,
        Float radius,
        String number,
        Boolean returnRoadUse,
        String roadUse,
        Boolean allowFreeformNewline,
        Boolean returnMatchType,
        EntityType entityType,
        String view,
        Context context) {
        Response<SearchAddressReverseResponseInner> inner =
            this
                .serviceClient()
                .getSearchAddressReverseWithResponse(
                    format,
                    query,
                    language,
                    returnSpeedLimit,
                    heading,
                    radius,
                    number,
                    returnRoadUse,
                    roadUse,
                    allowFreeformNewline,
                    returnMatchType,
                    entityType,
                    view,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchAddressReverseResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchAddressReverseCrossStreetResponse getSearchAddressReverseCrossStreet(TextFormat format, String query) {
        SearchAddressReverseCrossStreetResponseInner inner =
            this.serviceClient().getSearchAddressReverseCrossStreet(format, query);
        if (inner != null) {
            return new SearchAddressReverseCrossStreetResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchAddressReverseCrossStreetResponse> getSearchAddressReverseCrossStreetWithResponse(
        TextFormat format,
        String query,
        Integer limit,
        Float heading,
        Float radius,
        String language,
        String view,
        Context context) {
        Response<SearchAddressReverseCrossStreetResponseInner> inner =
            this
                .serviceClient()
                .getSearchAddressReverseCrossStreetWithResponse(
                    format, query, limit, heading, radius, language, view, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchAddressReverseCrossStreetResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse getSearchAddressStructured(TextFormat format) {
        SearchCommonResponseInner inner = this.serviceClient().getSearchAddressStructured(format);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> getSearchAddressStructuredWithResponse(
        TextFormat format,
        String language,
        String countryCode,
        Integer limit,
        Integer ofs,
        String streetNumber,
        String streetName,
        String crossStreet,
        String municipality,
        String municipalitySubdivision,
        String countryTertiarySubdivision,
        String countrySecondarySubdivision,
        String countrySubdivision,
        String postalCode,
        String extendedPostalCodesFor,
        String view,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .getSearchAddressStructuredWithResponse(
                    format,
                    language,
                    countryCode,
                    limit,
                    ofs,
                    streetNumber,
                    streetName,
                    crossStreet,
                    municipality,
                    municipalitySubdivision,
                    countryTertiarySubdivision,
                    countrySecondarySubdivision,
                    countrySubdivision,
                    postalCode,
                    extendedPostalCodesFor,
                    view,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse postSearchInsideGeometry(
        TextFormat format, String query, SearchInsideGeometryRequestBody searchInsideGeometryRequestBody) {
        SearchCommonResponseInner inner =
            this.serviceClient().postSearchInsideGeometry(format, query, searchInsideGeometryRequestBody);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> postSearchInsideGeometryWithResponse(
        TextFormat format,
        String query,
        SearchInsideGeometryRequestBody searchInsideGeometryRequestBody,
        Integer limit,
        String language,
        List<Integer> categorySet,
        String extendedPostalCodesFor,
        List<SearchIndexSet> idxSet,
        String view,
        OpeningHours openingHours,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .postSearchInsideGeometryWithResponse(
                    format,
                    query,
                    searchInsideGeometryRequestBody,
                    limit,
                    language,
                    categorySet,
                    extendedPostalCodesFor,
                    idxSet,
                    view,
                    openingHours,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchCommonResponse postSearchAlongRoute(
        TextFormat format, String query, int maxDetourTime, SearchAlongRouteRequestBody searchAlongRouteRequestBody) {
        SearchCommonResponseInner inner =
            this.serviceClient().postSearchAlongRoute(format, query, maxDetourTime, searchAlongRouteRequestBody);
        if (inner != null) {
            return new SearchCommonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchCommonResponse> postSearchAlongRouteWithResponse(
        TextFormat format,
        String query,
        int maxDetourTime,
        SearchAlongRouteRequestBody searchAlongRouteRequestBody,
        List<Integer> categorySet,
        Integer limit,
        List<String> brandSet,
        List<ConnectorSet> connectorSet,
        String view,
        OpeningHours openingHours,
        Context context) {
        Response<SearchCommonResponseInner> inner =
            this
                .serviceClient()
                .postSearchAlongRouteWithResponse(
                    format,
                    query,
                    maxDetourTime,
                    searchAlongRouteRequestBody,
                    categorySet,
                    limit,
                    brandSet,
                    connectorSet,
                    view,
                    openingHours,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchCommonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchFuzzyBatchResponse postSearchFuzzyBatchSync(
        ResponseFormat format, BatchRequestBody searchFuzzyBatchRequestBody) {
        SearchFuzzyBatchResponseInner inner =
            this.serviceClient().postSearchFuzzyBatchSync(format, searchFuzzyBatchRequestBody);
        if (inner != null) {
            return new SearchFuzzyBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchFuzzyBatchResponse> postSearchFuzzyBatchSyncWithResponse(
        ResponseFormat format, BatchRequestBody searchFuzzyBatchRequestBody, Context context) {
        Response<SearchFuzzyBatchResponseInner> inner =
            this.serviceClient().postSearchFuzzyBatchSyncWithResponse(format, searchFuzzyBatchRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchFuzzyBatchResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchFuzzyBatchResponse postSearchFuzzyBatch(
        ResponseFormat format, BatchRequestBody searchFuzzyBatchRequestBody) {
        SearchFuzzyBatchResponseInner inner =
            this.serviceClient().postSearchFuzzyBatch(format, searchFuzzyBatchRequestBody);
        if (inner != null) {
            return new SearchFuzzyBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchFuzzyBatchResponse postSearchFuzzyBatch(
        ResponseFormat format, BatchRequestBody searchFuzzyBatchRequestBody, Context context) {
        SearchFuzzyBatchResponseInner inner =
            this.serviceClient().postSearchFuzzyBatch(format, searchFuzzyBatchRequestBody, context);
        if (inner != null) {
            return new SearchFuzzyBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchFuzzyBatchResponse getSearchFuzzyBatch(String format) {
        SearchFuzzyBatchResponseInner inner = this.serviceClient().getSearchFuzzyBatch(format);
        if (inner != null) {
            return new SearchFuzzyBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchFuzzyBatchResponse getSearchFuzzyBatch(String format, Context context) {
        SearchFuzzyBatchResponseInner inner = this.serviceClient().getSearchFuzzyBatch(format, context);
        if (inner != null) {
            return new SearchFuzzyBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressBatchResponse postSearchAddressBatchSync(
        ResponseFormat format, BatchRequestBody searchAddressBatchRequestBody) {
        SearchAddressBatchResponseInner inner =
            this.serviceClient().postSearchAddressBatchSync(format, searchAddressBatchRequestBody);
        if (inner != null) {
            return new SearchAddressBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchAddressBatchResponse> postSearchAddressBatchSyncWithResponse(
        ResponseFormat format, BatchRequestBody searchAddressBatchRequestBody, Context context) {
        Response<SearchAddressBatchResponseInner> inner =
            this.serviceClient().postSearchAddressBatchSyncWithResponse(format, searchAddressBatchRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchAddressBatchResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchAddressBatchResponse postSearchAddressBatch(
        ResponseFormat format, BatchRequestBody searchAddressBatchRequestBody) {
        SearchAddressBatchResponseInner inner =
            this.serviceClient().postSearchAddressBatch(format, searchAddressBatchRequestBody);
        if (inner != null) {
            return new SearchAddressBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressBatchResponse postSearchAddressBatch(
        ResponseFormat format, BatchRequestBody searchAddressBatchRequestBody, Context context) {
        SearchAddressBatchResponseInner inner =
            this.serviceClient().postSearchAddressBatch(format, searchAddressBatchRequestBody, context);
        if (inner != null) {
            return new SearchAddressBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressBatchResponse getSearchAddressBatch(String format) {
        SearchAddressBatchResponseInner inner = this.serviceClient().getSearchAddressBatch(format);
        if (inner != null) {
            return new SearchAddressBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressBatchResponse getSearchAddressBatch(String format, Context context) {
        SearchAddressBatchResponseInner inner = this.serviceClient().getSearchAddressBatch(format, context);
        if (inner != null) {
            return new SearchAddressBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressReverseBatchResponse postSearchAddressReverseBatchSync(
        ResponseFormat format, BatchRequestBody searchAddressReverseBatchRequestBody) {
        SearchAddressReverseBatchResponseInner inner =
            this.serviceClient().postSearchAddressReverseBatchSync(format, searchAddressReverseBatchRequestBody);
        if (inner != null) {
            return new SearchAddressReverseBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SearchAddressReverseBatchResponse> postSearchAddressReverseBatchSyncWithResponse(
        ResponseFormat format, BatchRequestBody searchAddressReverseBatchRequestBody, Context context) {
        Response<SearchAddressReverseBatchResponseInner> inner =
            this
                .serviceClient()
                .postSearchAddressReverseBatchSyncWithResponse(format, searchAddressReverseBatchRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SearchAddressReverseBatchResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SearchAddressReverseBatchResponse postSearchAddressReverseBatch(
        ResponseFormat format, BatchRequestBody searchAddressReverseBatchRequestBody) {
        SearchAddressReverseBatchResponseInner inner =
            this.serviceClient().postSearchAddressReverseBatch(format, searchAddressReverseBatchRequestBody);
        if (inner != null) {
            return new SearchAddressReverseBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressReverseBatchResponse postSearchAddressReverseBatch(
        ResponseFormat format, BatchRequestBody searchAddressReverseBatchRequestBody, Context context) {
        SearchAddressReverseBatchResponseInner inner =
            this.serviceClient().postSearchAddressReverseBatch(format, searchAddressReverseBatchRequestBody, context);
        if (inner != null) {
            return new SearchAddressReverseBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressReverseBatchResponse getSearchAddressReverseBatch(String format) {
        SearchAddressReverseBatchResponseInner inner = this.serviceClient().getSearchAddressReverseBatch(format);
        if (inner != null) {
            return new SearchAddressReverseBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SearchAddressReverseBatchResponse getSearchAddressReverseBatch(String format, Context context) {
        SearchAddressReverseBatchResponseInner inner =
            this.serviceClient().getSearchAddressReverseBatch(format, context);
        if (inner != null) {
            return new SearchAddressReverseBatchResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private SearchesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.search.SearchManager manager() {
        return this.serviceManager;
    }
}
