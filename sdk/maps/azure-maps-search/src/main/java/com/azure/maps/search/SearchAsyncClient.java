// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.maps.search.implementation.SearchesImpl;
import com.azure.maps.search.implementation.models.PolygonResult;
import com.azure.maps.search.implementation.models.SearchAlongRouteRequest;
import com.azure.maps.search.implementation.models.SearchInsideGeometryRequest;
import com.azure.maps.search.models.BatchRequest;
import com.azure.maps.search.models.BoundingBox;
import com.azure.maps.search.models.ElectricVehicleConnector;
import com.azure.maps.search.models.ErrorResponseException;
import com.azure.maps.search.models.FuzzySearchOptions;
import com.azure.maps.search.models.GeoJsonLineString;
import com.azure.maps.search.models.GeoJsonObject;
import com.azure.maps.search.models.JsonFormat;
import com.azure.maps.search.models.LatLong;
import com.azure.maps.search.models.LocalizedMapView;
import com.azure.maps.search.models.OperatingHoursRange;
import com.azure.maps.search.models.PointOfInterestCategoryTreeResult;
import com.azure.maps.search.models.Polygon;
import com.azure.maps.search.models.ResponseFormat;
import com.azure.maps.search.models.ReverseSearchAddressBatchProcessResult;
import com.azure.maps.search.models.ReverseSearchAddressOptions;
import com.azure.maps.search.models.ReverseSearchAddressResult;
import com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions;
import com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult;
import com.azure.maps.search.models.SearchAddressBatchProcessResult;
import com.azure.maps.search.models.SearchAddressOptions;
import com.azure.maps.search.models.SearchAddressResult;
import com.azure.maps.search.models.SearchAlongRouteOptions;
import com.azure.maps.search.models.SearchInsideGeometryOptions;
import com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions;
import com.azure.maps.search.models.SearchPointOfInterestCategoryOptions;
import com.azure.maps.search.models.SearchPointOfInterestOptions;
import com.azure.maps.search.models.SearchStructuredAddressOptions;
import com.azure.maps.search.models.SearchesFuzzySearchBatchResponse;
import com.azure.maps.search.models.SearchesGetFuzzySearchBatchResponse;
import com.azure.maps.search.models.SearchesGetReverseSearchAddressBatchResponse;
import com.azure.maps.search.models.SearchesGetSearchAddressBatchResponse;
import com.azure.maps.search.models.SearchesReverseSearchAddressBatchResponse;
import com.azure.maps.search.models.SearchesSearchAddressBatchResponse;
import com.azure.maps.search.models.StructuredAddress;
import com.azure.maps.search.util.TypeMapper;

import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous SearchClient type. */
@ServiceClient(builder = SearchClientBuilder.class, isAsync = true)
public final class SearchAsyncClient {
    private final SearchesImpl serviceClient;

    /**
     * Initializes an instance of Searches client.
     *
     * @param serviceClient the service client implementation.
     */
    SearchAsyncClient(SearchesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * **Get Polygons**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param geometryIds Comma separated list of geometry UUIDs, previously retrieved from an Online Search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Polygon call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Polygon>> getPolygons(List<String> geometryIds) {
        Mono<Response<List<Polygon>>> result = this.getPolygonsWithResponse(geometryIds);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Get Polygons**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param geometryIds Comma separated list of geometry UUIDs, previously retrieved from an Online Search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Polygon call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Polygon>>> getPolygonsWithResponse(List<String> geometryIds) {
        return this.getPolygonsWithResponse(geometryIds, null);
    }

    /**
     * **Get Polygons**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param geometryIds Comma separated list of geometry UUIDs, previously retrieved from an Online Search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Polygon call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<List<Polygon>>> getPolygonsWithResponse(List<String> geometryIds,
            Context context) {
        Mono<Response<PolygonResult>> result = this.serviceClient.getPolygonWithResponseAsync(JsonFormat.JSON,
            geometryIds, context);
        return result.flatMap(response -> {
            Response<List<Polygon>> simpleResponse = new SimpleResponse<List<Polygon>>(response,
                response.getValue().getPolygons());
            return Mono.just(simpleResponse);
        });
    }

    /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> fuzzySearch(FuzzySearchOptions options) {
        Mono<Response<SearchAddressResult>> result = this.fuzzySearchWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Free Form Search**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> fuzzySearchWithResponse(FuzzySearchOptions options) {
        return this.fuzzySearchWithResponse(options, null);
    }

    /**
     * **Free Form Search**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> fuzzySearchWithResponse(FuzzySearchOptions options, Context context) {
        final Optional<LatLong> optCoordinates = Optional.ofNullable(options.getCoordinates());
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.fuzzySearchWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                options.isTypeAhead(),
                options.getTop(),
                options.getSkip(),
                options.getCategoryFilter(),
                options.getCountryFilter(),
                optCoordinates.map(LatLong::getLat).orElse(null),
                optCoordinates.map(LatLong::getLon).orElse(null),
                options.getRadiusInMeters(),
                options.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                options.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                options.getLanguage(),
                options.getExtendedPostalCodesFor(),
                options.getMinFuzzyLevel(),
                options.getMaxFuzzyLevel(),
                options.getIdxSet(),
                options.getBrandFilter(),
                options.getElectricVehicleConnectorFilter(),
                options.getEntityType(),
                options.getLocalizedMapView(),
                options.getOperatingHours(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     *
     * @param options
     * @return
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchPointOfInterest(SearchPointOfInterestOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchPointOfInterestWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Get POI by Name**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchPointOfInterestWithResponse(SearchPointOfInterestOptions options) {
        return this.searchPointOfInterestWithResponse(options, null);
    }

    /**
     * **Get POI by Name**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchPointOfInterestWithResponse(SearchPointOfInterestOptions options,
            Context context) {
        final Optional<LatLong> optCoordinates = Optional.ofNullable(options.getCoordinates());
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchPointOfInterestWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                options.isTypeAhead(),
                options.getTop(),
                options.getSkip(),
                options.getCategoryFilter(),
                options.getCountryFilter(),
                optCoordinates.map(LatLong::getLat).orElse(null),
                optCoordinates.map(LatLong::getLon).orElse(null),
                options.getRadiusInMeters(),
                options.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                options.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                options.getLanguage(),
                options.getExtendedPostalCodesFor(),
                options.getBrandFilter(),
                options.getElectricVehicleConnectorFilter(),
                options.getLocalizedMapView(),
                options.getOperatingHours(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Nearby Search**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchNearbyPointOfInterest(
            SearchNearbyPointsOfInterestOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchNearbyPointOfInterestWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Nearby Search**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchNearbyPointOfInterestWithResponse(
            SearchNearbyPointsOfInterestOptions options) {
        return this.searchNearbyPointOfInterestWithResponse(options, null);
    }

    /**
     * **Nearby Search**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchNearbyPointOfInterestWithResponse(
            SearchNearbyPointsOfInterestOptions options, Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchNearbyPointOfInterestWithResponseAsync(
                ResponseFormat.JSON,
                options.getCoordinates().getLat(),
                options.getCoordinates().getLon(),
                options.getTop(),
                options.getSkip(),
                options.getCategoryFilter(),
                options.getCountryFilter(),
                options.getRadiusInMeters(),
                options.getLanguage(),
                options.getExtendedPostalCodesFor(),
                options.getBrandFilter(),
                options.getElectricVehicleConnectorFilter(),
                options.getLocalizedMapView(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Get POI by Category**
     *
     * @param operatingHours Hours of operation for a POI (Points of Interest). The availability of hours of operation
     *     will vary based on the data available. If not passed, then no opening hours information will be returned.
     *     Supported value: nextSevenDays.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchPointOfInterestCategory(SearchPointOfInterestCategoryOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchPointOfInterestCategoryWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Get POI by Category**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchPointOfInterestCategoryWithResponse(
                SearchPointOfInterestCategoryOptions options) {
        return this.searchPointOfInterestCategoryWithResponse(options, null);
    }
    /**
     * **Get POI by Category**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchPointOfInterestCategoryWithResponse(
                SearchPointOfInterestCategoryOptions options, Context context) {
        final Optional<LatLong> optCoordinates = Optional.ofNullable(options.getCoordinates());
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchPointOfInterestCategoryWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                options.isTypeAhead(),
                options.getTop(),
                options.getSkip(),
                options.getCategoryFilter(),
                options.getCountryFilter(),
                optCoordinates.map(LatLong::getLat).orElse(null),
                optCoordinates.map(LatLong::getLon).orElse(null),
                options.getRadiusInMeters(),
                options.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                options.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                options.getLanguage(),
                options.getExtendedPostalCodesFor(),
                options.getBrandFilter(),
                options.getElectricVehicleConnectorFilter(),
                options.getLocalizedMapView(),
                options.getOperatingHours(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Get POI Category Tree**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>POI Category API provides a full list of supported Points of Interest (POI) categories and subcategories
     * together with their translations and synonyms. The returned content can be used to provide more meaningful
     * results through other Search Service APIs, like [Get Search
     * POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not
     *     available for a specific field, default language is used (English).
     *     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful POI Category Tree call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PointOfInterestCategoryTreeResult> getPointOfInterestCategoryTree(String language) {
        return this.serviceClient.getPointOfInterestCategoryTreeAsync(JsonFormat.JSON, language);
    }

    /**
     * **Get POI Category Tree**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful POI Category Tree call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PointOfInterestCategoryTreeResult>> getPointOfInterestCategoryTreeWithResponse(
            String language) {
        return this.getPointOfInterestCategoryTreeWithResponse(language, null);
    }

    /**
     * **Get POI Category Tree**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful POI Category Tree call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<PointOfInterestCategoryTreeResult>> getPointOfInterestCategoryTreeWithResponse(
            String language, Context context) {
        return this.serviceClient.getPointOfInterestCategoryTreeWithResponseAsync(JsonFormat.JSON, language,
            context);
    }

    /**
     * **Address Geocoding**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchAddress(SearchAddressOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchAddressWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Address Geocoding**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchAddressWithResponse(SearchAddressOptions options) {
        return this.searchAddressWithResponse(options, null);
    }

    /**
     * **Address Geocoding**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchAddressWithResponse(SearchAddressOptions options, Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchAddressWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                options.isTypeAhead(),
                options.getTop(),
                options.getSkip(),
                options.getCountryFilter(),
                options.getCoordinates().map(LatLong::getLat).orElse(null),
                options.getCoordinates().map(LatLong::getLon).orElse(null),
                options.getRadiusInMeters(),
                options.getBoundingBox().map(BoundingBox::getTopLeft).map(LatLong::toString).orElse(null),
                options.getBoundingBox().map(BoundingBox::getBottomRight).map(LatLong::toString).orElse(null),
                options.getLanguage(),
                options.getExtendedPostalCodesFor(),
                options.getEntityType(),
                options.getLocalizedMapView(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Reverse Geocode to an Address**

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReverseSearchAddressResult> reverseSearchAddress(ReverseSearchAddressOptions options) {
        Mono<Response<ReverseSearchAddressResult>> result = this.reverseSearchAddressWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

        /**
     * **Reverse Geocode to an Address**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReverseSearchAddressResult>> reverseSearchAddressWithResponse(
                ReverseSearchAddressOptions options) {
        return this.reverseSearchAddressWithResponse(options, null);
    }

    /**
     * **Reverse Geocode to an Address**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ReverseSearchAddressResult>> reverseSearchAddressWithResponse(
                ReverseSearchAddressOptions options, Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.ReverseSearchAddressResult>> responseMono =
            this.serviceClient.reverseSearchAddressWithResponseAsync(
                ResponseFormat.JSON,
                Arrays.asList(options.getCoordinates().getLat(), options.getCoordinates().getLon()),
                options.getLanguage(),
                options.includeSpeedLimit(),
                options.getHeading(),
                options.getRadiusInMeters(),
                options.getNumber(),
                options.includeRoadUse(),
                options.getRoadUse(),
                options.allowFreeformNewline(),
                options.includeMatchType(),
                options.getEntityType(),
                options.getLocalizedMapView(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<ReverseSearchAddressResult> simpleResponse = TypeMapper.createReverseSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Reverse Geocode to a Cross Street**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse CrossStreet call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReverseSearchCrossStreetAddressResult> reverseSearchCrossStreetAddress(
            ReverseSearchCrossStreetAddressOptions options) {
        Mono<Response<ReverseSearchCrossStreetAddressResult>> result =
            this.reverseSearchCrossStreetAddressWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Reverse Geocode to a Cross Street**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse CrossStreet call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReverseSearchCrossStreetAddressResult>> reverseSearchCrossStreetAddressWithResponse(
            ReverseSearchCrossStreetAddressOptions options) {
        return this.reverseSearchCrossStreetAddressWithResponse(options, null);
    }

    /**
     * **Reverse Geocode to a Cross Street**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse CrossStreet call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ReverseSearchCrossStreetAddressResult>> reverseSearchCrossStreetAddressWithResponse(
            ReverseSearchCrossStreetAddressOptions options, Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.ReverseSearchCrossStreetAddressResult>> responseMono =
            this.serviceClient.reverseSearchCrossStreetAddressWithResponseAsync(
                ResponseFormat.JSON,
                Arrays.asList(options.getCoordinates().getLat(), options.getCoordinates().getLon()),
                options.getTop(),
                options.getHeading(),
                options.getRadiusInMeters(),
                options.getLanguage(),
                options.getLocalizedMapView(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<ReverseSearchCrossStreetAddressResult> simpleResponse = TypeMapper
                .createReverseSearchCrossStreetResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Structured Address Geocoding**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchStructuredAddress(StructuredAddress address,
            SearchStructuredAddressOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchStructuredAddressWithResponse(address,
            options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Structured Address Geocoding**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchStructuredAddressWithResponse(
            StructuredAddress address, SearchStructuredAddressOptions options) {
        return this.searchStructuredAddressWithResponse(address, options, null);
    }

    /**
     * **Structured Address Geocoding**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchStructuredAddressWithResponse(
            StructuredAddress address, SearchStructuredAddressOptions options, Context context) {
        final SearchStructuredAddressOptions param = Optional.ofNullable(options)
            .orElse(new SearchStructuredAddressOptions());
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchStructuredAddressWithResponseAsync(
                ResponseFormat.JSON,
                param.getLanguage(),
                address.getCountryCode(),
                param.getTop(),
                param.getSkip(),
                address.getStreetNumber(),
                address.getStreetName(),
                address.getCrossStreet(),
                address.getMunicipality(),
                address.getMunicipalitySubdivision(),
                address.getCountryTertiarySubdivision(),
                address.getCountrySecondarySubdivision(),
                address.getCountrySubdivision(),
                address.getPostalCode(),
                param.getExtendedPostalCodesFor(),
                param.getEntityType(),
                param.getLocalizedMapView(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchInsideGeometry(SearchInsideGeometryOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchInsideGeometryWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchInsideGeometryWithResponse(
            SearchInsideGeometryOptions options) {
        return this.searchInsideGeometryWithResponse(options, null);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchInsideGeometryWithResponse(SearchInsideGeometryOptions options,
            Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchInsideGeometryWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                new SearchInsideGeometryRequest().setGeometry(options.getGeometry()),
                options.getTop(),
                options.getLanguage(),
                options.getCategoryFilter(),
                options.getExtendedPostalCodesFor(),
                options.getIdxSet(),
                options.getLocalizedMapView(),
                options.getOperatingHours(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *

     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressResult> searchAlongRoute(SearchAlongRouteOptions options) {
        Mono<Response<SearchAddressResult>> result = this.searchAlongRouteWithResponse(options, null);
        return result.flatMap(response -> {
            return Mono.just(response.getValue());
        });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressResult>> searchAlongRouteWithResponse(SearchAlongRouteOptions options) {
        return this.searchAlongRouteWithResponse(options, null);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search calls.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SearchAddressResult>> searchAlongRouteWithResponse(SearchAlongRouteOptions options,
            Context context) {
        Mono<Response<com.azure.maps.search.implementation.models.SearchAddressResult>> responseMono =
            this.serviceClient.searchAlongRouteWithResponseAsync(
                ResponseFormat.JSON,
                options.getQuery(),
                options.getMaxDetourTime(),
                new SearchAlongRouteRequest().setRoute(options.getRoute()),
                options.getTop(),
                options.getBrandFilter(),
                options.getCategoryFilter(),
                options.getElectricVehicleConnectorFilter(),
                options.getLocalizedMapView(),
                options.getOperatingHours(),
                context);

        // convert to the right (public) SearchAddressResult
        return responseMono.flatMap(response -> {
            Response<SearchAddressResult> simpleResponse = TypeMapper.createSearchResponse(response);
            return Mono.just(simpleResponse);
        });
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressBatchProcessResult>> fuzzySearchBatchSyncWithResponse(
            BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.fuzzySearchBatchSyncWithResponseAsync(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressBatchProcessResult> fuzzySearchBatchSync(
            BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.fuzzySearchBatchSyncAsync(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesFuzzySearchBatchResponse> fuzzySearchBatchWithResponse(
            BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.fuzzySearchBatchWithResponseAsync(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchFuzzyBatchRequestBody The list of search fuzzy queries/requests to process. The list can contain a
     *     max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginFuzzySearchBatch(
            BatchRequest searchFuzzyBatchRequestBody) {
        return this.serviceClient.beginFuzzySearchBatchAsync(JsonFormat.JSON, searchFuzzyBatchRequestBody);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesGetFuzzySearchBatchResponse> getFuzzySearchBatchWithResponse(String batchId) {
        return this.serviceClient.getFuzzySearchBatchWithResponseAsync(batchId);
    }

    /**
     * **Search Fuzzy Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Fuzzy
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy) using just a single API call. You can call
     * Search Address Fuzzy Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/fuzzy/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search fuzzy_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:
     *
     * <p>```json { "batchItems": [ {"query":
     * "?query=atm&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000&amp;limit=5"}, {"query": "?query=Statue Of
     * Liberty&amp;limit=2"}, {"query": "?query=Starbucks&amp;lat=47.639769&amp;lon=-122.128362&amp;radius=5000"},
     * {"query": "?query=Space Needle"}, {"query": "?query=pizza&amp;limit=10"} ] } ```
     *
     * <p>A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search fuzzy_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in
     * the _search fuzzy_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should
     * also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/fuzzy/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchfuzzy#SearchAddressResponse) -
     * If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "atm" }, "results": [ { "type": "POI", "poi": { "name": "ATM at Wells Fargo"
     * }, "address": { "country": "United States Of America", "freeformAddress": "3240 157th Ave NE, Redmond, WA 98052"
     * } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "statue of liberty" }, "results": [ { "type":
     * "POI", "poi": { "name": "Statue of Liberty" }, "address": { "country": "United States Of America",
     * "freeformAddress": "New York, NY 10004" } } ] } }, { "statusCode": 400, "response": { "error": { "code": "400
     * BadRequest", "message": "Bad request: one or more parameters were incorrectly specified or are mutually
     * exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetFuzzySearchBatch(
            String batchId) {
        return this.serviceClient.beginGetFuzzySearchBatchAsync(batchId);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchAddressBatchProcessResult>> searchAddressBatchSyncWithResponse(
            BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.searchAddressBatchSyncWithResponseAsync(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchAddressBatchProcessResult> searchAddressBatchSync(
            BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.searchAddressBatchSyncAsync(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesSearchAddressBatchResponse> searchAddressBatchWithResponse(
            BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.searchAddressBatchWithResponseAsync(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressBatchRequestBody The list of address geocoding queries/requests to process. The list can
     *     contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginSearchAddressBatch(
            BatchRequest searchAddressBatchRequestBody) {
        return this.serviceClient.beginSearchAddressBatchAsync(JsonFormat.JSON, searchAddressBatchRequestBody);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesGetSearchAddressBatchResponse> getSearchAddressBatchWithResponse(String batchId) {
        return this.serviceClient.getSearchAddressBatchWithResponseAsync(batchId);
    }

    /**
     * **Search Address Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress) using just a single API call. You can call
     * Search Address Batch API to run either asynchronously (async) or synchronously (sync). The async API allows
     * caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address_ queries you will use a `POST` request where the
     * request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to
     * `application/json`. Here's a sample request body containing 5 _search address_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=400 Broad St, Seattle, WA 98109&amp;limit=3"}, {"query":
     * "?query=One, Microsoft Way, Redmond, WA 98052&amp;limit=3"}, {"query": "?query=350 5th Ave, New York, NY
     * 10118&amp;limit=1"}, {"query": "?query=Pike Pl, Seattle, WA
     * 98101&amp;lat=47.610970&amp;lon=-122.342469&amp;radius=1000"}, {"query": "?query=Champ de Mars, 5 Avenue Anatole
     * France, 75007 Paris, France&amp;limit=1"} ] } ```
     *
     * <p>A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version
     * and subscription-key. It can accept any of the supported _search address_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#uri-parameters). The string values
     * in the _search address_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it
     * should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddress#SearchAddressResponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "query": "one microsoft way redmond wa 98052" }, "results": [ { "position": { "lat":
     * 47.63989, "lon": -122.12509 } } ] } }, { "statusCode": 200, "response": { "summary": { "query": "pike pl seattle
     * wa 98101" }, "results": [ { "position": { "lat": 47.60963, "lon": -122.34215 } } ] } }, { "statusCode": 400,
     * "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more parameters were
     * incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SearchAddressBatchProcessResult, SearchAddressBatchProcessResult> beginGetSearchAddressBatch(
            String batchId) {
        return this.serviceClient.beginGetSearchAddressBatchAsync(batchId);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReverseSearchAddressBatchProcessResult>> reverseSearchAddressBatchSyncWithResponse(
            BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.reverseSearchAddressBatchSyncWithResponseAsync(
                JsonFormat.JSON, searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReverseSearchAddressBatchProcessResult> reverseSearchAddressBatchSync(
            BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.reverseSearchAddressBatchSyncAsync(JsonFormat.JSON,
            searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesReverseSearchAddressBatchResponse> reverseSearchAddressBatchWithResponse(
            BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.reverseSearchAddressBatchWithResponseAsync(
                JsonFormat.JSON, searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param searchAddressReverseBatchRequestBody The list of reverse geocoding queries/requests to process. The list
     *     can contain a max of 10,000 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginReverseSearchAddressBatch(BatchRequest searchAddressReverseBatchRequestBody) {
        return this.serviceClient.beginReverseSearchAddressBatchAsync(JsonFormat.JSON,
            searchAddressReverseBatchRequestBody);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchesGetReverseSearchAddressBatchResponse> getReverseSearchAddressBatchWithResponse(
                String batchId) {
        return this.serviceClient.getReverseSearchAddressBatchWithResponseAsync(batchId);
    }

    /**
     * **Search Address Reverse Batch API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>The Search Address Batch API sends batches of queries to [Search Address Reverse
     * API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You
     * can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async
     * API allows caller to batch up to **10,000** queries and sync API up to **100** queries. ### Submit Synchronous
     * Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a
     * request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve
     * the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer
     * than 60 seconds. The number of batch items is limited to **100** for this API. ``` POST
     * https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` ### Submit Asynchronous Batch Request The Asynchronous API is appropriate for processing big volumes of
     * relatively complex search requests - It allows the retrieval of results in a separate call (multiple downloads
     * are possible). - The asynchronous API is optimized for reliability and is not expected to run into a timeout. -
     * The number of batch items is limited to **10,000** for this API.
     *
     * <p>When you make a request by using async request, by default the service returns a 202 response code along a
     * redirect URL in the Location field of the response header. This URL should be checked periodically until the
     * response data or error information is available. The asynchronous responses are stored for **14** days. The
     * redirect URL returns a 404 response if used after the expiration period.
     *
     * <p>Please note that asynchronous batch request is a long-running request. Here's a typical sequence of
     * operations: 1. Client sends a Search Address Batch `POST` request to Azure Maps 2. The server will respond with
     * one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request has been accepted.
     *
     * <p>&gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request`
     * or any other `Error` status code.
     *
     * <p>3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to
     * download the results of the batch request. This status URI looks like following:
     *
     * <p>``` GET
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
     *
     * <p>### POST Body for Batch Request To send the _search address reverse_ queries you will use a `POST` request
     * where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be
     * set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
     *
     * <p>```json { "batchItems": [ {"query": "?query=48.858561,2.294911"}, {"query":
     * "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"}, {"query": "?query=47.621028,-122.348170"}, {"query":
     * "?query=43.722990,10.396695"}, {"query": "?query=40.750958,-73.982336"} ] } ```
     *
     * <p>A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path,
     * api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI
     * parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string
     * values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\
     * ) and it should also be properly URL-encoded.
     *
     * <p>The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the
     * batch should contain at least **1** query.
     *
     * <p>### Download Asynchronous Batch Results To download the async batch results you will issue a `GET` request to
     * the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful
     * `POST` batch request and looks like the following:
     *
     * <p>```
     * https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
     * ``` Here's the typical sequence of operations for downloading the batch results: 1. Client sends a `GET` request
     * using the _download URL_. 2. The server will respond with one of the following:
     *
     * <p>&gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some
     * time.
     *
     * <p>&gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
     *
     * <p>### Batch Response Model The returned data content is similar for async and sync requests. When downloading
     * the results of an async batch request, if the batch has finished processing, the response body contains the batch
     * response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of
     * the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch
     * response also includes a `batchItems` array which contains a response for each and every query in the batch
     * request. The `batchItems` will contain the results in the exact same order the original queries were sent in the
     * batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in
     * `batchItems` is of one of the following types:
     *
     * <p>-
     * [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse)
     * - If the query completed successfully.
     *
     * <p>- `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     *
     * <p>Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
     *
     * <p>```json { "summary": { "successfulRequests": 2, "totalRequests": 3 }, "batchItems": [ { "statusCode": 200,
     * "response": { "summary": { "queryTime": 11 }, "addresses": [ { "address": { "country": "France",
     * "freeformAddress": "Avenue Anatole France, 75007 Paris" }, "position": "48.858490,2.294820" } ] } }, {
     * "statusCode": 200, "response": { "summary": { "queryTime": 1 }, "addresses": [ { "address": { "country": "United
     * States of America", "freeformAddress": "157th Pl NE, Redmond WA 98052" }, "position": "47.640470,-122.129430" } ]
     * } }, { "statusCode": 400, "response": { "error": { "code": "400 BadRequest", "message": "Bad request: one or more
     * parameters were incorrectly specified or are mutually exclusive." } } } ] } ```.
     *
     * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Search Address Reverse Batch service call.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<ReverseSearchAddressBatchProcessResult, ReverseSearchAddressBatchProcessResult>
            beginGetReverseSearchAddressBatch(String batchId) {
        return this.serviceClient.beginGetReverseSearchAddressBatchAsync(batchId);
    }
}
