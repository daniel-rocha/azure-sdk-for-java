// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.timezone.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.timezone.models.TimezoneById;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** This object is returned from a successful Timezone By ID call. */
@Immutable
public final class TimezoneByIdResultInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TimezoneByIdResultInner.class);

    /*
     * Version property
     */
    @JsonProperty(value = "Version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /*
     * Reference Utc Timestamp property
     */
    @JsonProperty(value = "ReferenceUtcTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime referenceUtcTimestamp;

    /*
     * TimeZoneById array
     */
    @JsonProperty(value = "TimeZones", access = JsonProperty.Access.WRITE_ONLY)
    private List<TimezoneById> timeZones;

    /**
     * Get the version property: Version property.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the referenceUtcTimestamp property: Reference Utc Timestamp property.
     *
     * @return the referenceUtcTimestamp value.
     */
    public OffsetDateTime referenceUtcTimestamp() {
        return this.referenceUtcTimestamp;
    }

    /**
     * Get the timeZones property: TimeZoneById array.
     *
     * @return the timeZones value.
     */
    public List<TimezoneById> timeZones() {
        return this.timeZones;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timeZones() != null) {
            timeZones().forEach(e -> e.validate());
        }
    }
}
