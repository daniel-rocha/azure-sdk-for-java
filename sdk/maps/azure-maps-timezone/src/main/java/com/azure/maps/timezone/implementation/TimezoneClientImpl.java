// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.timezone.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.maps.timezone.models.ErrorResponseException;
import com.azure.maps.timezone.models.IanaId;
import com.azure.maps.timezone.models.JsonFormat;
import com.azure.maps.timezone.models.TimezoneIanaVersionResult;
import com.azure.maps.timezone.models.TimezoneOptions;
import com.azure.maps.timezone.models.TimezoneResult;
import com.azure.maps.timezone.models.TimezoneWindows;
import java.time.OffsetDateTime;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the TimezoneClient type. */
public final class TimezoneClientImpl {
    private final ClientLogger logger = new ClientLogger(TimezoneClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TimezoneClientService service;

    /**
     * Specifies which account is intended for usage in conjunction with the Azure AD security model. It represents a
     * unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane Account API. To
     * use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
     */
    private final String clientId;

    /**
     * Gets Specifies which account is intended for usage in conjunction with the Azure AD security model. It represents
     * a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane Account API. To
     * use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
     *
     * @return the clientId value.
     */
    public String getClientId() {
        return this.clientId;
    }

    /** server parameter. */
    private final String host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public String getHost() {
        return this.host;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of TimezoneClient client.
     *
     * @param clientId Specifies which account is intended for usage in conjunction with the Azure AD security model. It
     *     represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane
     *     Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    public TimezoneClientImpl(String clientId, String host, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                clientId,
                host,
                apiVersion);
    }

    /**
     * Initializes an instance of TimezoneClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param clientId Specifies which account is intended for usage in conjunction with the Azure AD security model. It
     *     represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane
     *     Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    public TimezoneClientImpl(HttpPipeline httpPipeline, String clientId, String host, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), clientId, host, apiVersion);
    }

    /**
     * Initializes an instance of TimezoneClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param clientId Specifies which account is intended for usage in conjunction with the Azure AD security model. It
     *     represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane
     *     Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    public TimezoneClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String clientId,
            String host,
            String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.clientId = clientId;
        this.host = host;
        this.apiVersion = apiVersion;
        this.service = RestProxy.create(TimezoneClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for TimezoneClient to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TimezoneClient")
    private interface TimezoneClientService {
        @Get("/timezone/byId/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<TimezoneResult>> getTimezoneByID(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept-Language") String acceptLanguage,
                @QueryParam("options") TimezoneOptions options,
                @QueryParam("timeStamp") OffsetDateTime timeStamp,
                @QueryParam("transitionsFrom") OffsetDateTime daylightSavingsTimeFrom,
                @QueryParam("transitionsYears") Integer daylightSavingsTimeLastingYears,
                @PathParam("format") JsonFormat format,
                @QueryParam("query") String timezoneId,
                @HeaderParam("Accept") String accept);

        @Get("/timezone/byCoordinates/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<TimezoneResult>> getTimezoneByCoordinates(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept-Language") String acceptLanguage,
                @QueryParam("options") TimezoneOptions options,
                @QueryParam("timeStamp") OffsetDateTime timeStamp,
                @QueryParam("transitionsFrom") OffsetDateTime daylightSavingsTimeFrom,
                @QueryParam("transitionsYears") Integer daylightSavingsTimeLastingYears,
                @PathParam("format") JsonFormat format,
                @QueryParam("query") String coordinates,
                @HeaderParam("Accept") String accept);

        @Get("/timezone/enumWindows/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<List<TimezoneWindows>>> getWindowsTimezoneIds(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @HeaderParam("Accept") String accept);

        @Get("/timezone/enumIana/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<List<IanaId>>> getIanaTimezoneIds(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @HeaderParam("Accept") String accept);

        @Get("/timezone/ianaVersion/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<TimezoneIanaVersionResult>> getIanaVersion(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @HeaderParam("Accept") String accept);

        @Get("/timezone/windowsToIana/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<List<IanaId>>> convertWindowsTimezoneToIana(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String clientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @QueryParam("query") String windowsTimezoneId,
                @QueryParam("territory") String windowsTerritoryCode,
                @HeaderParam("Accept") String accept);
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param timezoneId The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TimezoneResult>> getTimezoneByIDWithResponseAsync(
            JsonFormat format,
            String timezoneId,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        final String accept = "application/json";
        return service.getTimezoneByID(
                this.getHost(),
                this.getClientId(),
                this.getApiVersion(),
                acceptLanguage,
                options,
                timeStamp,
                daylightSavingsTimeFrom,
                daylightSavingsTimeLastingYears,
                format,
                timezoneId,
                accept);
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param timezoneId The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TimezoneResult> getTimezoneByIDAsync(
            JsonFormat format,
            String timezoneId,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        return getTimezoneByIDWithResponseAsync(
                        format,
                        timezoneId,
                        acceptLanguage,
                        options,
                        timeStamp,
                        daylightSavingsTimeFrom,
                        daylightSavingsTimeLastingYears)
                .flatMap(
                        (Response<TimezoneResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param timezoneId The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneResult getTimezoneByID(
            JsonFormat format,
            String timezoneId,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        return getTimezoneByIDAsync(
                        format,
                        timezoneId,
                        acceptLanguage,
                        options,
                        timeStamp,
                        daylightSavingsTimeFrom,
                        daylightSavingsTimeLastingYears)
                .block();
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param coordinates Coordinates of the point for which time zone information is requested. This parameter is a
     *     list of coordinates, containing a pair of coordinate(lat, long). When this endpoint is called directly,
     *     coordinates are passed in as a single string containing coordinates, separated by commas.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TimezoneResult>> getTimezoneByCoordinatesWithResponseAsync(
            JsonFormat format,
            List<Double> coordinates,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        final String accept = "application/json";
        String coordinatesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(coordinates, CollectionFormat.CSV);
        return service.getTimezoneByCoordinates(
                this.getHost(),
                this.getClientId(),
                this.getApiVersion(),
                acceptLanguage,
                options,
                timeStamp,
                daylightSavingsTimeFrom,
                daylightSavingsTimeLastingYears,
                format,
                coordinatesConverted,
                accept);
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param coordinates Coordinates of the point for which time zone information is requested. This parameter is a
     *     list of coordinates, containing a pair of coordinate(lat, long). When this endpoint is called directly,
     *     coordinates are passed in as a single string containing coordinates, separated by commas.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TimezoneResult> getTimezoneByCoordinatesAsync(
            JsonFormat format,
            List<Double> coordinates,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        return getTimezoneByCoordinatesWithResponseAsync(
                        format,
                        coordinates,
                        acceptLanguage,
                        options,
                        timeStamp,
                        daylightSavingsTimeFrom,
                        daylightSavingsTimeLastingYears)
                .flatMap(
                        (Response<TimezoneResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param coordinates Coordinates of the point for which time zone information is requested. This parameter is a
     *     list of coordinates, containing a pair of coordinate(lat, long). When this endpoint is called directly,
     *     coordinates are passed in as a single string containing coordinates, separated by commas.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timeStamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param daylightSavingsTimeFrom Alternatively, use alias "tf". The start date from which daylight savings time
     *     (DST) transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param daylightSavingsTimeLastingYears Alternatively, use alias "ty". The number of years from "transitionsFrom"
     *     for which DST transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call or By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneResult getTimezoneByCoordinates(
            JsonFormat format,
            List<Double> coordinates,
            String acceptLanguage,
            TimezoneOptions options,
            OffsetDateTime timeStamp,
            OffsetDateTime daylightSavingsTimeFrom,
            Integer daylightSavingsTimeLastingYears) {
        return getTimezoneByCoordinatesAsync(
                        format,
                        coordinates,
                        acceptLanguage,
                        options,
                        timeStamp,
                        daylightSavingsTimeFrom,
                        daylightSavingsTimeLastingYears)
                .block();
    }

    /**
     * __Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<TimezoneWindows>>> getWindowsTimezoneIdsWithResponseAsync(JsonFormat format) {
        final String accept = "application/json";
        return service.getWindowsTimezoneIds(this.getHost(), this.getClientId(), this.getApiVersion(), format, accept);
    }

    /**
     * __Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<TimezoneWindows>> getWindowsTimezoneIdsAsync(JsonFormat format) {
        return getWindowsTimezoneIdsWithResponseAsync(format)
                .flatMap(
                        (Response<List<TimezoneWindows>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<TimezoneWindows> getWindowsTimezoneIds(JsonFormat format) {
        return getWindowsTimezoneIdsAsync(format).block();
    }

    /**
     * __IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<IanaId>>> getIanaTimezoneIdsWithResponseAsync(JsonFormat format) {
        final String accept = "application/json";
        return service.getIanaTimezoneIds(this.getHost(), this.getClientId(), this.getApiVersion(), format, accept);
    }

    /**
     * __IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<IanaId>> getIanaTimezoneIdsAsync(JsonFormat format) {
        return getIanaTimezoneIdsWithResponseAsync(format)
                .flatMap(
                        (Response<List<IanaId>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IanaId> getIanaTimezoneIds(JsonFormat format) {
        return getIanaTimezoneIdsAsync(format).block();
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number as Metadata.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TimezoneIanaVersionResult>> getIanaVersionWithResponseAsync(JsonFormat format) {
        final String accept = "application/json";
        return service.getIanaVersion(this.getHost(), this.getClientId(), this.getApiVersion(), format, accept);
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number as Metadata.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TimezoneIanaVersionResult> getIanaVersionAsync(JsonFormat format) {
        return getIanaVersionWithResponseAsync(format)
                .flatMap(
                        (Response<TimezoneIanaVersionResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number as Metadata.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneIanaVersionResult getIanaVersion(JsonFormat format) {
        return getIanaVersionAsync(format).block();
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param windowsTimezoneId The Windows time zone ID.
     * @param windowsTerritoryCode Windows Time Zone territory code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<IanaId>>> convertWindowsTimezoneToIanaWithResponseAsync(
            JsonFormat format, String windowsTimezoneId, String windowsTerritoryCode) {
        final String accept = "application/json";
        return service.convertWindowsTimezoneToIana(
                this.getHost(),
                this.getClientId(),
                this.getApiVersion(),
                format,
                windowsTimezoneId,
                windowsTerritoryCode,
                accept);
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param windowsTimezoneId The Windows time zone ID.
     * @param windowsTerritoryCode Windows Time Zone territory code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<IanaId>> convertWindowsTimezoneToIanaAsync(
            JsonFormat format, String windowsTimezoneId, String windowsTerritoryCode) {
        return convertWindowsTimezoneToIanaWithResponseAsync(format, windowsTimezoneId, windowsTerritoryCode)
                .flatMap(
                        (Response<List<IanaId>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param windowsTimezoneId The Windows time zone ID.
     * @param windowsTerritoryCode Windows Time Zone territory code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IanaId> convertWindowsTimezoneToIana(
            JsonFormat format, String windowsTimezoneId, String windowsTerritoryCode) {
        return convertWindowsTimezoneToIanaAsync(format, windowsTimezoneId, windowsTerritoryCode).block();
    }
}
