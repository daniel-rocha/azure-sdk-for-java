// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.timezone.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.timezone.fluent.TimezonesClient;
import com.azure.maps.timezone.fluent.models.IanaIdInner;
import com.azure.maps.timezone.fluent.models.TimezoneByCoordinatesResultInner;
import com.azure.maps.timezone.fluent.models.TimezoneByIdResultInner;
import com.azure.maps.timezone.fluent.models.TimezoneEnumWindowInner;
import com.azure.maps.timezone.fluent.models.TimezoneIanaVersionResultInner;
import com.azure.maps.timezone.models.IanaId;
import com.azure.maps.timezone.models.ResponseFormat;
import com.azure.maps.timezone.models.TimezoneByCoordinatesResult;
import com.azure.maps.timezone.models.TimezoneByIdResult;
import com.azure.maps.timezone.models.TimezoneEnumWindow;
import com.azure.maps.timezone.models.TimezoneIanaVersionResult;
import com.azure.maps.timezone.models.TimezoneOptions;
import com.azure.maps.timezone.models.Timezones;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class TimezonesImpl implements Timezones {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TimezonesImpl.class);

    private final TimezonesClient innerClient;

    private final com.azure.maps.timezone.TimezoneManager serviceManager;

    public TimezonesImpl(TimezonesClient innerClient, com.azure.maps.timezone.TimezoneManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public TimezoneByIdResult getTimezoneById(ResponseFormat format, String query) {
        TimezoneByIdResultInner inner = this.serviceClient().getTimezoneById(format, query);
        if (inner != null) {
            return new TimezoneByIdResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TimezoneByIdResult> getTimezoneByIdWithResponse(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        Response<TimezoneByIdResultInner> inner =
            this
                .serviceClient()
                .getTimezoneByIdWithResponse(
                    format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TimezoneByIdResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TimezoneByCoordinatesResult getTimezoneByCoordinates(ResponseFormat format, String query) {
        TimezoneByCoordinatesResultInner inner = this.serviceClient().getTimezoneByCoordinates(format, query);
        if (inner != null) {
            return new TimezoneByCoordinatesResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TimezoneByCoordinatesResult> getTimezoneByCoordinatesWithResponse(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        Response<TimezoneByCoordinatesResultInner> inner =
            this
                .serviceClient()
                .getTimezoneByCoordinatesWithResponse(
                    format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TimezoneByCoordinatesResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public List<TimezoneEnumWindow> getTimezoneEnumWindows(ResponseFormat format) {
        List<TimezoneEnumWindowInner> inner = this.serviceClient().getTimezoneEnumWindows(format);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new TimezoneEnumWindowImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<TimezoneEnumWindow>> getTimezoneEnumWindowsWithResponse(
        ResponseFormat format, Context context) {
        Response<List<TimezoneEnumWindowInner>> inner =
            this.serviceClient().getTimezoneEnumWindowsWithResponse(format, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new TimezoneEnumWindowImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<IanaId> getTimezoneEnumIana(ResponseFormat format) {
        List<IanaIdInner> inner = this.serviceClient().getTimezoneEnumIana(format);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new IanaIdImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<IanaId>> getTimezoneEnumIanaWithResponse(ResponseFormat format, Context context) {
        Response<List<IanaIdInner>> inner = this.serviceClient().getTimezoneEnumIanaWithResponse(format, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new IanaIdImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public TimezoneIanaVersionResult getTimezoneIanaVersion(ResponseFormat format) {
        TimezoneIanaVersionResultInner inner = this.serviceClient().getTimezoneIanaVersion(format);
        if (inner != null) {
            return new TimezoneIanaVersionResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TimezoneIanaVersionResult> getTimezoneIanaVersionWithResponse(
        ResponseFormat format, Context context) {
        Response<TimezoneIanaVersionResultInner> inner =
            this.serviceClient().getTimezoneIanaVersionWithResponse(format, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TimezoneIanaVersionResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public List<IanaId> getTimezoneWindowsToIana(ResponseFormat format, String query) {
        List<IanaIdInner> inner = this.serviceClient().getTimezoneWindowsToIana(format, query);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new IanaIdImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<IanaId>> getTimezoneWindowsToIanaWithResponse(
        ResponseFormat format, String query, String territory, Context context) {
        Response<List<IanaIdInner>> inner =
            this.serviceClient().getTimezoneWindowsToIanaWithResponse(format, query, territory, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new IanaIdImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    private TimezonesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.timezone.TimezoneManager manager() {
        return this.serviceManager;
    }
}
