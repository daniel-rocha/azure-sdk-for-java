// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.timezone.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.timezone.fluent.TimezonesClient;
import com.azure.maps.timezone.fluent.models.IanaIdInner;
import com.azure.maps.timezone.fluent.models.TimezoneByCoordinatesResultInner;
import com.azure.maps.timezone.fluent.models.TimezoneByIdResultInner;
import com.azure.maps.timezone.fluent.models.TimezoneEnumWindowInner;
import com.azure.maps.timezone.fluent.models.TimezoneIanaVersionResultInner;
import com.azure.maps.timezone.models.Geography;
import com.azure.maps.timezone.models.ResponseFormat;
import com.azure.maps.timezone.models.TimezoneOptions;
import java.time.OffsetDateTime;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TimezonesClient. */
public final class TimezonesClientImpl implements TimezonesClient {
    private final ClientLogger logger = new ClientLogger(TimezonesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TimezonesService service;

    /** The service client containing this operation class. */
    private final TimezoneClientImpl client;

    /**
     * Initializes an instance of TimezonesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TimezonesClientImpl(TimezoneClientImpl client) {
        this.service =
            RestProxy.create(TimezonesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TimezoneClientTimezones to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "TimezoneClientTimezo")
    private interface TimezonesService {
        @Headers({"Content-Type: application/json"})
        @Get("/timezone/byId/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimezoneByIdResultInner>> getTimezoneById(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage,
            @QueryParam("options") TimezoneOptions options,
            @QueryParam("timeStamp") OffsetDateTime timestamp,
            @QueryParam("transitionsFrom") OffsetDateTime transitionsFrom,
            @QueryParam("transitionsYears") Integer transitionsYears,
            @PathParam("format") ResponseFormat format,
            @QueryParam("query") String query,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/timezone/byCoordinates/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimezoneByCoordinatesResultInner>> getTimezoneByCoordinates(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage,
            @QueryParam("options") TimezoneOptions options,
            @QueryParam("timeStamp") OffsetDateTime timestamp,
            @QueryParam("transitionsFrom") OffsetDateTime transitionsFrom,
            @QueryParam("transitionsYears") Integer transitionsYears,
            @PathParam("format") ResponseFormat format,
            @QueryParam("query") String query,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/timezone/enumWindows/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<TimezoneEnumWindowInner>>> getTimezoneEnumWindows(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/timezone/enumIana/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<IanaIdInner>>> getTimezoneEnumIana(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/timezone/ianaVersion/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TimezoneIanaVersionResultInner>> getTimezoneIanaVersion(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/timezone/windowsToIana/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<IanaIdInner>>> getTimezoneWindowsToIana(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam("query") String query,
            @QueryParam("territory") String territory,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneByIdResultInner>> getTimezoneByIdWithResponseAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneById(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            acceptLanguage,
                            options,
                            timestamp,
                            transitionsFrom,
                            transitionsYears,
                            format,
                            query,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneByIdResultInner>> getTimezoneByIdWithResponseAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneById(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                acceptLanguage,
                options,
                timestamp,
                transitionsFrom,
                transitionsYears,
                format,
                query,
                accept,
                context);
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimezoneByIdResultInner> getTimezoneByIdAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears) {
        return getTimezoneByIdWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .flatMap(
                (Response<TimezoneByIdResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimezoneByIdResultInner> getTimezoneByIdAsync(ResponseFormat format, String query) {
        final String acceptLanguage = null;
        final TimezoneOptions options = null;
        final OffsetDateTime timestamp = null;
        final OffsetDateTime transitionsFrom = null;
        final Integer transitionsYears = null;
        return getTimezoneByIdWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .flatMap(
                (Response<TimezoneByIdResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneByIdResultInner getTimezoneById(ResponseFormat format, String query) {
        final String acceptLanguage = null;
        final TimezoneOptions options = null;
        final OffsetDateTime timestamp = null;
        final OffsetDateTime transitionsFrom = null;
        final Integer transitionsYears = null;
        return getTimezoneByIdAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .block();
    }

    /**
     * __Time Zone by Id__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for the specified IANA time zone ID.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The IANA time zone ID.
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By ID call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TimezoneByIdResultInner> getTimezoneByIdWithResponse(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        return getTimezoneByIdWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears, context)
            .block();
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneByCoordinatesResultInner>> getTimezoneByCoordinatesWithResponseAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneByCoordinates(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            acceptLanguage,
                            options,
                            timestamp,
                            transitionsFrom,
                            transitionsYears,
                            format,
                            query,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneByCoordinatesResultInner>> getTimezoneByCoordinatesWithResponseAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneByCoordinates(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                acceptLanguage,
                options,
                timestamp,
                transitionsFrom,
                transitionsYears,
                format,
                query,
                accept,
                context);
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimezoneByCoordinatesResultInner> getTimezoneByCoordinatesAsync(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears) {
        return getTimezoneByCoordinatesWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .flatMap(
                (Response<TimezoneByCoordinatesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimezoneByCoordinatesResultInner> getTimezoneByCoordinatesAsync(ResponseFormat format, String query) {
        final String acceptLanguage = null;
        final TimezoneOptions options = null;
        final OffsetDateTime timestamp = null;
        final OffsetDateTime transitionsFrom = null;
        final Integer transitionsYears = null;
        return getTimezoneByCoordinatesWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .flatMap(
                (Response<TimezoneByCoordinatesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneByCoordinatesResultInner getTimezoneByCoordinates(ResponseFormat format, String query) {
        final String acceptLanguage = null;
        final TimezoneOptions options = null;
        final OffsetDateTime timestamp = null;
        final OffsetDateTime transitionsFrom = null;
        final Integer transitionsYears = null;
        return getTimezoneByCoordinatesAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears)
            .block();
    }

    /**
     * __Time Zone by Coordinates__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns current, historical, and future time zone information for a specified latitude-longitude
     * pair. In addition, the API provides sunset and sunrise times for a given location.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the point for which time zone information is requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param acceptLanguage Specifies the language code in which the timezone names should be returned. If no language
     *     code is provided, the response will be in "EN". Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
     * @param options Alternatively, use alias "o". Options available for types of information returned in the result.
     * @param timestamp Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the
     *     machine time serving the request.
     * @param transitionsFrom Alternatively, use alias "tf". The start date from which daylight savings time (DST)
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param transitionsYears Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST
     *     transitions are requested, only applies when "options" = all or "options" = transitions.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone By Coordinates call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TimezoneByCoordinatesResultInner> getTimezoneByCoordinatesWithResponse(
        ResponseFormat format,
        String query,
        String acceptLanguage,
        TimezoneOptions options,
        OffsetDateTime timestamp,
        OffsetDateTime transitionsFrom,
        Integer transitionsYears,
        Context context) {
        return getTimezoneByCoordinatesWithResponseAsync(
                format, query, acceptLanguage, options, timestamp, transitionsFrom, transitionsYears, context)
            .block();
    }

    /**
     * __Enumerate Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<TimezoneEnumWindowInner>>> getTimezoneEnumWindowsWithResponseAsync(
        ResponseFormat format) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneEnumWindows(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Enumerate Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<TimezoneEnumWindowInner>>> getTimezoneEnumWindowsWithResponseAsync(
        ResponseFormat format, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneEnumWindows(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                accept,
                context);
    }

    /**
     * __Enumerate Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<TimezoneEnumWindowInner>> getTimezoneEnumWindowsAsync(ResponseFormat format) {
        return getTimezoneEnumWindowsWithResponseAsync(format)
            .flatMap(
                (Response<List<TimezoneEnumWindowInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Enumerate Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<TimezoneEnumWindowInner> getTimezoneEnumWindows(ResponseFormat format) {
        return getTimezoneEnumWindowsAsync(format).block();
    }

    /**
     * __Enumerate Windows Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of Windows Time Zone IDs.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum Windows call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<TimezoneEnumWindowInner>> getTimezoneEnumWindowsWithResponse(
        ResponseFormat format, Context context) {
        return getTimezoneEnumWindowsWithResponseAsync(format, context).block();
    }

    /**
     * __Enumerate IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<IanaIdInner>>> getTimezoneEnumIanaWithResponseAsync(ResponseFormat format) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneEnumIana(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Enumerate IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<IanaIdInner>>> getTimezoneEnumIanaWithResponseAsync(
        ResponseFormat format, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneEnumIana(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                accept,
                context);
    }

    /**
     * __Enumerate IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<IanaIdInner>> getTimezoneEnumIanaAsync(ResponseFormat format) {
        return getTimezoneEnumIanaWithResponseAsync(format)
            .flatMap(
                (Response<List<IanaIdInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Enumerate IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IanaIdInner> getTimezoneEnumIana(ResponseFormat format) {
        return getTimezoneEnumIanaAsync(format).block();
    }

    /**
     * __Enumerate IANA Time Zones__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the
     * system within one day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Enum IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<IanaIdInner>> getTimezoneEnumIanaWithResponse(ResponseFormat format, Context context) {
        return getTimezoneEnumIanaWithResponseAsync(format, context).block();
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneIanaVersionResultInner>> getTimezoneIanaVersionWithResponseAsync(
        ResponseFormat format) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneIanaVersion(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TimezoneIanaVersionResultInner>> getTimezoneIanaVersionWithResponseAsync(
        ResponseFormat format, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneIanaVersion(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                accept,
                context);
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TimezoneIanaVersionResultInner> getTimezoneIanaVersionAsync(ResponseFormat format) {
        return getTimezoneIanaVersionWithResponseAsync(format)
            .flatMap(
                (Response<TimezoneIanaVersionResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TimezoneIanaVersionResultInner getTimezoneIanaVersion(ResponseFormat format) {
        return getTimezoneIanaVersionAsync(format).block();
    }

    /**
     * __Time Zone IANA Version__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns the current IANA version number.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone IANA Version call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TimezoneIanaVersionResultInner> getTimezoneIanaVersionWithResponse(
        ResponseFormat format, Context context) {
        return getTimezoneIanaVersionWithResponseAsync(format, context).block();
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @param territory Windows Time Zone territory code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<IanaIdInner>>> getTimezoneWindowsToIanaWithResponseAsync(
        ResponseFormat format, String query, String territory) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTimezoneWindowsToIana(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            query,
                            territory,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @param territory Windows Time Zone territory code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<IanaIdInner>>> getTimezoneWindowsToIanaWithResponseAsync(
        ResponseFormat format, String query, String territory, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTimezoneWindowsToIana(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                query,
                territory,
                accept,
                context);
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @param territory Windows Time Zone territory code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<IanaIdInner>> getTimezoneWindowsToIanaAsync(
        ResponseFormat format, String query, String territory) {
        return getTimezoneWindowsToIanaWithResponseAsync(format, query, territory)
            .flatMap(
                (Response<List<IanaIdInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<IanaIdInner>> getTimezoneWindowsToIanaAsync(ResponseFormat format, String query) {
        final String territory = null;
        return getTimezoneWindowsToIanaWithResponseAsync(format, query, territory)
            .flatMap(
                (Response<List<IanaIdInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IanaIdInner> getTimezoneWindowsToIana(ResponseFormat format, String query) {
        final String territory = null;
        return getTimezoneWindowsToIanaAsync(format, query, territory).block();
    }

    /**
     * __Windows to IANA Time Zone__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be
     * returned for a single Windows ID. It is possible to narrow these results by adding an optional territory
     * parameter.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The Windows time zone ID.
     * @param territory Windows Time Zone territory code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Timezone Windows To IANA call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<IanaIdInner>> getTimezoneWindowsToIanaWithResponse(
        ResponseFormat format, String query, String territory, Context context) {
        return getTimezoneWindowsToIanaWithResponseAsync(format, query, territory, context).block();
    }
}
