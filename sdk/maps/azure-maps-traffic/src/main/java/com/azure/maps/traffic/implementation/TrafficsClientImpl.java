// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.traffic.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.traffic.fluent.TrafficsClient;
import com.azure.maps.traffic.fluent.models.TrafficFlowSegmentResultInner;
import com.azure.maps.traffic.fluent.models.TrafficIncidentDetailResultInner;
import com.azure.maps.traffic.fluent.models.TrafficIncidentViewportResultInner;
import com.azure.maps.traffic.models.Geography;
import com.azure.maps.traffic.models.IncidentGeometryType;
import com.azure.maps.traffic.models.ProjectionStandard;
import com.azure.maps.traffic.models.SpeedUnit;
import com.azure.maps.traffic.models.TextFormat;
import com.azure.maps.traffic.models.TileFormat;
import com.azure.maps.traffic.models.TrafficFlowSegmentStyle;
import com.azure.maps.traffic.models.TrafficFlowTileStyle;
import com.azure.maps.traffic.models.TrafficIncidentDetailStyle;
import com.azure.maps.traffic.models.TrafficIncidentTileStyle;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Iterator;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TrafficsClient. */
public final class TrafficsClientImpl implements TrafficsClient {
    private final ClientLogger logger = new ClientLogger(TrafficsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TrafficsService service;

    /** The service client containing this operation class. */
    private final TrafficClientImpl client;

    /**
     * Initializes an instance of TrafficsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TrafficsClientImpl(TrafficClientImpl client) {
        this.service = RestProxy.create(TrafficsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TrafficClientTraffics to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "TrafficClientTraffic")
    private interface TrafficsService {
        @Headers({"Content-Type: application/json"})
        @Get("/traffic/flow/tile/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> getTrafficFlowTile(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") TileFormat format,
            @QueryParam("style") TrafficFlowTileStyle style,
            @QueryParam("zoom") int zoom,
            @QueryParam("x") int xTileIndex,
            @QueryParam("y") int yTileIndex,
            @QueryParam("thickness") Integer thickness,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/traffic/flow/segment/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TrafficFlowSegmentResultInner>> getTrafficFlowSegment(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") TextFormat format,
            @QueryParam("style") TrafficFlowSegmentStyle style,
            @QueryParam("zoom") int zoom,
            @QueryParam("query") String query,
            @QueryParam("unit") SpeedUnit unit,
            @QueryParam("thickness") Integer thickness,
            @QueryParam("openLr") Boolean openLr,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/traffic/incident/tile/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> getTrafficIncidentTile(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") TileFormat format,
            @QueryParam("style") TrafficIncidentTileStyle style,
            @QueryParam("zoom") int zoom,
            @QueryParam("x") int xTileIndex,
            @QueryParam("y") int yTileIndex,
            @QueryParam("t") String trafficState,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/traffic/incident/detail/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TrafficIncidentDetailResultInner>> getTrafficIncidentDetail(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") TextFormat format,
            @QueryParam("style") TrafficIncidentDetailStyle style,
            @QueryParam("boundingbox") String boundingbox,
            @QueryParam("boundingZoom") int boundingZoom,
            @QueryParam("trafficmodelid") String trafficmodelid,
            @QueryParam("language") String language,
            @QueryParam("projection") ProjectionStandard projection,
            @QueryParam("geometries") IncidentGeometryType geometries,
            @QueryParam("expandCluster") Boolean expandCluster,
            @QueryParam("originalPosition") Boolean originalPosition,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/traffic/incident/viewport/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TrafficIncidentViewportResultInner>> getTrafficIncidentViewport(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") TextFormat format,
            @QueryParam("boundingbox") String boundingbox,
            @QueryParam("boundingzoom") int boundingzoom,
            @QueryParam("overviewbox") String overviewbox,
            @QueryParam("overviewzoom") int overviewzoom,
            @QueryParam("copyright") Boolean copyright,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10. This parameter is not valid when format is pbf.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> getTrafficFlowTileWithResponseAsync(
        TileFormat format, TrafficFlowTileStyle style, int zoom, int xTileIndex, int yTileIndex, Integer thickness) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        final String accept = "application/json, image/jpeg, image/png, image/pbf, application/vnd.mapbox-vector-tile";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTrafficFlowTile(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            style,
                            zoom,
                            xTileIndex,
                            yTileIndex,
                            thickness,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10. This parameter is not valid when format is pbf.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> getTrafficFlowTileWithResponseAsync(
        TileFormat format,
        TrafficFlowTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        Integer thickness,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        final String accept = "application/json, image/jpeg, image/png, image/pbf, application/vnd.mapbox-vector-tile";
        context = this.client.mergeContext(context);
        return service
            .getTrafficFlowTile(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                style,
                zoom,
                xTileIndex,
                yTileIndex,
                thickness,
                accept,
                context);
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10. This parameter is not valid when format is pbf.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> getTrafficFlowTileAsync(
        TileFormat format, TrafficFlowTileStyle style, int zoom, int xTileIndex, int yTileIndex, Integer thickness) {
        return getTrafficFlowTileWithResponseAsync(format, style, zoom, xTileIndex, yTileIndex, thickness)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> getTrafficFlowTileAsync(
        TileFormat format, TrafficFlowTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        final Integer thickness = null;
        return getTrafficFlowTileWithResponseAsync(format, style, zoom, xTileIndex, yTileIndex, thickness)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getTrafficFlowTile(
        TileFormat format, TrafficFlowTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        final Integer thickness = null;
        Iterator<ByteBufferBackedInputStream> iterator =
            getTrafficFlowTileAsync(format, style, zoom, xTileIndex, yTileIndex, thickness)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * __Traffic Flow Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The Azure Flow Tile API serves 256 x 256 pixel tiles showing traffic flow. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. The Flow tiles use colors to indicate either the speed of traffic on different road segments, or the
     * difference between that speed and the free-flow speed on the road segment in question.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style &lt;p&gt;The style to be used to render the tile.&lt;/p&gt;.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10. This parameter is not valid when format is pbf.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse getTrafficFlowTileWithResponse(
        TileFormat format,
        TrafficFlowTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        Integer thickness,
        Context context) {
        return getTrafficFlowTileWithResponseAsync(format, style, zoom, xTileIndex, yTileIndex, thickness, context)
            .block();
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @param unit Unit of speed in KMPH or MPH.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10.
     * @param openLr Boolean on whether the response should include OpenLR code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficFlowSegmentResultInner>> getTrafficFlowSegmentWithResponseAsync(
        TextFormat format,
        TrafficFlowSegmentStyle style,
        int zoom,
        String query,
        SpeedUnit unit,
        Integer thickness,
        Boolean openLr) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTrafficFlowSegment(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            style,
                            zoom,
                            query,
                            unit,
                            thickness,
                            openLr,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @param unit Unit of speed in KMPH or MPH.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10.
     * @param openLr Boolean on whether the response should include OpenLR code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficFlowSegmentResultInner>> getTrafficFlowSegmentWithResponseAsync(
        TextFormat format,
        TrafficFlowSegmentStyle style,
        int zoom,
        String query,
        SpeedUnit unit,
        Integer thickness,
        Boolean openLr,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTrafficFlowSegment(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                style,
                zoom,
                query,
                unit,
                thickness,
                openLr,
                accept,
                context);
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @param unit Unit of speed in KMPH or MPH.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10.
     * @param openLr Boolean on whether the response should include OpenLR code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficFlowSegmentResultInner> getTrafficFlowSegmentAsync(
        TextFormat format,
        TrafficFlowSegmentStyle style,
        int zoom,
        String query,
        SpeedUnit unit,
        Integer thickness,
        Boolean openLr) {
        return getTrafficFlowSegmentWithResponseAsync(format, style, zoom, query, unit, thickness, openLr)
            .flatMap(
                (Response<TrafficFlowSegmentResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficFlowSegmentResultInner> getTrafficFlowSegmentAsync(
        TextFormat format, TrafficFlowSegmentStyle style, int zoom, String query) {
        final SpeedUnit unit = null;
        final Integer thickness = null;
        final Boolean openLr = null;
        return getTrafficFlowSegmentWithResponseAsync(format, style, zoom, query, unit, thickness, openLr)
            .flatMap(
                (Response<TrafficFlowSegmentResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrafficFlowSegmentResultInner getTrafficFlowSegment(
        TextFormat format, TrafficFlowSegmentStyle style, int zoom, String query) {
        final SpeedUnit unit = null;
        final Integer thickness = null;
        final Boolean openLr = null;
        return getTrafficFlowSegmentAsync(format, style, zoom, query, unit, thickness, openLr).block();
    }

    /**
     * __Traffic Flow Segment__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service provides information about the speeds and travel times of the road fragment closest to the given
     * coordinates. It is designed to work alongside the Flow layer of the Render Service to support clickable flow data
     * visualizations. With this API, the client side can connect any place in the map with flow data on the closest
     * road and present it to the user.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style to be used to render the tile. Valid values are absolute which returns colors reflecting
     *     the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which
     *     displays relative speeds only where they are different from the freeflow speeds.
     * @param zoom Zoom level for the desired tile. Zoom value must be in the range: 0-22 (inclusive). Please see [Zoom
     *     Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param query Coordinates of the point close to the road segment. They have to be comma-separated and calculated
     *     using EPSG4326 projection.
     * @param unit Unit of speed in KMPH or MPH.
     * @param thickness The value of the width of the line representing traffic. This value is a multiplier and the
     *     accepted values range from 1 - 20. The default value is 10.
     * @param openLr Boolean on whether the response should include OpenLR code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Flow Segment call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TrafficFlowSegmentResultInner> getTrafficFlowSegmentWithResponse(
        TextFormat format,
        TrafficFlowSegmentStyle style,
        int zoom,
        String query,
        SpeedUnit unit,
        Integer thickness,
        Boolean openLr,
        Context context) {
        return getTrafficFlowSegmentWithResponseAsync(format, style, zoom, query, unit, thickness, openLr, context)
            .block();
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param trafficState Reference value for the state of traffic at a particular time, obtained from the Viewport API
     *     call, trafficModelId attribute in trafficState field. It is updated every minute, and is valid for two
     *     minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic
     *     information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> getTrafficIncidentTileWithResponseAsync(
        TileFormat format,
        TrafficIncidentTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        String trafficState) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        final String accept = "application/json, image/jpeg, image/png, image/pbf, application/vnd.mapbox-vector-tile";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTrafficIncidentTile(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            style,
                            zoom,
                            xTileIndex,
                            yTileIndex,
                            trafficState,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param trafficState Reference value for the state of traffic at a particular time, obtained from the Viewport API
     *     call, trafficModelId attribute in trafficState field. It is updated every minute, and is valid for two
     *     minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic
     *     information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> getTrafficIncidentTileWithResponseAsync(
        TileFormat format,
        TrafficIncidentTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        String trafficState,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        final String accept = "application/json, image/jpeg, image/png, image/pbf, application/vnd.mapbox-vector-tile";
        context = this.client.mergeContext(context);
        return service
            .getTrafficIncidentTile(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                style,
                zoom,
                xTileIndex,
                yTileIndex,
                trafficState,
                accept,
                context);
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param trafficState Reference value for the state of traffic at a particular time, obtained from the Viewport API
     *     call, trafficModelId attribute in trafficState field. It is updated every minute, and is valid for two
     *     minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic
     *     information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> getTrafficIncidentTileAsync(
        TileFormat format,
        TrafficIncidentTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        String trafficState) {
        return getTrafficIncidentTileWithResponseAsync(format, style, zoom, xTileIndex, yTileIndex, trafficState)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> getTrafficIncidentTileAsync(
        TileFormat format, TrafficIncidentTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        final String trafficState = null;
        return getTrafficIncidentTileWithResponseAsync(format, style, zoom, xTileIndex, yTileIndex, trafficState)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getTrafficIncidentTile(
        TileFormat format, TrafficIncidentTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        final String trafficState = null;
        Iterator<ByteBufferBackedInputStream> iterator =
            getTrafficIncidentTileAsync(format, style, zoom, xTileIndex, yTileIndex, trafficState)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * __Traffic Incident Tile__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service serves 256 x 256 pixel tiles showing traffic incidents. All tiles use the same grid system.
     * Because the traffic tiles use transparent images, they can be layered on top of map tiles to create a compound
     * display. Traffic tiles render graphics to indicate traffic on the roads in the specified area.
     *
     * @param format Desired format of the response. Possible values are png &amp; pbf.
     * @param style The style to be used to render the tile. This parameter is not valid when format is pbf.
     * @param zoom Zoom level for the desired tile. For _raster_ tiles, value must be in the range: 0-22 (inclusive).
     *     For _vector_ tiles, value must be in the range: 0-22 (inclusive). Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param xTileIndex X coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param yTileIndex Y coordinate of the tile on zoom grid. Value must be in the range [0,
     *     2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
     *     <p>Please see [Zoom Levels and Tile
     *     Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
     * @param trafficState Reference value for the state of traffic at a particular time, obtained from the Viewport API
     *     call, trafficModelId attribute in trafficState field. It is updated every minute, and is valid for two
     *     minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic
     *     information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse getTrafficIncidentTileWithResponse(
        TileFormat format,
        TrafficIncidentTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        String trafficState,
        Context context) {
        return getTrafficIncidentTileWithResponseAsync(
                format, style, zoom, xTileIndex, yTileIndex, trafficState, context)
            .block();
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @param language [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the output language.
     *     Supported languages are ar, ca, cs, da, de, el, en, en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt,
     *     lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh.
     *     <p>Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. When invalid
     *     language code is provided response is returned in English. When incident cause or description does not have
     *     translation, English description is returned.
     * @param projection The projection used to specify the coordinates in the request and response.
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) (default) or
     *     [EPSG4326](http://spatialreference.org/ref/epsg/4326/).
     * @param geometries The type of vector geometry added to incidents (returned in the &lt;v&gt; element of the
     *     response).
     * @param expandCluster Boolean to indicate whether to list all traffic incidents in a cluster separately.
     * @param originalPosition Boolean on whether to return the original position of the incident (&lt;op&gt;) as well
     *     as the one shifted to the beginning of the traffic tube (&lt;op&gt;).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficIncidentDetailResultInner>> getTrafficIncidentDetailWithResponseAsync(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid,
        String language,
        ProjectionStandard projection,
        IncidentGeometryType geometries,
        Boolean expandCluster,
        Boolean originalPosition) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        if (boundingbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter boundingbox is required and cannot be null."));
        }
        if (trafficmodelid == null) {
            return Mono.error(new IllegalArgumentException("Parameter trafficmodelid is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTrafficIncidentDetail(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            style,
                            boundingbox,
                            boundingZoom,
                            trafficmodelid,
                            language,
                            projection,
                            geometries,
                            expandCluster,
                            originalPosition,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @param language [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the output language.
     *     Supported languages are ar, ca, cs, da, de, el, en, en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt,
     *     lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh.
     *     <p>Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. When invalid
     *     language code is provided response is returned in English. When incident cause or description does not have
     *     translation, English description is returned.
     * @param projection The projection used to specify the coordinates in the request and response.
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) (default) or
     *     [EPSG4326](http://spatialreference.org/ref/epsg/4326/).
     * @param geometries The type of vector geometry added to incidents (returned in the &lt;v&gt; element of the
     *     response).
     * @param expandCluster Boolean to indicate whether to list all traffic incidents in a cluster separately.
     * @param originalPosition Boolean on whether to return the original position of the incident (&lt;op&gt;) as well
     *     as the one shifted to the beginning of the traffic tube (&lt;op&gt;).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficIncidentDetailResultInner>> getTrafficIncidentDetailWithResponseAsync(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid,
        String language,
        ProjectionStandard projection,
        IncidentGeometryType geometries,
        Boolean expandCluster,
        Boolean originalPosition,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (style == null) {
            return Mono.error(new IllegalArgumentException("Parameter style is required and cannot be null."));
        }
        if (boundingbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter boundingbox is required and cannot be null."));
        }
        if (trafficmodelid == null) {
            return Mono.error(new IllegalArgumentException("Parameter trafficmodelid is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTrafficIncidentDetail(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                style,
                boundingbox,
                boundingZoom,
                trafficmodelid,
                language,
                projection,
                geometries,
                expandCluster,
                originalPosition,
                accept,
                context);
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @param language [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the output language.
     *     Supported languages are ar, ca, cs, da, de, el, en, en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt,
     *     lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh.
     *     <p>Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. When invalid
     *     language code is provided response is returned in English. When incident cause or description does not have
     *     translation, English description is returned.
     * @param projection The projection used to specify the coordinates in the request and response.
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) (default) or
     *     [EPSG4326](http://spatialreference.org/ref/epsg/4326/).
     * @param geometries The type of vector geometry added to incidents (returned in the &lt;v&gt; element of the
     *     response).
     * @param expandCluster Boolean to indicate whether to list all traffic incidents in a cluster separately.
     * @param originalPosition Boolean on whether to return the original position of the incident (&lt;op&gt;) as well
     *     as the one shifted to the beginning of the traffic tube (&lt;op&gt;).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficIncidentDetailResultInner> getTrafficIncidentDetailAsync(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid,
        String language,
        ProjectionStandard projection,
        IncidentGeometryType geometries,
        Boolean expandCluster,
        Boolean originalPosition) {
        return getTrafficIncidentDetailWithResponseAsync(
                format,
                style,
                boundingbox,
                boundingZoom,
                trafficmodelid,
                language,
                projection,
                geometries,
                expandCluster,
                originalPosition)
            .flatMap(
                (Response<TrafficIncidentDetailResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficIncidentDetailResultInner> getTrafficIncidentDetailAsync(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid) {
        final String language = null;
        final ProjectionStandard projection = null;
        final IncidentGeometryType geometries = null;
        final Boolean expandCluster = null;
        final Boolean originalPosition = null;
        return getTrafficIncidentDetailWithResponseAsync(
                format,
                style,
                boundingbox,
                boundingZoom,
                trafficmodelid,
                language,
                projection,
                geometries,
                expandCluster,
                originalPosition)
            .flatMap(
                (Response<TrafficIncidentDetailResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrafficIncidentDetailResultInner getTrafficIncidentDetail(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid) {
        final String language = null;
        final ProjectionStandard projection = null;
        final IncidentGeometryType geometries = null;
        final Boolean expandCluster = null;
        final Boolean originalPosition = null;
        return getTrafficIncidentDetailAsync(
                format,
                style,
                boundingbox,
                boundingZoom,
                trafficmodelid,
                language,
                projection,
                geometries,
                expandCluster,
                originalPosition)
            .block();
    }

    /**
     * __Traffic Incident Detail__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API provides information on traffic incidents inside a given bounding box, based on the current Traffic
     * Model ID. The Traffic Model ID is available to grant synchronization of data between calls and API's. The Traffic
     * Model ID is a key value for determining the currency of traffic incidents. It is updated every minute, and is
     * valid for two minutes before it times out. It is used in rendering [incident
     * tiles](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). It can be obtained from
     * the [Viewport API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport).
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param style The style that will be used to render the tile in Traffic [Incident Tile
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidenttile). This will have an effect
     *     on the coordinates of traffic incidents in the reply.
     * @param boundingbox The `boundingbox` is represented by two value pairs describing it's corners (first pair for
     *     lower left corner and second for upper right). The pairs can either be specified using any of the
     *     `projection`'s specified below (e.g., _minY,minX,maxY,maxX_) or by two latitude-longitude pairs (e.g.,
     *     _minLat,minLon,maxLat,maxLon_).&lt;br&gt;&lt;br&gt;NOTE: If latitude/longitude pairs are used, then the
     *     `projection` parameter must be set to "EPSG4326".
     * @param boundingZoom Zoom level for desired tile. 0 to 22 for raster tiles, 0 through 22 for vector tiles.
     * @param trafficmodelid Number referencing traffic model. This can be obtained from the [Viewport
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/traffic/gettrafficincidentviewport). It is updated every
     *     minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the
     *     correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic
     *     model.
     * @param language [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the output language.
     *     Supported languages are ar, ca, cs, da, de, el, en, en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt,
     *     lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh.
     *     <p>Please refer to [Supported
     *     Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. When invalid
     *     language code is provided response is returned in English. When incident cause or description does not have
     *     translation, English description is returned.
     * @param projection The projection used to specify the coordinates in the request and response.
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) (default) or
     *     [EPSG4326](http://spatialreference.org/ref/epsg/4326/).
     * @param geometries The type of vector geometry added to incidents (returned in the &lt;v&gt; element of the
     *     response).
     * @param expandCluster Boolean to indicate whether to list all traffic incidents in a cluster separately.
     * @param originalPosition Boolean on whether to return the original position of the incident (&lt;op&gt;) as well
     *     as the one shifted to the beginning of the traffic tube (&lt;op&gt;).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic incident Detail call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TrafficIncidentDetailResultInner> getTrafficIncidentDetailWithResponse(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid,
        String language,
        ProjectionStandard projection,
        IncidentGeometryType geometries,
        Boolean expandCluster,
        Boolean originalPosition,
        Context context) {
        return getTrafficIncidentDetailWithResponseAsync(
                format,
                style,
                boundingbox,
                boundingZoom,
                trafficmodelid,
                language,
                projection,
                geometries,
                expandCluster,
                originalPosition,
                context)
            .block();
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @param copyright Determines what copyright information to return. When true the copyright text is returned; when
     *     false only the copyright index is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficIncidentViewportResultInner>> getTrafficIncidentViewportWithResponseAsync(
        TextFormat format,
        String boundingbox,
        int boundingzoom,
        String overviewbox,
        int overviewzoom,
        Boolean copyright) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (boundingbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter boundingbox is required and cannot be null."));
        }
        if (overviewbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter overviewbox is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getTrafficIncidentViewport(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            boundingbox,
                            boundingzoom,
                            overviewbox,
                            overviewzoom,
                            copyright,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @param copyright Determines what copyright information to return. When true the copyright text is returned; when
     *     false only the copyright index is returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TrafficIncidentViewportResultInner>> getTrafficIncidentViewportWithResponseAsync(
        TextFormat format,
        String boundingbox,
        int boundingzoom,
        String overviewbox,
        int overviewzoom,
        Boolean copyright,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (boundingbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter boundingbox is required and cannot be null."));
        }
        if (overviewbox == null) {
            return Mono.error(new IllegalArgumentException("Parameter overviewbox is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getTrafficIncidentViewport(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                boundingbox,
                boundingzoom,
                overviewbox,
                overviewzoom,
                copyright,
                accept,
                context);
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @param copyright Determines what copyright information to return. When true the copyright text is returned; when
     *     false only the copyright index is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficIncidentViewportResultInner> getTrafficIncidentViewportAsync(
        TextFormat format,
        String boundingbox,
        int boundingzoom,
        String overviewbox,
        int overviewzoom,
        Boolean copyright) {
        return getTrafficIncidentViewportWithResponseAsync(
                format, boundingbox, boundingzoom, overviewbox, overviewzoom, copyright)
            .flatMap(
                (Response<TrafficIncidentViewportResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TrafficIncidentViewportResultInner> getTrafficIncidentViewportAsync(
        TextFormat format, String boundingbox, int boundingzoom, String overviewbox, int overviewzoom) {
        final Boolean copyright = null;
        return getTrafficIncidentViewportWithResponseAsync(
                format, boundingbox, boundingzoom, overviewbox, overviewzoom, copyright)
            .flatMap(
                (Response<TrafficIncidentViewportResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrafficIncidentViewportResultInner getTrafficIncidentViewport(
        TextFormat format, String boundingbox, int boundingzoom, String overviewbox, int overviewzoom) {
        final Boolean copyright = null;
        return getTrafficIncidentViewportAsync(format, boundingbox, boundingzoom, overviewbox, overviewzoom, copyright)
            .block();
    }

    /**
     * __Traffic Incident Viewport__
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This API returns legal and technical information for the viewport described in the request. It should be
     * called by client applications whenever the viewport changes (for instance, through zooming, panning, going to a
     * location, or displaying a route). The request should contain the bounding box and zoom level of the viewport
     * whose information is needed. The return will contain map version information, as well as the current Traffic
     * Model ID and copyright IDs. The Traffic Model ID returned by the Viewport Description is used by other APIs to
     * retrieve last traffic information for further processing.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param boundingbox Bounding box of the map viewport in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection. The `boundingbox` is
     *     represented by two value pairs describing it's corners (first pair for lower left corner and second for upper
     *     right). All values should be separated by commas (e.g., _minY,minX,maxY,maxX_). The maximum size of the
     *     bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed
     *     4092 pixels when rendered on the given zoom level.&lt;br&gt;&lt;br&gt;NOTE: Bounding boxes that cross the
     *     180° meridian require special treatment. For such boxes, the eastern _maxX_ value will be negative, and thus
     *     less than the _minX_ value west of the 180° meridian. To address that, the value 40075016.6855874 should be
     *     added to the true _maxX_ value before it is passed in the request.
     * @param boundingzoom Zoom level of the map viewport. Used to determine whether the view can be zoomed in.
     * @param overviewbox Bounding box of the overview map in
     *     [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html) projection.&lt;br&gt;&lt;br&gt;Used
     *     in case the overview box/mini map has different copyright data than the main map. If there is no mini map,
     *     the same coordinates as `boundingBox` is used.
     * @param overviewzoom Zoom level of the overview map. If there is no mini map, use the same zoom level as
     *     boundingZoom.
     * @param copyright Determines what copyright information to return. When true the copyright text is returned; when
     *     false only the copyright index is returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Traffic Incident Viewport call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TrafficIncidentViewportResultInner> getTrafficIncidentViewportWithResponse(
        TextFormat format,
        String boundingbox,
        int boundingzoom,
        String overviewbox,
        int overviewzoom,
        Boolean copyright,
        Context context) {
        return getTrafficIncidentViewportWithResponseAsync(
                format, boundingbox, boundingzoom, overviewbox, overviewzoom, copyright, context)
            .block();
    }
}
