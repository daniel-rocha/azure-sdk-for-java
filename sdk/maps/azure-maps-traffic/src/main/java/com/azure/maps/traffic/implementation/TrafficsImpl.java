// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.traffic.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.traffic.fluent.TrafficsClient;
import com.azure.maps.traffic.fluent.models.TrafficFlowSegmentResultInner;
import com.azure.maps.traffic.fluent.models.TrafficIncidentDetailResultInner;
import com.azure.maps.traffic.fluent.models.TrafficIncidentViewportResultInner;
import com.azure.maps.traffic.models.IncidentGeometryType;
import com.azure.maps.traffic.models.ProjectionStandard;
import com.azure.maps.traffic.models.SpeedUnit;
import com.azure.maps.traffic.models.TextFormat;
import com.azure.maps.traffic.models.TileFormat;
import com.azure.maps.traffic.models.TrafficFlowSegmentResult;
import com.azure.maps.traffic.models.TrafficFlowSegmentStyle;
import com.azure.maps.traffic.models.TrafficFlowTileStyle;
import com.azure.maps.traffic.models.TrafficIncidentDetailResult;
import com.azure.maps.traffic.models.TrafficIncidentDetailStyle;
import com.azure.maps.traffic.models.TrafficIncidentTileStyle;
import com.azure.maps.traffic.models.TrafficIncidentViewportResult;
import com.azure.maps.traffic.models.Traffics;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;

public final class TrafficsImpl implements Traffics {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TrafficsImpl.class);

    private final TrafficsClient innerClient;

    private final com.azure.maps.traffic.TrafficManager serviceManager;

    public TrafficsImpl(TrafficsClient innerClient, com.azure.maps.traffic.TrafficManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public InputStream getTrafficFlowTile(
        TileFormat format, TrafficFlowTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        return this.serviceClient().getTrafficFlowTile(format, style, zoom, xTileIndex, yTileIndex);
    }

    public StreamResponse getTrafficFlowTileWithResponse(
        TileFormat format,
        TrafficFlowTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        Integer thickness,
        Context context) {
        return this
            .serviceClient()
            .getTrafficFlowTileWithResponse(format, style, zoom, xTileIndex, yTileIndex, thickness, context);
    }

    public TrafficFlowSegmentResult getTrafficFlowSegment(
        TextFormat format, TrafficFlowSegmentStyle style, int zoom, String query) {
        TrafficFlowSegmentResultInner inner = this.serviceClient().getTrafficFlowSegment(format, style, zoom, query);
        if (inner != null) {
            return new TrafficFlowSegmentResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TrafficFlowSegmentResult> getTrafficFlowSegmentWithResponse(
        TextFormat format,
        TrafficFlowSegmentStyle style,
        int zoom,
        String query,
        SpeedUnit unit,
        Integer thickness,
        Boolean openLr,
        Context context) {
        Response<TrafficFlowSegmentResultInner> inner =
            this
                .serviceClient()
                .getTrafficFlowSegmentWithResponse(format, style, zoom, query, unit, thickness, openLr, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TrafficFlowSegmentResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InputStream getTrafficIncidentTile(
        TileFormat format, TrafficIncidentTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        return this.serviceClient().getTrafficIncidentTile(format, style, zoom, xTileIndex, yTileIndex);
    }

    public StreamResponse getTrafficIncidentTileWithResponse(
        TileFormat format,
        TrafficIncidentTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        String trafficState,
        Context context) {
        return this
            .serviceClient()
            .getTrafficIncidentTileWithResponse(format, style, zoom, xTileIndex, yTileIndex, trafficState, context);
    }

    public TrafficIncidentDetailResult getTrafficIncidentDetail(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid) {
        TrafficIncidentDetailResultInner inner =
            this.serviceClient().getTrafficIncidentDetail(format, style, boundingbox, boundingZoom, trafficmodelid);
        if (inner != null) {
            return new TrafficIncidentDetailResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TrafficIncidentDetailResult> getTrafficIncidentDetailWithResponse(
        TextFormat format,
        TrafficIncidentDetailStyle style,
        String boundingbox,
        int boundingZoom,
        String trafficmodelid,
        String language,
        ProjectionStandard projection,
        IncidentGeometryType geometries,
        Boolean expandCluster,
        Boolean originalPosition,
        Context context) {
        Response<TrafficIncidentDetailResultInner> inner =
            this
                .serviceClient()
                .getTrafficIncidentDetailWithResponse(
                    format,
                    style,
                    boundingbox,
                    boundingZoom,
                    trafficmodelid,
                    language,
                    projection,
                    geometries,
                    expandCluster,
                    originalPosition,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TrafficIncidentDetailResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TrafficIncidentViewportResult getTrafficIncidentViewport(
        TextFormat format, String boundingbox, int boundingzoom, String overviewbox, int overviewzoom) {
        TrafficIncidentViewportResultInner inner =
            this
                .serviceClient()
                .getTrafficIncidentViewport(format, boundingbox, boundingzoom, overviewbox, overviewzoom);
        if (inner != null) {
            return new TrafficIncidentViewportResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TrafficIncidentViewportResult> getTrafficIncidentViewportWithResponse(
        TextFormat format,
        String boundingbox,
        int boundingzoom,
        String overviewbox,
        int overviewzoom,
        Boolean copyright,
        Context context) {
        Response<TrafficIncidentViewportResultInner> inner =
            this
                .serviceClient()
                .getTrafficIncidentViewportWithResponse(
                    format, boundingbox, boundingzoom, overviewbox, overviewzoom, copyright, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TrafficIncidentViewportResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private TrafficsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.traffic.TrafficManager manager() {
        return this.serviceManager;
    }
}
