// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.elevation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.maps.elevation.fluent.ElevationsClient;
import com.azure.maps.elevation.fluent.models.BoundingBoxResultInner;
import com.azure.maps.elevation.fluent.models.LinesResultInner;
import com.azure.maps.elevation.fluent.models.PointsResultInner;
import com.azure.maps.elevation.models.CoordinatesPairAbbreviated;
import com.azure.maps.elevation.models.Geography;
import com.azure.maps.elevation.models.ResponseFormat;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ElevationsClient. */
public final class ElevationsClientImpl implements ElevationsClient {
    private final ClientLogger logger = new ClientLogger(ElevationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ElevationsService service;

    /** The service client containing this operation class. */
    private final ElevationClientImpl client;

    /**
     * Initializes an instance of ElevationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ElevationsClientImpl(ElevationClientImpl client) {
        this.service =
            RestProxy.create(ElevationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ElevationClientElevations to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "ElevationClientEleva")
    private interface ElevationsService {
        @Headers({"Content-Type: application/json"})
        @Get("/elevation/point/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PointsResultInner>> getDataForPoints(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam(value = "points", encoded = true) String points,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/elevation/point/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PointsResultInner>> postDataForPoints(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @BodyParam("application/json") List<CoordinatesPairAbbreviated> pointsRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/elevation/line/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LinesResultInner>> getDataForPolyline(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam(value = "lines", encoded = true) String lines,
            @QueryParam("samples") Integer samples,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/elevation/line/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LinesResultInner>> postDataForPolyline(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam("samples") Integer samples,
            @BodyParam("application/json") List<CoordinatesPairAbbreviated> linesRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/elevation/lattice/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BoundingBoxResultInner>> getDataForBoundingBox(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam("bounds") String bounds,
            @QueryParam("rows") int rows,
            @QueryParam("columns") int columns,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PointsResultInner>> getDataForPointsWithResponseAsync(
        ResponseFormat format, List<String> points) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (points == null) {
            return Mono.error(new IllegalArgumentException("Parameter points is required and cannot be null."));
        }
        final String accept = "application/json";
        String pointsConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(points, CollectionFormat.PIPES);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDataForPoints(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            pointsConverted,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PointsResultInner>> getDataForPointsWithResponseAsync(
        ResponseFormat format, List<String> points, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (points == null) {
            return Mono.error(new IllegalArgumentException("Parameter points is required and cannot be null."));
        }
        final String accept = "application/json";
        String pointsConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(points, CollectionFormat.PIPES);
        context = this.client.mergeContext(context);
        return service
            .getDataForPoints(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                pointsConverted,
                accept,
                context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PointsResultInner> getDataForPointsAsync(ResponseFormat format, List<String> points) {
        return getDataForPointsWithResponseAsync(format, points)
            .flatMap(
                (Response<PointsResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PointsResultInner getDataForPoints(ResponseFormat format, List<String> points) {
        return getDataForPointsAsync(format, points).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PointsResultInner> getDataForPointsWithResponse(
        ResponseFormat format, List<String> points, Context context) {
        return getDataForPointsWithResponseAsync(format, points, context).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format. Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
     * to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PointsResultInner>> postDataForPointsWithResponseAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (pointsRequestBody == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter pointsRequestBody is required and cannot be null."));
        } else {
            pointsRequestBody.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .postDataForPoints(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            pointsRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format. Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
     * to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PointsResultInner>> postDataForPointsWithResponseAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (pointsRequestBody == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter pointsRequestBody is required and cannot be null."));
        } else {
            pointsRequestBody.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .postDataForPoints(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                pointsRequestBody,
                accept,
                context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format. Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
     * to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PointsResultInner> postDataForPointsAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody) {
        return postDataForPointsWithResponseAsync(format, pointsRequestBody)
            .flatMap(
                (Response<PointsResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format. Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
     * to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PointsResultInner postDataForPoints(
        ResponseFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody) {
        return postDataForPointsAsync(format, pointsRequestBody).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format. Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
     * to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PointsResultInner> postDataForPointsWithResponse(
        ResponseFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody, Context context) {
        return postDataForPointsWithResponseAsync(format, pointsRequestBody, context).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinesResultInner>> getDataForPolylineWithResponseAsync(
        ResponseFormat format, List<String> lines, Integer samples) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (lines == null) {
            return Mono.error(new IllegalArgumentException("Parameter lines is required and cannot be null."));
        }
        final String accept = "application/json";
        String linesConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(lines, CollectionFormat.PIPES);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDataForPolyline(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            linesConverted,
                            samples,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinesResultInner>> getDataForPolylineWithResponseAsync(
        ResponseFormat format, List<String> lines, Integer samples, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (lines == null) {
            return Mono.error(new IllegalArgumentException("Parameter lines is required and cannot be null."));
        }
        final String accept = "application/json";
        String linesConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(lines, CollectionFormat.PIPES);
        context = this.client.mergeContext(context);
        return service
            .getDataForPolyline(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                linesConverted,
                samples,
                accept,
                context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinesResultInner> getDataForPolylineAsync(ResponseFormat format, List<String> lines, Integer samples) {
        return getDataForPolylineWithResponseAsync(format, lines, samples)
            .flatMap(
                (Response<LinesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinesResultInner> getDataForPolylineAsync(ResponseFormat format, List<String> lines) {
        final Integer samples = null;
        return getDataForPolylineWithResponseAsync(format, lines, samples)
            .flatMap(
                (Response<LinesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinesResultInner getDataForPolyline(ResponseFormat format, List<String> lines) {
        final Integer samples = null;
        return getDataForPolylineAsync(format, lines, samples).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments. Elevation data at both start and endpoints and equally spaced
     * points along the polyline will be returned.
     *
     * <p>A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`.
     *     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.
     *     The resolution of the data used to compute the elevation depends on the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LinesResultInner> getDataForPolylineWithResponse(
        ResponseFormat format, List<String> lines, Integer samples, Context context) {
        return getDataForPolylineWithResponseAsync(format, lines, samples, context).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinesResultInner>> postDataForPolylineWithResponseAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Integer samples) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (linesRequestBody == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter linesRequestBody is required and cannot be null."));
        } else {
            linesRequestBody.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .postDataForPolyline(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            samples,
                            linesRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LinesResultInner>> postDataForPolylineWithResponseAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Integer samples, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (linesRequestBody == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter linesRequestBody is required and cannot be null."));
        } else {
            linesRequestBody.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .postDataForPolyline(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                samples,
                linesRequestBody,
                accept,
                context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinesResultInner> postDataForPolylineAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Integer samples) {
        return postDataForPolylineWithResponseAsync(format, linesRequestBody, samples)
            .flatMap(
                (Response<LinesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LinesResultInner> postDataForPolylineAsync(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody) {
        final Integer samples = null;
        return postDataForPolylineWithResponseAsync(format, linesRequestBody, samples)
            .flatMap(
                (Response<LinesResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LinesResultInner postDataForPolyline(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody) {
        final Integer samples = null;
        return postDataForPolylineAsync(format, linesRequestBody, samples).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify the number of sample points that will be used to divide polyline into equally spaced
     * segments.
     *
     * <p>Elevation data at both start and end points and equally spaced points along the polyline will be returned. A
     * line between two endpoints is a straight Cartesian line, the shortest line between those two points in the
     * coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ
     * from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Polyline request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LinesResultInner> postDataForPolylineWithResponse(
        ResponseFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Integer samples, Context context) {
        return postDataForPolylineWithResponseAsync(format, linesRequestBody, samples, context).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`.
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Get Data for Bounding Box API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BoundingBoxResultInner>> getDataForBoundingBoxWithResponseAsync(
        ResponseFormat format, List<String> bounds, int rows, int columns) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (bounds == null) {
            return Mono.error(new IllegalArgumentException("Parameter bounds is required and cannot be null."));
        }
        final String accept = "application/json";
        String boundsConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(bounds, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDataForBoundingBox(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            boundsConverted,
                            rows,
                            columns,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`.
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Get Data for Bounding Box API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BoundingBoxResultInner>> getDataForBoundingBoxWithResponseAsync(
        ResponseFormat format, List<String> bounds, int rows, int columns, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (bounds == null) {
            return Mono.error(new IllegalArgumentException("Parameter bounds is required and cannot be null."));
        }
        final String accept = "application/json";
        String boundsConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(bounds, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getDataForBoundingBox(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                boundsConverted,
                rows,
                columns,
                accept,
                context);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`.
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Get Data for Bounding Box API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BoundingBoxResultInner> getDataForBoundingBoxAsync(
        ResponseFormat format, List<String> bounds, int rows, int columns) {
        return getDataForBoundingBoxWithResponseAsync(format, bounds, rows, columns)
            .flatMap(
                (Response<BoundingBoxResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`.
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Get Data for Bounding Box API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BoundingBoxResultInner getDataForBoundingBox(
        ResponseFormat format, List<String> bounds, int rows, int columns) {
        return getDataForBoundingBoxAsync(format, bounds, rows, columns).block();
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`.
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2,000.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Get Data for Bounding Box API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BoundingBoxResultInner> getDataForBoundingBoxWithResponse(
        ResponseFormat format, List<String> bounds, int rows, int columns, Context context) {
        return getDataForBoundingBoxWithResponseAsync(format, bounds, rows, columns, context).block();
    }
}
