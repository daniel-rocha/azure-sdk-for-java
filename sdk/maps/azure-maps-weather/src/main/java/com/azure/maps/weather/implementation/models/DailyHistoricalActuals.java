// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The DailyHistoricalActuals model. */
@Fluent
public final class DailyHistoricalActuals {
    /*
     * Date and time of the current observation displayed in ISO 8601 format,
     * for example, 2019-10-27T19:39:57-08:00.
     */
    @JsonProperty(value = "date")
    private OffsetDateTime timestamp;

    /*
     * Temperature values.
     */
    @JsonProperty(value = "temperature")
    private WeatherValueMaxMinAvg temperature;

    /*
     * Summary of heating or cooling degree day information. Degree days are
     * measures of how cold or warm a location is. A degree day compares the
     * mean (the average of the high and low) outdoor temperatures recorded for
     * a location to a standard temperature of 65 degrees F/ 18 degree C.
     */
    @JsonProperty(value = "degreeDaySummary")
    private DegreeDaySummary degreeDaySummary;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen.
     */
    @JsonProperty(value = "precipitation")
    private WeatherValue precipitation;

    /*
     * The amount of snow that has fallen.
     */
    @JsonProperty(value = "snowfall")
    private WeatherValue snowfall;

    /*
     * Snow depth.
     */
    @JsonProperty(value = "snowDepth")
    private WeatherValue snowDepth;

    /**
     * Get the timestamp property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @param timestamp the timestamp value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the temperature property: Temperature values.
     *
     * @return the temperature value.
     */
    public WeatherValueMaxMinAvg getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Temperature values.
     *
     * @param temperature the temperature value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setTemperature(WeatherValueMaxMinAvg temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the degreeDaySummary property: Summary of heating or cooling degree day information. Degree days are measures
     * of how cold or warm a location is. A degree day compares the mean (the average of the high and low) outdoor
     * temperatures recorded for a location to a standard temperature of 65 degrees F/ 18 degree C.
     *
     * @return the degreeDaySummary value.
     */
    public DegreeDaySummary getDegreeDaySummary() {
        return this.degreeDaySummary;
    }

    /**
     * Set the degreeDaySummary property: Summary of heating or cooling degree day information. Degree days are measures
     * of how cold or warm a location is. A degree day compares the mean (the average of the high and low) outdoor
     * temperatures recorded for a location to a standard temperature of 65 degrees F/ 18 degree C.
     *
     * @param degreeDaySummary the degreeDaySummary value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setDegreeDaySummary(DegreeDaySummary degreeDaySummary) {
        this.degreeDaySummary = degreeDaySummary;
        return this;
    }

    /**
     * Get the precipitation property: The amount of precipitation (liquid equivalent) that has fallen.
     *
     * @return the precipitation value.
     */
    public WeatherValue getPrecipitation() {
        return this.precipitation;
    }

    /**
     * Set the precipitation property: The amount of precipitation (liquid equivalent) that has fallen.
     *
     * @param precipitation the precipitation value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setPrecipitation(WeatherValue precipitation) {
        this.precipitation = precipitation;
        return this;
    }

    /**
     * Get the snowfall property: The amount of snow that has fallen.
     *
     * @return the snowfall value.
     */
    public WeatherValue getSnowfall() {
        return this.snowfall;
    }

    /**
     * Set the snowfall property: The amount of snow that has fallen.
     *
     * @param snowfall the snowfall value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setSnowfall(WeatherValue snowfall) {
        this.snowfall = snowfall;
        return this;
    }

    /**
     * Get the snowDepth property: Snow depth.
     *
     * @return the snowDepth value.
     */
    public WeatherValue getSnowDepth() {
        return this.snowDepth;
    }

    /**
     * Set the snowDepth property: Snow depth.
     *
     * @param snowDepth the snowDepth value to set.
     * @return the DailyHistoricalActuals object itself.
     */
    public DailyHistoricalActuals setSnowDepth(WeatherValue snowDepth) {
        this.snowDepth = snowDepth;
        return this;
    }
}
