// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The QuarterDayForecast model. */
@Fluent
public final class QuarterDayForecast {
    /*
     * Date of the forecast as example, 2019-10-27T00:00:00
     */
    @JsonProperty(value = "date")
    private OffsetDateTime dateTime;

    /*
     * Date and time of the beginning of the forecast quarter displayed in ISO
     * 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    @JsonProperty(value = "effectiveDate")
    private OffsetDateTime effectiveDate;

    /*
     * Quarter of the day.
     */
    @JsonProperty(value = "quarter")
    private DayQuarter quarter;

    /*
     * Numeric value representing an image that displays the `iconPhrase`.
     * Please refer to [Weather Service
     * Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     */
    @JsonProperty(value = "iconCode")
    private IconCode iconCode;

    /*
     * Phrase description of the icon. Displayed in specified language. For
     * example, 'Sunny'.
     */
    @JsonProperty(value = "iconPhrase")
    private String iconPhrase;

    /*
     * Short summary phrase summary for quarter.
     */
    @JsonProperty(value = "phrase")
    private String phrase;

    /*
     * Temperature values for the quarter.
     */
    @JsonProperty(value = "temperature")
    private WeatherValueRange temperature;

    /*
     * RealFeel™ Temperature values for the quarter.
     */
    @JsonProperty(value = "realFeelTemperature")
    private WeatherValueRange realFeelTemperature;

    /*
     * The dewpoint temperature in specified unit. The dewpoint temperature is
     * the temperature that the air must be cooled to in order to reach
     * saturation.
     */
    @JsonProperty(value = "dewPoint")
    private WeatherValue dewPoint;

    /*
     * Relative humidity is the amount of water vapor present in air expressed
     * as a percentage of the amount needed for saturation at the same
     * temperature.
     */
    @JsonProperty(value = "relativeHumidity")
    private Integer relativeHumidity;

    /*
     * Wind details being returned including speed and direction.
     */
    @JsonProperty(value = "wind")
    private WindDetails wind;

    /*
     * Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     */
    @JsonProperty(value = "windGust")
    private WindDetails windGust;

    /*
     * Visibility in specified unit. A measure of the distance at which an
     * object or light can be clearly discerned.
     */
    @JsonProperty(value = "visibility")
    private WeatherValue visibility;

    /*
     * Percent representing cloud cover.
     */
    @JsonProperty(value = "cloudCover")
    private Integer cloudCover;

    /*
     * Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     */
    @JsonProperty(value = "hasPrecipitation")
    private Boolean hasPrecipitation;

    /*
     * Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If
     * dbz is zero, precipitationType is not present in the response.
     */
    @JsonProperty(value = "precipitationType")
    private PrecipitationType precipitationType;

    /*
     * Description of the intensity.
     */
    @JsonProperty(value = "precipitationIntensity")
    private String precipitationIntensity;

    /*
     * Percent representing the probability of precipitation. For example,
     * '20'.
     */
    @JsonProperty(value = "precipitationProbability")
    private Integer precipitationProbability;

    /*
     * Percent representing the probability of a thunderstorm. For example,
     * '10'.
     */
    @JsonProperty(value = "thunderstormProbability")
    private Integer thunderstormProbability;

    /*
     * Total liquid equivalent of precipitation during the forecast period.
     */
    @JsonProperty(value = "totalLiquid")
    private WeatherValue totalLiquid;

    /*
     * Rain
     */
    @JsonProperty(value = "rain")
    private WeatherValue rain;

    /*
     * Snow
     */
    @JsonProperty(value = "snow")
    private WeatherValue snow;

    /*
     * Ice
     */
    @JsonProperty(value = "ice")
    private WeatherValue ice;

    /**
     * Get the dateTime property: Date of the forecast as example, 2019-10-27T00:00:00.
     *
     * @return the dateTime value.
     */
    public OffsetDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Set the dateTime property: Date of the forecast as example, 2019-10-27T00:00:00.
     *
     * @param dateTime the dateTime value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }

    /**
     * Get the effectiveDate property: Date and time of the beginning of the forecast quarter displayed in ISO 8601
     * format, for example, 2019-10-27T19:39:57-08:00.
     *
     * @return the effectiveDate value.
     */
    public OffsetDateTime getEffectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Set the effectiveDate property: Date and time of the beginning of the forecast quarter displayed in ISO 8601
     * format, for example, 2019-10-27T19:39:57-08:00.
     *
     * @param effectiveDate the effectiveDate value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setEffectiveDate(OffsetDateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * Get the quarter property: Quarter of the day.
     *
     * @return the quarter value.
     */
    public DayQuarter getQuarter() {
        return this.quarter;
    }

    /**
     * Set the quarter property: Quarter of the day.
     *
     * @param quarter the quarter value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setQuarter(DayQuarter quarter) {
        this.quarter = quarter;
        return this;
    }

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @return the iconCode value.
     */
    public IconCode getIconCode() {
        return this.iconCode;
    }

    /**
     * Set the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @param iconCode the iconCode value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setIconCode(IconCode iconCode) {
        this.iconCode = iconCode;
        return this;
    }

    /**
     * Get the iconPhrase property: Phrase description of the icon. Displayed in specified language. For example,
     * 'Sunny'.
     *
     * @return the iconPhrase value.
     */
    public String getIconPhrase() {
        return this.iconPhrase;
    }

    /**
     * Set the iconPhrase property: Phrase description of the icon. Displayed in specified language. For example,
     * 'Sunny'.
     *
     * @param iconPhrase the iconPhrase value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setIconPhrase(String iconPhrase) {
        this.iconPhrase = iconPhrase;
        return this;
    }

    /**
     * Get the phrase property: Short summary phrase summary for quarter.
     *
     * @return the phrase value.
     */
    public String getPhrase() {
        return this.phrase;
    }

    /**
     * Set the phrase property: Short summary phrase summary for quarter.
     *
     * @param phrase the phrase value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setPhrase(String phrase) {
        this.phrase = phrase;
        return this;
    }

    /**
     * Get the temperature property: Temperature values for the quarter.
     *
     * @return the temperature value.
     */
    public WeatherValueRange getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Temperature values for the quarter.
     *
     * @param temperature the temperature value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setTemperature(WeatherValueRange temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the realFeelTemperature property: RealFeel™ Temperature values for the quarter.
     *
     * @return the realFeelTemperature value.
     */
    public WeatherValueRange getRealFeelTemperature() {
        return this.realFeelTemperature;
    }

    /**
     * Set the realFeelTemperature property: RealFeel™ Temperature values for the quarter.
     *
     * @param realFeelTemperature the realFeelTemperature value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setRealFeelTemperature(WeatherValueRange realFeelTemperature) {
        this.realFeelTemperature = realFeelTemperature;
        return this;
    }

    /**
     * Get the dewPoint property: The dewpoint temperature in specified unit. The dewpoint temperature is the
     * temperature that the air must be cooled to in order to reach saturation.
     *
     * @return the dewPoint value.
     */
    public WeatherValue getDewPoint() {
        return this.dewPoint;
    }

    /**
     * Set the dewPoint property: The dewpoint temperature in specified unit. The dewpoint temperature is the
     * temperature that the air must be cooled to in order to reach saturation.
     *
     * @param dewPoint the dewPoint value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setDewPoint(WeatherValue dewPoint) {
        this.dewPoint = dewPoint;
        return this;
    }

    /**
     * Get the relativeHumidity property: Relative humidity is the amount of water vapor present in air expressed as a
     * percentage of the amount needed for saturation at the same temperature.
     *
     * @return the relativeHumidity value.
     */
    public Integer getRelativeHumidity() {
        return this.relativeHumidity;
    }

    /**
     * Set the relativeHumidity property: Relative humidity is the amount of water vapor present in air expressed as a
     * percentage of the amount needed for saturation at the same temperature.
     *
     * @param relativeHumidity the relativeHumidity value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setRelativeHumidity(Integer relativeHumidity) {
        this.relativeHumidity = relativeHumidity;
        return this;
    }

    /**
     * Get the wind property: Wind details being returned including speed and direction.
     *
     * @return the wind value.
     */
    public WindDetails getWind() {
        return this.wind;
    }

    /**
     * Set the wind property: Wind details being returned including speed and direction.
     *
     * @param wind the wind value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setWind(WindDetails wind) {
        this.wind = wind;
        return this;
    }

    /**
     * Get the windGust property: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     *
     * @return the windGust value.
     */
    public WindDetails getWindGust() {
        return this.windGust;
    }

    /**
     * Set the windGust property: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     *
     * @param windGust the windGust value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setWindGust(WindDetails windGust) {
        this.windGust = windGust;
        return this;
    }

    /**
     * Get the visibility property: Visibility in specified unit. A measure of the distance at which an object or light
     * can be clearly discerned.
     *
     * @return the visibility value.
     */
    public WeatherValue getVisibility() {
        return this.visibility;
    }

    /**
     * Set the visibility property: Visibility in specified unit. A measure of the distance at which an object or light
     * can be clearly discerned.
     *
     * @param visibility the visibility value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setVisibility(WeatherValue visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer getCloudCover() {
        return this.cloudCover;
    }

    /**
     * Set the cloudCover property: Percent representing cloud cover.
     *
     * @param cloudCover the cloudCover value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setCloudCover(Integer cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }

    /**
     * Get the hasPrecipitation property: Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     *
     * @return the hasPrecipitation value.
     */
    public Boolean isHasPrecipitation() {
        return this.hasPrecipitation;
    }

    /**
     * Set the hasPrecipitation property: Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     *
     * @param hasPrecipitation the hasPrecipitation value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setHasPrecipitation(Boolean hasPrecipitation) {
        this.hasPrecipitation = hasPrecipitation;
        return this;
    }

    /**
     * Get the precipitationType property: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If dbz is
     * zero, precipitationType is not present in the response.
     *
     * @return the precipitationType value.
     */
    public PrecipitationType getPrecipitationType() {
        return this.precipitationType;
    }

    /**
     * Set the precipitationType property: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If dbz is
     * zero, precipitationType is not present in the response.
     *
     * @param precipitationType the precipitationType value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setPrecipitationType(PrecipitationType precipitationType) {
        this.precipitationType = precipitationType;
        return this;
    }

    /**
     * Get the precipitationIntensity property: Description of the intensity.
     *
     * @return the precipitationIntensity value.
     */
    public String getPrecipitationIntensity() {
        return this.precipitationIntensity;
    }

    /**
     * Set the precipitationIntensity property: Description of the intensity.
     *
     * @param precipitationIntensity the precipitationIntensity value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setPrecipitationIntensity(String precipitationIntensity) {
        this.precipitationIntensity = precipitationIntensity;
        return this;
    }

    /**
     * Get the precipitationProbability property: Percent representing the probability of precipitation. For example,
     * '20'.
     *
     * @return the precipitationProbability value.
     */
    public Integer getPrecipitationProbability() {
        return this.precipitationProbability;
    }

    /**
     * Set the precipitationProbability property: Percent representing the probability of precipitation. For example,
     * '20'.
     *
     * @param precipitationProbability the precipitationProbability value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setPrecipitationProbability(Integer precipitationProbability) {
        this.precipitationProbability = precipitationProbability;
        return this;
    }

    /**
     * Get the thunderstormProbability property: Percent representing the probability of a thunderstorm. For example,
     * '10'.
     *
     * @return the thunderstormProbability value.
     */
    public Integer getThunderstormProbability() {
        return this.thunderstormProbability;
    }

    /**
     * Set the thunderstormProbability property: Percent representing the probability of a thunderstorm. For example,
     * '10'.
     *
     * @param thunderstormProbability the thunderstormProbability value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setThunderstormProbability(Integer thunderstormProbability) {
        this.thunderstormProbability = thunderstormProbability;
        return this;
    }

    /**
     * Get the totalLiquid property: Total liquid equivalent of precipitation during the forecast period.
     *
     * @return the totalLiquid value.
     */
    public WeatherValue getTotalLiquid() {
        return this.totalLiquid;
    }

    /**
     * Set the totalLiquid property: Total liquid equivalent of precipitation during the forecast period.
     *
     * @param totalLiquid the totalLiquid value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setTotalLiquid(WeatherValue totalLiquid) {
        this.totalLiquid = totalLiquid;
        return this;
    }

    /**
     * Get the rain property: Rain.
     *
     * @return the rain value.
     */
    public WeatherValue getRain() {
        return this.rain;
    }

    /**
     * Set the rain property: Rain.
     *
     * @param rain the rain value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setRain(WeatherValue rain) {
        this.rain = rain;
        return this;
    }

    /**
     * Get the snow property: Snow.
     *
     * @return the snow value.
     */
    public WeatherValue getSnow() {
        return this.snow;
    }

    /**
     * Set the snow property: Snow.
     *
     * @param snow the snow value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setSnow(WeatherValue snow) {
        this.snow = snow;
        return this;
    }

    /**
     * Get the ice property: Ice.
     *
     * @return the ice value.
     */
    public WeatherValue getIce() {
        return this.ice;
    }

    /**
     * Set the ice property: Ice.
     *
     * @param ice the ice value to set.
     * @return the QuarterDayForecast object itself.
     */
    public QuarterDayForecast setIce(WeatherValue ice) {
        this.ice = ice;
        return this;
    }
}
