// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.weather.fluent.WeathersClient;
import com.azure.maps.weather.fluent.models.CurrentConditionsResponseInner;
import com.azure.maps.weather.fluent.models.DailyForecastResponseInner;
import com.azure.maps.weather.fluent.models.DailyIndicesResponseInner;
import com.azure.maps.weather.fluent.models.HourlyForecastResponseInner;
import com.azure.maps.weather.fluent.models.MinuteForecastResponseInner;
import com.azure.maps.weather.fluent.models.QuarterDayForecastResponseInner;
import com.azure.maps.weather.fluent.models.SevereWeatherAlertsResponseInner;
import com.azure.maps.weather.fluent.models.WeatherAlongRouteResponseInner;
import com.azure.maps.weather.models.CurrentConditionsResponse;
import com.azure.maps.weather.models.DailyForecastResponse;
import com.azure.maps.weather.models.DailyIndicesResponse;
import com.azure.maps.weather.models.HourlyForecastResponse;
import com.azure.maps.weather.models.MinuteForecastResponse;
import com.azure.maps.weather.models.QuarterDayForecastResponse;
import com.azure.maps.weather.models.ResponseFormat;
import com.azure.maps.weather.models.SevereWeatherAlertsResponse;
import com.azure.maps.weather.models.WeatherAlongRouteResponse;
import com.azure.maps.weather.models.WeatherDataUnit;
import com.azure.maps.weather.models.Weathers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class WeathersImpl implements Weathers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WeathersImpl.class);

    private final WeathersClient innerClient;

    private final com.azure.maps.weather.WeatherManager serviceManager;

    public WeathersImpl(WeathersClient innerClient, com.azure.maps.weather.WeatherManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public HourlyForecastResponse getHourlyForecast(ResponseFormat format, String query) {
        HourlyForecastResponseInner inner = this.serviceClient().getHourlyForecast(format, query);
        if (inner != null) {
            return new HourlyForecastResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HourlyForecastResponse> getHourlyForecastWithResponse(
        ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language, Context context) {
        Response<HourlyForecastResponseInner> inner =
            this.serviceClient().getHourlyForecastWithResponse(format, query, unit, duration, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HourlyForecastResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MinuteForecastResponse getMinuteForecast(ResponseFormat format, String query) {
        MinuteForecastResponseInner inner = this.serviceClient().getMinuteForecast(format, query);
        if (inner != null) {
            return new MinuteForecastResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MinuteForecastResponse> getMinuteForecastWithResponse(
        ResponseFormat format, String query, Integer interval, String language, Context context) {
        Response<MinuteForecastResponseInner> inner =
            this.serviceClient().getMinuteForecastWithResponse(format, query, interval, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MinuteForecastResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public QuarterDayForecastResponse getQuarterDayForecast(ResponseFormat format, String query) {
        QuarterDayForecastResponseInner inner = this.serviceClient().getQuarterDayForecast(format, query);
        if (inner != null) {
            return new QuarterDayForecastResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<QuarterDayForecastResponse> getQuarterDayForecastWithResponse(
        ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language, Context context) {
        Response<QuarterDayForecastResponseInner> inner =
            this.serviceClient().getQuarterDayForecastWithResponse(format, query, unit, duration, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new QuarterDayForecastResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CurrentConditionsResponse getCurrentConditions(ResponseFormat format, String query) {
        CurrentConditionsResponseInner inner = this.serviceClient().getCurrentConditions(format, query);
        if (inner != null) {
            return new CurrentConditionsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CurrentConditionsResponse> getCurrentConditionsWithResponse(
        ResponseFormat format,
        String query,
        WeatherDataUnit unit,
        String details,
        Integer duration,
        String language,
        Context context) {
        Response<CurrentConditionsResponseInner> inner =
            this
                .serviceClient()
                .getCurrentConditionsWithResponse(format, query, unit, details, duration, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CurrentConditionsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DailyForecastResponse getDailyForecast(ResponseFormat format, String query) {
        DailyForecastResponseInner inner = this.serviceClient().getDailyForecast(format, query);
        if (inner != null) {
            return new DailyForecastResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DailyForecastResponse> getDailyForecastWithResponse(
        ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language, Context context) {
        Response<DailyForecastResponseInner> inner =
            this.serviceClient().getDailyForecastWithResponse(format, query, unit, duration, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DailyForecastResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WeatherAlongRouteResponse getWeatherAlongRoute(ResponseFormat format, String query) {
        WeatherAlongRouteResponseInner inner = this.serviceClient().getWeatherAlongRoute(format, query);
        if (inner != null) {
            return new WeatherAlongRouteResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WeatherAlongRouteResponse> getWeatherAlongRouteWithResponse(
        ResponseFormat format, String query, String language, Context context) {
        Response<WeatherAlongRouteResponseInner> inner =
            this.serviceClient().getWeatherAlongRouteWithResponse(format, query, language, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WeatherAlongRouteResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SevereWeatherAlertsResponse getSevereWeatherAlerts(ResponseFormat format, String query) {
        SevereWeatherAlertsResponseInner inner = this.serviceClient().getSevereWeatherAlerts(format, query);
        if (inner != null) {
            return new SevereWeatherAlertsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SevereWeatherAlertsResponse> getSevereWeatherAlertsWithResponse(
        ResponseFormat format, String query, String language, String details, Context context) {
        Response<SevereWeatherAlertsResponseInner> inner =
            this.serviceClient().getSevereWeatherAlertsWithResponse(format, query, language, details, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SevereWeatherAlertsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DailyIndicesResponse getDailyIndices(ResponseFormat format, String query) {
        DailyIndicesResponseInner inner = this.serviceClient().getDailyIndices(format, query);
        if (inner != null) {
            return new DailyIndicesResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DailyIndicesResponse> getDailyIndicesWithResponse(
        ResponseFormat format,
        String query,
        String language,
        Integer duration,
        Integer indexId,
        Integer indexGroupId,
        Context context) {
        Response<DailyIndicesResponseInner> inner =
            this
                .serviceClient()
                .getDailyIndicesWithResponse(format, query, language, duration, indexId, indexGroupId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DailyIndicesResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private WeathersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.weather.WeatherManager manager() {
        return this.serviceManager;
    }
}
