// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Summary of temperature fluctuations over the past 24 hours. */
@Fluent
public final class TemperatureSummaryPast24Hours {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TemperatureSummaryPast24Hours.class);

    /*
     * minimum
     */
    @JsonProperty(value = "minimum")
    private WeatherUnit minimum;

    /*
     * maximum
     */
    @JsonProperty(value = "maximum")
    private WeatherUnit maximum;

    /**
     * Get the minimum property: minimum.
     *
     * @return the minimum value.
     */
    public WeatherUnit minimum() {
        return this.minimum;
    }

    /**
     * Set the minimum property: minimum.
     *
     * @param minimum the minimum value to set.
     * @return the TemperatureSummaryPast24Hours object itself.
     */
    public TemperatureSummaryPast24Hours withMinimum(WeatherUnit minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * Get the maximum property: maximum.
     *
     * @return the maximum value.
     */
    public WeatherUnit maximum() {
        return this.maximum;
    }

    /**
     * Set the maximum property: maximum.
     *
     * @param maximum the maximum value to set.
     * @return the TemperatureSummaryPast24Hours object itself.
     */
    public TemperatureSummaryPast24Hours withMaximum(WeatherUnit maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (minimum() != null) {
            minimum().validate();
        }
        if (maximum() != null) {
            maximum().validate();
        }
    }
}
