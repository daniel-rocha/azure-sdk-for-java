// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The HourlyForecast model. */
@Fluent
public final class HourlyForecast {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HourlyForecast.class);

    /*
     * Date and time of the forecast in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     */
    @JsonProperty(value = "date")
    private String date;

    /*
     * Numeric value representing an image that displays the `iconPhrase`.
     * Please refer to [Weather Service
     * Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     */
    @JsonProperty(value = "iconCode")
    private Integer iconCode;

    /*
     * Phrase description of the weather icon.
     */
    @JsonProperty(value = "iconPhrase")
    private String iconPhrase;

    /*
     * Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     */
    @JsonProperty(value = "hasPrecipitation")
    private Boolean hasPrecipitation;

    /*
     * Specifies whether or not it is daylight. True indicates day light.
     */
    @JsonProperty(value = "isDaylight")
    private Boolean isDaylight;

    /*
     * Temperature being returned.
     */
    @JsonProperty(value = "temperature")
    private WeatherUnit temperature;

    /*
     * RealFeel™ Temperature being returned. Describes what the temperature
     * really feels like in the shade.
     */
    @JsonProperty(value = "realFeelTemperature")
    private WeatherUnit realFeelTemperature;

    /*
     * The temperature to which air may be cooled by evaporating water into it
     * at constant pressure until it reaches saturation.
     */
    @JsonProperty(value = "wetBulbTemperature")
    private WeatherUnit wetBulbTemperature;

    /*
     * The dewpoint temperature in specified unit. The dewpoint temperature is
     * the temperature that the air must be cooled to in order to reach
     * saturation.
     */
    @JsonProperty(value = "dewPoint")
    private WeatherUnit dewPoint;

    /*
     * Wind details being returned including speed and direction.
     */
    @JsonProperty(value = "wind")
    private WindDetails wind;

    /*
     * Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     */
    @JsonProperty(value = "windGust")
    private WindDetails windGust;

    /*
     * Relative humidity is the amount of water vapor present in air expressed
     * as a percentage of the amount needed for saturation at the same
     * temperature.
     */
    @JsonProperty(value = "relativeHumidity")
    private Integer relativeHumidity;

    /*
     * Visibility in specified unit. A measure of the distance at which an
     * object or light can be clearly discerned.
     */
    @JsonProperty(value = "visibility")
    private WeatherUnit visibility;

    /*
     * Cloud ceiling in specified unit. The ceiling is a measurement of the
     * height of the base of the lowest clouds.
     */
    @JsonProperty(value = "ceiling")
    private WeatherUnit ceiling;

    /*
     * Measure of the strength of the ultraviolet radiation from the sun.
     * Supported values are:
     * * `0-2` - Low danger from the sun's UV rays or the average person.
     * * `3-5` - Moderate risk of harm from unprotected sun exposure.
     * * `6-7` - High risk of harm from unprotected sun exposure.
     * * `8-10` - Very high risk of harm from unprotected sun exposure.
     * * `11+` - Extreme risk of harm from unprotected sun exposure.
     */
    @JsonProperty(value = "uvIndex")
    private Integer uvIndex;

    /*
     * Phrase associated with the `uvIndex`.
     */
    @JsonProperty(value = "uvIndexPhrase")
    private String uvIndexPhrase;

    /*
     * Percent representing the probability of precipitation. For example,
     * '20'.
     */
    @JsonProperty(value = "precipitationProbability")
    private Integer precipitationProbability;

    /*
     * Percent representing the probability of rain. For example, '50'.
     */
    @JsonProperty(value = "rainProbability")
    private Integer rainProbability;

    /*
     * Percent representing the probability of snow. For example, '50'.
     */
    @JsonProperty(value = "snowProbability")
    private Integer snowProbability;

    /*
     * Percent representing the probability of snow. For example, '5'.
     */
    @JsonProperty(value = "iceProbability")
    private Integer iceProbability;

    /*
     * Total liquid equivalent of precipitation during the forecast period.
     */
    @JsonProperty(value = "totalLiquid")
    private WeatherUnit totalLiquid;

    /*
     * Rain
     */
    @JsonProperty(value = "rain")
    private WeatherUnit rain;

    /*
     * Snow
     */
    @JsonProperty(value = "snow")
    private WeatherUnit snow;

    /*
     * Ice
     */
    @JsonProperty(value = "ice")
    private WeatherUnit ice;

    /*
     * Percent representing cloud cover.
     */
    @JsonProperty(value = "cloudCover")
    private Integer cloudCover;

    /**
     * Get the date property: Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     *
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     *
     * @param date the date value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @return the iconCode value.
     */
    public Integer iconCode() {
        return this.iconCode;
    }

    /**
     * Set the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @param iconCode the iconCode value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withIconCode(Integer iconCode) {
        this.iconCode = iconCode;
        return this;
    }

    /**
     * Get the iconPhrase property: Phrase description of the weather icon.
     *
     * @return the iconPhrase value.
     */
    public String iconPhrase() {
        return this.iconPhrase;
    }

    /**
     * Set the iconPhrase property: Phrase description of the weather icon.
     *
     * @param iconPhrase the iconPhrase value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withIconPhrase(String iconPhrase) {
        this.iconPhrase = iconPhrase;
        return this;
    }

    /**
     * Get the hasPrecipitation property: Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     *
     * @return the hasPrecipitation value.
     */
    public Boolean hasPrecipitation() {
        return this.hasPrecipitation;
    }

    /**
     * Set the hasPrecipitation property: Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     *
     * @param hasPrecipitation the hasPrecipitation value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withHasPrecipitation(Boolean hasPrecipitation) {
        this.hasPrecipitation = hasPrecipitation;
        return this;
    }

    /**
     * Get the isDaylight property: Specifies whether or not it is daylight. True indicates day light.
     *
     * @return the isDaylight value.
     */
    public Boolean isDaylight() {
        return this.isDaylight;
    }

    /**
     * Set the isDaylight property: Specifies whether or not it is daylight. True indicates day light.
     *
     * @param isDaylight the isDaylight value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withIsDaylight(Boolean isDaylight) {
        this.isDaylight = isDaylight;
        return this;
    }

    /**
     * Get the temperature property: Temperature being returned.
     *
     * @return the temperature value.
     */
    public WeatherUnit temperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Temperature being returned.
     *
     * @param temperature the temperature value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withTemperature(WeatherUnit temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the realFeelTemperature property: RealFeel™ Temperature being returned. Describes what the temperature really
     * feels like in the shade.
     *
     * @return the realFeelTemperature value.
     */
    public WeatherUnit realFeelTemperature() {
        return this.realFeelTemperature;
    }

    /**
     * Set the realFeelTemperature property: RealFeel™ Temperature being returned. Describes what the temperature really
     * feels like in the shade.
     *
     * @param realFeelTemperature the realFeelTemperature value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withRealFeelTemperature(WeatherUnit realFeelTemperature) {
        this.realFeelTemperature = realFeelTemperature;
        return this;
    }

    /**
     * Get the wetBulbTemperature property: The temperature to which air may be cooled by evaporating water into it at
     * constant pressure until it reaches saturation.
     *
     * @return the wetBulbTemperature value.
     */
    public WeatherUnit wetBulbTemperature() {
        return this.wetBulbTemperature;
    }

    /**
     * Set the wetBulbTemperature property: The temperature to which air may be cooled by evaporating water into it at
     * constant pressure until it reaches saturation.
     *
     * @param wetBulbTemperature the wetBulbTemperature value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withWetBulbTemperature(WeatherUnit wetBulbTemperature) {
        this.wetBulbTemperature = wetBulbTemperature;
        return this;
    }

    /**
     * Get the dewPoint property: The dewpoint temperature in specified unit. The dewpoint temperature is the
     * temperature that the air must be cooled to in order to reach saturation.
     *
     * @return the dewPoint value.
     */
    public WeatherUnit dewPoint() {
        return this.dewPoint;
    }

    /**
     * Set the dewPoint property: The dewpoint temperature in specified unit. The dewpoint temperature is the
     * temperature that the air must be cooled to in order to reach saturation.
     *
     * @param dewPoint the dewPoint value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withDewPoint(WeatherUnit dewPoint) {
        this.dewPoint = dewPoint;
        return this;
    }

    /**
     * Get the wind property: Wind details being returned including speed and direction.
     *
     * @return the wind value.
     */
    public WindDetails wind() {
        return this.wind;
    }

    /**
     * Set the wind property: Wind details being returned including speed and direction.
     *
     * @param wind the wind value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withWind(WindDetails wind) {
        this.wind = wind;
        return this;
    }

    /**
     * Get the windGust property: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     *
     * @return the windGust value.
     */
    public WindDetails windGust() {
        return this.windGust;
    }

    /**
     * Set the windGust property: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     *
     * @param windGust the windGust value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withWindGust(WindDetails windGust) {
        this.windGust = windGust;
        return this;
    }

    /**
     * Get the relativeHumidity property: Relative humidity is the amount of water vapor present in air expressed as a
     * percentage of the amount needed for saturation at the same temperature.
     *
     * @return the relativeHumidity value.
     */
    public Integer relativeHumidity() {
        return this.relativeHumidity;
    }

    /**
     * Set the relativeHumidity property: Relative humidity is the amount of water vapor present in air expressed as a
     * percentage of the amount needed for saturation at the same temperature.
     *
     * @param relativeHumidity the relativeHumidity value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withRelativeHumidity(Integer relativeHumidity) {
        this.relativeHumidity = relativeHumidity;
        return this;
    }

    /**
     * Get the visibility property: Visibility in specified unit. A measure of the distance at which an object or light
     * can be clearly discerned.
     *
     * @return the visibility value.
     */
    public WeatherUnit visibility() {
        return this.visibility;
    }

    /**
     * Set the visibility property: Visibility in specified unit. A measure of the distance at which an object or light
     * can be clearly discerned.
     *
     * @param visibility the visibility value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withVisibility(WeatherUnit visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get the ceiling property: Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base
     * of the lowest clouds.
     *
     * @return the ceiling value.
     */
    public WeatherUnit ceiling() {
        return this.ceiling;
    }

    /**
     * Set the ceiling property: Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base
     * of the lowest clouds.
     *
     * @param ceiling the ceiling value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withCeiling(WeatherUnit ceiling) {
        this.ceiling = ceiling;
        return this;
    }

    /**
     * Get the uvIndex property: Measure of the strength of the ultraviolet radiation from the sun. Supported values
     * are: * `0-2` - Low danger from the sun's UV rays or the average person. * `3-5` - Moderate risk of harm from
     * unprotected sun exposure. * `6-7` - High risk of harm from unprotected sun exposure. * `8-10` - Very high risk of
     * harm from unprotected sun exposure. * `11+` - Extreme risk of harm from unprotected sun exposure.
     *
     * @return the uvIndex value.
     */
    public Integer uvIndex() {
        return this.uvIndex;
    }

    /**
     * Set the uvIndex property: Measure of the strength of the ultraviolet radiation from the sun. Supported values
     * are: * `0-2` - Low danger from the sun's UV rays or the average person. * `3-5` - Moderate risk of harm from
     * unprotected sun exposure. * `6-7` - High risk of harm from unprotected sun exposure. * `8-10` - Very high risk of
     * harm from unprotected sun exposure. * `11+` - Extreme risk of harm from unprotected sun exposure.
     *
     * @param uvIndex the uvIndex value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withUvIndex(Integer uvIndex) {
        this.uvIndex = uvIndex;
        return this;
    }

    /**
     * Get the uvIndexPhrase property: Phrase associated with the `uvIndex`.
     *
     * @return the uvIndexPhrase value.
     */
    public String uvIndexPhrase() {
        return this.uvIndexPhrase;
    }

    /**
     * Set the uvIndexPhrase property: Phrase associated with the `uvIndex`.
     *
     * @param uvIndexPhrase the uvIndexPhrase value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withUvIndexPhrase(String uvIndexPhrase) {
        this.uvIndexPhrase = uvIndexPhrase;
        return this;
    }

    /**
     * Get the precipitationProbability property: Percent representing the probability of precipitation. For example,
     * '20'.
     *
     * @return the precipitationProbability value.
     */
    public Integer precipitationProbability() {
        return this.precipitationProbability;
    }

    /**
     * Set the precipitationProbability property: Percent representing the probability of precipitation. For example,
     * '20'.
     *
     * @param precipitationProbability the precipitationProbability value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withPrecipitationProbability(Integer precipitationProbability) {
        this.precipitationProbability = precipitationProbability;
        return this;
    }

    /**
     * Get the rainProbability property: Percent representing the probability of rain. For example, '50'.
     *
     * @return the rainProbability value.
     */
    public Integer rainProbability() {
        return this.rainProbability;
    }

    /**
     * Set the rainProbability property: Percent representing the probability of rain. For example, '50'.
     *
     * @param rainProbability the rainProbability value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withRainProbability(Integer rainProbability) {
        this.rainProbability = rainProbability;
        return this;
    }

    /**
     * Get the snowProbability property: Percent representing the probability of snow. For example, '50'.
     *
     * @return the snowProbability value.
     */
    public Integer snowProbability() {
        return this.snowProbability;
    }

    /**
     * Set the snowProbability property: Percent representing the probability of snow. For example, '50'.
     *
     * @param snowProbability the snowProbability value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withSnowProbability(Integer snowProbability) {
        this.snowProbability = snowProbability;
        return this;
    }

    /**
     * Get the iceProbability property: Percent representing the probability of snow. For example, '5'.
     *
     * @return the iceProbability value.
     */
    public Integer iceProbability() {
        return this.iceProbability;
    }

    /**
     * Set the iceProbability property: Percent representing the probability of snow. For example, '5'.
     *
     * @param iceProbability the iceProbability value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withIceProbability(Integer iceProbability) {
        this.iceProbability = iceProbability;
        return this;
    }

    /**
     * Get the totalLiquid property: Total liquid equivalent of precipitation during the forecast period.
     *
     * @return the totalLiquid value.
     */
    public WeatherUnit totalLiquid() {
        return this.totalLiquid;
    }

    /**
     * Set the totalLiquid property: Total liquid equivalent of precipitation during the forecast period.
     *
     * @param totalLiquid the totalLiquid value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withTotalLiquid(WeatherUnit totalLiquid) {
        this.totalLiquid = totalLiquid;
        return this;
    }

    /**
     * Get the rain property: Rain.
     *
     * @return the rain value.
     */
    public WeatherUnit rain() {
        return this.rain;
    }

    /**
     * Set the rain property: Rain.
     *
     * @param rain the rain value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withRain(WeatherUnit rain) {
        this.rain = rain;
        return this;
    }

    /**
     * Get the snow property: Snow.
     *
     * @return the snow value.
     */
    public WeatherUnit snow() {
        return this.snow;
    }

    /**
     * Set the snow property: Snow.
     *
     * @param snow the snow value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withSnow(WeatherUnit snow) {
        this.snow = snow;
        return this;
    }

    /**
     * Get the ice property: Ice.
     *
     * @return the ice value.
     */
    public WeatherUnit ice() {
        return this.ice;
    }

    /**
     * Set the ice property: Ice.
     *
     * @param ice the ice value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withIce(WeatherUnit ice) {
        this.ice = ice;
        return this;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer cloudCover() {
        return this.cloudCover;
    }

    /**
     * Set the cloudCover property: Percent representing cloud cover.
     *
     * @param cloudCover the cloudCover value to set.
     * @return the HourlyForecast object itself.
     */
    public HourlyForecast withCloudCover(Integer cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (temperature() != null) {
            temperature().validate();
        }
        if (realFeelTemperature() != null) {
            realFeelTemperature().validate();
        }
        if (wetBulbTemperature() != null) {
            wetBulbTemperature().validate();
        }
        if (dewPoint() != null) {
            dewPoint().validate();
        }
        if (wind() != null) {
            wind().validate();
        }
        if (windGust() != null) {
            windGust().validate();
        }
        if (visibility() != null) {
            visibility().validate();
        }
        if (ceiling() != null) {
            ceiling().validate();
        }
        if (totalLiquid() != null) {
            totalLiquid().validate();
        }
        if (rain() != null) {
            rain().validate();
        }
        if (snow() != null) {
            snow().validate();
        }
        if (ice() != null) {
            ice().validate();
        }
    }
}
