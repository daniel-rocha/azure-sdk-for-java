// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.weather.models.ForecastInterval;
import com.azure.maps.weather.models.IntervalSummary;
import com.azure.maps.weather.models.MinuteForecastSummary;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The MinuteForecastResponse model. */
@Fluent
public final class MinuteForecastResponseInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MinuteForecastResponseInner.class);

    /*
     * Phrase summaries for the entire forecast period.
     */
    @JsonProperty(value = "summary")
    private MinuteForecastSummary summary;

    /*
     * Summary information for each interval in the forecast. The Summaries
     * breaks down each potential interval where precipitation starts and
     * stops.
     */
    @JsonProperty(value = "intervalSummaries")
    private List<IntervalSummary> intervalSummaries;

    /*
     * Forecast data for each interval in the forecast.
     */
    @JsonProperty(value = "intervals")
    private List<ForecastInterval> intervals;

    /**
     * Get the summary property: Phrase summaries for the entire forecast period.
     *
     * @return the summary value.
     */
    public MinuteForecastSummary summary() {
        return this.summary;
    }

    /**
     * Set the summary property: Phrase summaries for the entire forecast period.
     *
     * @param summary the summary value to set.
     * @return the MinuteForecastResponseInner object itself.
     */
    public MinuteForecastResponseInner withSummary(MinuteForecastSummary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the intervalSummaries property: Summary information for each interval in the forecast. The Summaries breaks
     * down each potential interval where precipitation starts and stops.
     *
     * @return the intervalSummaries value.
     */
    public List<IntervalSummary> intervalSummaries() {
        return this.intervalSummaries;
    }

    /**
     * Set the intervalSummaries property: Summary information for each interval in the forecast. The Summaries breaks
     * down each potential interval where precipitation starts and stops.
     *
     * @param intervalSummaries the intervalSummaries value to set.
     * @return the MinuteForecastResponseInner object itself.
     */
    public MinuteForecastResponseInner withIntervalSummaries(List<IntervalSummary> intervalSummaries) {
        this.intervalSummaries = intervalSummaries;
        return this;
    }

    /**
     * Get the intervals property: Forecast data for each interval in the forecast.
     *
     * @return the intervals value.
     */
    public List<ForecastInterval> intervals() {
        return this.intervals;
    }

    /**
     * Set the intervals property: Forecast data for each interval in the forecast.
     *
     * @param intervals the intervals value to set.
     * @return the MinuteForecastResponseInner object itself.
     */
    public MinuteForecastResponseInner withIntervals(List<ForecastInterval> intervals) {
        this.intervals = intervals;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (summary() != null) {
            summary().validate();
        }
        if (intervalSummaries() != null) {
            intervalSummaries().forEach(e -> e.validate());
        }
        if (intervals() != null) {
            intervals().forEach(e -> e.validate());
        }
    }
}
