// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.weather.models.DailyForecast;
import com.azure.maps.weather.models.DailyForecastSummary;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The DailyForecastResponse model. */
@Fluent
public final class DailyForecastResponseInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DailyForecastResponseInner.class);

    /*
     * Summary for the main conditions for the requested time period. Notice
     * that summary can cover only part of the time period.
     */
    @JsonProperty(value = "summary")
    private DailyForecastSummary summary;

    /*
     * Forecast data for each requested day.
     */
    @JsonProperty(value = "forecasts")
    private List<DailyForecast> forecasts;

    /**
     * Get the summary property: Summary for the main conditions for the requested time period. Notice that summary can
     * cover only part of the time period.
     *
     * @return the summary value.
     */
    public DailyForecastSummary summary() {
        return this.summary;
    }

    /**
     * Set the summary property: Summary for the main conditions for the requested time period. Notice that summary can
     * cover only part of the time period.
     *
     * @param summary the summary value to set.
     * @return the DailyForecastResponseInner object itself.
     */
    public DailyForecastResponseInner withSummary(DailyForecastSummary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the forecasts property: Forecast data for each requested day.
     *
     * @return the forecasts value.
     */
    public List<DailyForecast> forecasts() {
        return this.forecasts;
    }

    /**
     * Set the forecasts property: Forecast data for each requested day.
     *
     * @param forecasts the forecasts value to set.
     * @return the DailyForecastResponseInner object itself.
     */
    public DailyForecastResponseInner withForecasts(List<DailyForecast> forecasts) {
        this.forecasts = forecasts;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (summary() != null) {
            summary().validate();
        }
        if (forecasts() != null) {
            forecasts().forEach(e -> e.validate());
        }
    }
}
