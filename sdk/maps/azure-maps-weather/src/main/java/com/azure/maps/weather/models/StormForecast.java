// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.models.GeoPosition;
import com.azure.maps.weather.implementation.models.LatLongPair;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Government-issued storm forecast. */
@Fluent
public final class StormForecast {
    /*
     * Datetime the forecast is valid, displayed in ISO8601 format.
     */
    @JsonProperty(value = "dateTime")
    private String timestamp;

    /*
     * Datetime the forecast was created, displayed in ISO8601 format.
     */
    @JsonProperty(value = "initializedDateTime")
    private String initializedTimestamp;

    /*
     * Coordinates of the storm
     */
    @JsonProperty(value = "location")
    private LatLongPair coordinates;

    /*
     * Maximum wind gust speed associated with the storm. May be NULL.
     */
    @JsonProperty(value = "maxWindGust")
    private WeatherValue maxWindGust;

    /*
     * Maximum sustained wind speed associated with the storm. May be NULL.
     */
    @JsonProperty(value = "sustainedWind")
    private WeatherValue sustainedWind;

    /*
     * Storm status
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * Contains information about the forecast window for the storm during the
     * specified time period (not the entire cone). If windowGeometry=true in
     * the request, this object will include geoJSON details for window
     * geometry.
     */
    @JsonProperty(value = "window")
    private WeatherWindow weatherWindow;

    /*
     * Displayed when details=true or radiiGeometry=true in the request.
     */
    @JsonProperty(value = "windRadiiSummary")
    private List<StormWindRadiiSummary> windRadiiSummary;

    /**
     * Get the timestamp property: Datetime the forecast is valid, displayed in ISO8601 format.
     *
     * @return the timestamp value.
     */
    public String getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Datetime the forecast is valid, displayed in ISO8601 format.
     *
     * @param timestamp the timestamp value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the initializedTimestamp property: Datetime the forecast was created, displayed in ISO8601 format.
     *
     * @return the initializedTimestamp value.
     */
    public String getInitializedTimestamp() {
        return this.initializedTimestamp;
    }

    /**
     * Set the initializedTimestamp property: Datetime the forecast was created, displayed in ISO8601 format.
     *
     * @param initializedTimestamp the initializedTimestamp value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setInitializedTimestamp(String initializedTimestamp) {
        this.initializedTimestamp = initializedTimestamp;
        return this;
    }

    /**
     * Get the coordinates property: Coordinates of the storm.
     *
     * @return the coordinates value.
     */
    public GeoPosition getCoordinates() {
        LatLongPair returnValue = this.coordinates;
        return new GeoPosition(returnValue.getLongitude(), returnValue.getLatitude());
    }

    /**
     * Get the maxWindGust property: Maximum wind gust speed associated with the storm. May be NULL.
     *
     * @return the maxWindGust value.
     */
    public WeatherValue getMaxWindGust() {
        return this.maxWindGust;
    }

    /**
     * Set the maxWindGust property: Maximum wind gust speed associated with the storm. May be NULL.
     *
     * @param maxWindGust the maxWindGust value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setMaxWindGust(WeatherValue maxWindGust) {
        this.maxWindGust = maxWindGust;
        return this;
    }

    /**
     * Get the sustainedWind property: Maximum sustained wind speed associated with the storm. May be NULL.
     *
     * @return the sustainedWind value.
     */
    public WeatherValue getSustainedWind() {
        return this.sustainedWind;
    }

    /**
     * Set the sustainedWind property: Maximum sustained wind speed associated with the storm. May be NULL.
     *
     * @param sustainedWind the sustainedWind value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setSustainedWind(WeatherValue sustainedWind) {
        this.sustainedWind = sustainedWind;
        return this;
    }

    /**
     * Get the status property: Storm status.
     *
     * @return the status value.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Storm status.
     *
     * @param status the status value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the weatherWindow property: Contains information about the forecast window for the storm during the specified
     * time period (not the entire cone). If windowGeometry=true in the request, this object will include geoJSON
     * details for window geometry.
     *
     * @return the weatherWindow value.
     */
    public WeatherWindow getWeatherWindow() {
        return this.weatherWindow;
    }

    /**
     * Set the weatherWindow property: Contains information about the forecast window for the storm during the specified
     * time period (not the entire cone). If windowGeometry=true in the request, this object will include geoJSON
     * details for window geometry.
     *
     * @param weatherWindow the weatherWindow value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setWeatherWindow(WeatherWindow weatherWindow) {
        this.weatherWindow = weatherWindow;
        return this;
    }

    /**
     * Get the windRadiiSummary property: Displayed when details=true or radiiGeometry=true in the request.
     *
     * @return the windRadiiSummary value.
     */
    public List<StormWindRadiiSummary> getWindRadiiSummary() {
        return this.windRadiiSummary;
    }

    /**
     * Set the windRadiiSummary property: Displayed when details=true or radiiGeometry=true in the request.
     *
     * @param windRadiiSummary the windRadiiSummary value to set.
     * @return the StormForecast object itself.
     */
    public StormForecast setWindRadiiSummary(List<StormWindRadiiSummary> windRadiiSummary) {
        this.windRadiiSummary = windRadiiSummary;
        return this;
    }
}
