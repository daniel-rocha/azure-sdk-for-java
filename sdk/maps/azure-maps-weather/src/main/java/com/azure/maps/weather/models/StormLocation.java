// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.maps.weather.implementation.models.LatLongPair;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Location for an individual Government-issued storm. */
@Fluent
public final class StormLocation {
    /*
     * Datetime the forecast is valid, displayed in ISO8601 format.
     */
    @JsonProperty(value = "dateTime")
    private String timestamp;

    /*
     * Coordinates of the storm
     */
    @JsonProperty(value = "location")
    private LatLongPair coordinates;

    /*
     * Maximum wind gust speed associated with the storm. May be NULL.
     */
    @JsonProperty(value = "maxWindGust")
    private WeatherValue maxWindGust;

    /*
     * Maximum sustained wind speed associated with the storm. May be NULL.
     */
    @JsonProperty(value = "sustainedWind")
    private WeatherValue sustainedWind;

    /*
     * Minimum pressure associated with the storm. May be NULL.
     */
    @JsonProperty(value = "minimumPressure")
    private WeatherValue minimumPressure;

    /*
     * The storm movement information.
     */
    @JsonProperty(value = "movement")
    private WindDetails movement;

    /*
     * Storm status, in English.
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * True when the depression is classified as a subtropical cyclone.
     */
    @JsonProperty(value = "isSubtropical")
    private Boolean isSubtropical;

    /*
     * True when storm may develop into a Tropical System.
     */
    @JsonProperty(value = "hasTropicalPotential")
    private Boolean hasTropicalPotential;

    /*
     * True when the storm is weakening away, and will no longer become a
     * tropical system.
     */
    @JsonProperty(value = "isPostTropical")
    private Boolean isPostTropical;

    /*
     * Displayed when details=true or radiiGeometry=true in the request.
     */
    @JsonProperty(value = "windRadiiSummary")
    private List<StormWindRadiiSummary> windRadiiSummary;

    /**
     * Get the timestamp property: Datetime the forecast is valid, displayed in ISO8601 format.
     *
     * @return the timestamp value.
     */
    public String getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Datetime the forecast is valid, displayed in ISO8601 format.
     *
     * @param timestamp the timestamp value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the coordinates property: Coordinates of the storm.
     *
     * @return the coordinates value.
     */
    public LatLongPair getCoordinates() {
        return this.coordinates;
    }

    /**
     * Set the coordinates property: Coordinates of the storm.
     *
     * @param coordinates the coordinates value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setCoordinates(LatLongPair coordinates) {
        this.coordinates = coordinates;
        return this;
    }

    /**
     * Get the maxWindGust property: Maximum wind gust speed associated with the storm. May be NULL.
     *
     * @return the maxWindGust value.
     */
    public WeatherValue getMaxWindGust() {
        return this.maxWindGust;
    }

    /**
     * Set the maxWindGust property: Maximum wind gust speed associated with the storm. May be NULL.
     *
     * @param maxWindGust the maxWindGust value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setMaxWindGust(WeatherValue maxWindGust) {
        this.maxWindGust = maxWindGust;
        return this;
    }

    /**
     * Get the sustainedWind property: Maximum sustained wind speed associated with the storm. May be NULL.
     *
     * @return the sustainedWind value.
     */
    public WeatherValue getSustainedWind() {
        return this.sustainedWind;
    }

    /**
     * Set the sustainedWind property: Maximum sustained wind speed associated with the storm. May be NULL.
     *
     * @param sustainedWind the sustainedWind value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setSustainedWind(WeatherValue sustainedWind) {
        this.sustainedWind = sustainedWind;
        return this;
    }

    /**
     * Get the minimumPressure property: Minimum pressure associated with the storm. May be NULL.
     *
     * @return the minimumPressure value.
     */
    public WeatherValue getMinimumPressure() {
        return this.minimumPressure;
    }

    /**
     * Set the minimumPressure property: Minimum pressure associated with the storm. May be NULL.
     *
     * @param minimumPressure the minimumPressure value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setMinimumPressure(WeatherValue minimumPressure) {
        this.minimumPressure = minimumPressure;
        return this;
    }

    /**
     * Get the movement property: The storm movement information.
     *
     * @return the movement value.
     */
    public WindDetails getMovement() {
        return this.movement;
    }

    /**
     * Set the movement property: The storm movement information.
     *
     * @param movement the movement value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setMovement(WindDetails movement) {
        this.movement = movement;
        return this;
    }

    /**
     * Get the status property: Storm status, in English.
     *
     * @return the status value.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Storm status, in English.
     *
     * @param status the status value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the isSubtropical property: True when the depression is classified as a subtropical cyclone.
     *
     * @return the isSubtropical value.
     */
    public Boolean isSubtropical() {
        return this.isSubtropical;
    }

    /**
     * Set the isSubtropical property: True when the depression is classified as a subtropical cyclone.
     *
     * @param isSubtropical the isSubtropical value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setIsSubtropical(Boolean isSubtropical) {
        this.isSubtropical = isSubtropical;
        return this;
    }

    /**
     * Get the hasTropicalPotential property: True when storm may develop into a Tropical System.
     *
     * @return the hasTropicalPotential value.
     */
    public Boolean isHasTropicalPotential() {
        return this.hasTropicalPotential;
    }

    /**
     * Set the hasTropicalPotential property: True when storm may develop into a Tropical System.
     *
     * @param hasTropicalPotential the hasTropicalPotential value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setHasTropicalPotential(Boolean hasTropicalPotential) {
        this.hasTropicalPotential = hasTropicalPotential;
        return this;
    }

    /**
     * Get the isPostTropical property: True when the storm is weakening away, and will no longer become a tropical
     * system.
     *
     * @return the isPostTropical value.
     */
    public Boolean isPostTropical() {
        return this.isPostTropical;
    }

    /**
     * Set the isPostTropical property: True when the storm is weakening away, and will no longer become a tropical
     * system.
     *
     * @param isPostTropical the isPostTropical value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setIsPostTropical(Boolean isPostTropical) {
        this.isPostTropical = isPostTropical;
        return this;
    }

    /**
     * Get the windRadiiSummary property: Displayed when details=true or radiiGeometry=true in the request.
     *
     * @return the windRadiiSummary value.
     */
    public List<StormWindRadiiSummary> getWindRadiiSummary() {
        return this.windRadiiSummary;
    }

    /**
     * Set the windRadiiSummary property: Displayed when details=true or radiiGeometry=true in the request.
     *
     * @param windRadiiSummary the windRadiiSummary value to set.
     * @return the StormLocation object itself.
     */
    public StormLocation setWindRadiiSummary(List<StormWindRadiiSummary> windRadiiSummary) {
        this.windRadiiSummary = windRadiiSummary;
        return this;
    }
}
