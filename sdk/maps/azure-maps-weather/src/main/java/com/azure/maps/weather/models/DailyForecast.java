// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The DailyForecast model. */
@Fluent
public final class DailyForecast {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DailyForecast.class);

    /*
     * Date and time of the current observation displayed in ISO 8601 format,
     * for example, 2019-10-27T19:39:57-08:00.
     */
    @JsonProperty(value = "date")
    private String date;

    /*
     * Temperature values for the day.
     */
    @JsonProperty(value = "temperature")
    private WeatherUnitRange temperature;

    /*
     * RealFeel™ Temperature being returned.
     */
    @JsonProperty(value = "realFeelTemperature")
    private WeatherUnitRange realFeelTemperature;

    /*
     * RealFeel™ Temperature being returned. Describes what the temperature
     * really feels like in the shade.
     */
    @JsonProperty(value = "realFeelTemperatureShade")
    private WeatherUnitRange realFeelTemperatureShade;

    /*
     * Hours of sun.
     */
    @JsonProperty(value = "hoursOfSun")
    private Float hoursOfSun;

    /*
     * Summary of Heating Degree Day or Cooling Degree Day information
     */
    @JsonProperty(value = "degreeDaySummary")
    private DegreeDaySummary degreeDaySummary;

    /*
     * airAndPollen
     */
    @JsonProperty(value = "airAndPollen")
    private List<AirAndPollen> airAndPollen;

    /*
     * Day
     */
    @JsonProperty(value = "day")
    private DayOrNight day;

    /*
     * Night
     */
    @JsonProperty(value = "night")
    private DayOrNight night;

    /*
     * Source(s) of the forecast data.
     */
    @JsonProperty(value = "sources")
    private List<String> sources;

    /**
     * Get the date property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @param date the date value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the temperature property: Temperature values for the day.
     *
     * @return the temperature value.
     */
    public WeatherUnitRange temperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: Temperature values for the day.
     *
     * @param temperature the temperature value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withTemperature(WeatherUnitRange temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the realFeelTemperature property: RealFeel™ Temperature being returned.
     *
     * @return the realFeelTemperature value.
     */
    public WeatherUnitRange realFeelTemperature() {
        return this.realFeelTemperature;
    }

    /**
     * Set the realFeelTemperature property: RealFeel™ Temperature being returned.
     *
     * @param realFeelTemperature the realFeelTemperature value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withRealFeelTemperature(WeatherUnitRange realFeelTemperature) {
        this.realFeelTemperature = realFeelTemperature;
        return this;
    }

    /**
     * Get the realFeelTemperatureShade property: RealFeel™ Temperature being returned. Describes what the temperature
     * really feels like in the shade.
     *
     * @return the realFeelTemperatureShade value.
     */
    public WeatherUnitRange realFeelTemperatureShade() {
        return this.realFeelTemperatureShade;
    }

    /**
     * Set the realFeelTemperatureShade property: RealFeel™ Temperature being returned. Describes what the temperature
     * really feels like in the shade.
     *
     * @param realFeelTemperatureShade the realFeelTemperatureShade value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withRealFeelTemperatureShade(WeatherUnitRange realFeelTemperatureShade) {
        this.realFeelTemperatureShade = realFeelTemperatureShade;
        return this;
    }

    /**
     * Get the hoursOfSun property: Hours of sun.
     *
     * @return the hoursOfSun value.
     */
    public Float hoursOfSun() {
        return this.hoursOfSun;
    }

    /**
     * Set the hoursOfSun property: Hours of sun.
     *
     * @param hoursOfSun the hoursOfSun value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withHoursOfSun(Float hoursOfSun) {
        this.hoursOfSun = hoursOfSun;
        return this;
    }

    /**
     * Get the degreeDaySummary property: Summary of Heating Degree Day or Cooling Degree Day information.
     *
     * @return the degreeDaySummary value.
     */
    public DegreeDaySummary degreeDaySummary() {
        return this.degreeDaySummary;
    }

    /**
     * Set the degreeDaySummary property: Summary of Heating Degree Day or Cooling Degree Day information.
     *
     * @param degreeDaySummary the degreeDaySummary value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withDegreeDaySummary(DegreeDaySummary degreeDaySummary) {
        this.degreeDaySummary = degreeDaySummary;
        return this;
    }

    /**
     * Get the airAndPollen property: airAndPollen.
     *
     * @return the airAndPollen value.
     */
    public List<AirAndPollen> airAndPollen() {
        return this.airAndPollen;
    }

    /**
     * Set the airAndPollen property: airAndPollen.
     *
     * @param airAndPollen the airAndPollen value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withAirAndPollen(List<AirAndPollen> airAndPollen) {
        this.airAndPollen = airAndPollen;
        return this;
    }

    /**
     * Get the day property: Day.
     *
     * @return the day value.
     */
    public DayOrNight day() {
        return this.day;
    }

    /**
     * Set the day property: Day.
     *
     * @param day the day value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withDay(DayOrNight day) {
        this.day = day;
        return this;
    }

    /**
     * Get the night property: Night.
     *
     * @return the night value.
     */
    public DayOrNight night() {
        return this.night;
    }

    /**
     * Set the night property: Night.
     *
     * @param night the night value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withNight(DayOrNight night) {
        this.night = night;
        return this;
    }

    /**
     * Get the sources property: Source(s) of the forecast data.
     *
     * @return the sources value.
     */
    public List<String> sources() {
        return this.sources;
    }

    /**
     * Set the sources property: Source(s) of the forecast data.
     *
     * @param sources the sources value to set.
     * @return the DailyForecast object itself.
     */
    public DailyForecast withSources(List<String> sources) {
        this.sources = sources;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (temperature() != null) {
            temperature().validate();
        }
        if (realFeelTemperature() != null) {
            realFeelTemperature().validate();
        }
        if (realFeelTemperatureShade() != null) {
            realFeelTemperatureShade().validate();
        }
        if (degreeDaySummary() != null) {
            degreeDaySummary().validate();
        }
        if (airAndPollen() != null) {
            airAndPollen().forEach(e -> e.validate());
        }
        if (day() != null) {
            day().validate();
        }
        if (night() != null) {
            night().validate();
        }
    }
}
