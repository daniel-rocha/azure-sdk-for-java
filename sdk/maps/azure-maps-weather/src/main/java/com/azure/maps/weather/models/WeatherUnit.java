// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Specific value of a given unit related to weather. */
@Fluent
public final class WeatherUnit {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WeatherUnit.class);

    /*
     * Rounded value.
     */
    @JsonProperty(value = "value")
    private Float value;

    /*
     * Type of unit for the returned value.
     */
    @JsonProperty(value = "unit")
    private String unit;

    /*
     * Numeric ID value associated with the type of unit being displayed. Can
     * be used for unit translation. Please refer to [Weather Service
     * Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     */
    @JsonProperty(value = "unitType")
    private Integer unitType;

    /**
     * Get the value property: Rounded value.
     *
     * @return the value value.
     */
    public Float value() {
        return this.value;
    }

    /**
     * Set the value property: Rounded value.
     *
     * @param value the value value to set.
     * @return the WeatherUnit object itself.
     */
    public WeatherUnit withValue(Float value) {
        this.value = value;
        return this;
    }

    /**
     * Get the unit property: Type of unit for the returned value.
     *
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Type of unit for the returned value.
     *
     * @param unit the unit value to set.
     * @return the WeatherUnit object itself.
     */
    public WeatherUnit withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the unitType property: Numeric ID value associated with the type of unit being displayed. Can be used for
     * unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
     * details.
     *
     * @return the unitType value.
     */
    public Integer unitType() {
        return this.unitType;
    }

    /**
     * Set the unitType property: Numeric ID value associated with the type of unit being displayed. Can be used for
     * unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
     * details.
     *
     * @param unitType the unitType value to set.
     * @return the WeatherUnit object itself.
     */
    public WeatherUnit withUnitType(Integer unitType) {
        this.unitType = unitType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
