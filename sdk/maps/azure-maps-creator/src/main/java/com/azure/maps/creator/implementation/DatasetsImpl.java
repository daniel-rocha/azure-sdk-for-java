// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.DatasetsClient;
import com.azure.maps.creator.fluent.models.DatasetDetailInfoInner;
import com.azure.maps.creator.fluent.models.LongRunningOperationResultInner;
import com.azure.maps.creator.models.DatasetDetailInfo;
import com.azure.maps.creator.models.Datasets;
import com.azure.maps.creator.models.DatasetsGetOperationResponse;
import com.azure.maps.creator.models.LongRunningOperationResult;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DatasetsImpl implements Datasets {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatasetsImpl.class);

    private final DatasetsClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public DatasetsImpl(DatasetsClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LongRunningOperationResult create(String conversionId, String datasetId, String descriptionDataset) {
        LongRunningOperationResultInner inner =
            this.serviceClient().create(conversionId, datasetId, descriptionDataset);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult create(String conversionId) {
        LongRunningOperationResultInner inner = this.serviceClient().create(conversionId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult create(
        String conversionId, String datasetId, String descriptionDataset, Context context) {
        LongRunningOperationResultInner inner =
            this.serviceClient().create(conversionId, datasetId, descriptionDataset, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DatasetDetailInfo> list() {
        PagedIterable<DatasetDetailInfoInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DatasetDetailInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<DatasetDetailInfo> list(Context context) {
        PagedIterable<DatasetDetailInfoInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new DatasetDetailInfoImpl(inner1, this.manager()));
    }

    public DatasetDetailInfo get(String datasetId) {
        DatasetDetailInfoInner inner = this.serviceClient().get(datasetId);
        if (inner != null) {
            return new DatasetDetailInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatasetDetailInfo> getWithResponse(String datasetId, Context context) {
        Response<DatasetDetailInfoInner> inner = this.serviceClient().getWithResponse(datasetId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatasetDetailInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String datasetId) {
        this.serviceClient().delete(datasetId);
    }

    public Response<Void> deleteWithResponse(String datasetId, Context context) {
        return this.serviceClient().deleteWithResponse(datasetId, context);
    }

    public LongRunningOperationResult getOperation(String operationId) {
        LongRunningOperationResultInner inner = this.serviceClient().getOperation(operationId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LongRunningOperationResult> getOperationWithResponse(String operationId, Context context) {
        DatasetsGetOperationResponse inner = this.serviceClient().getOperationWithResponse(operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LongRunningOperationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private DatasetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
