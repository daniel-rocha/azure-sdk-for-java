// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.ConversionsClient;
import com.azure.maps.creator.fluent.models.ConversionListDetailInfoInner;
import com.azure.maps.creator.fluent.models.LongRunningOperationResultInner;
import com.azure.maps.creator.models.ConversionListDetailInfo;
import com.azure.maps.creator.models.Conversions;
import com.azure.maps.creator.models.ConversionsGetOperationResponse;
import com.azure.maps.creator.models.LongRunningOperationResult;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ConversionsImpl implements Conversions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConversionsImpl.class);

    private final ConversionsClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public ConversionsImpl(ConversionsClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LongRunningOperationResult convert(String udid, String outputOntology, String description) {
        LongRunningOperationResultInner inner = this.serviceClient().convert(udid, outputOntology, description);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult convert(String udid, String outputOntology) {
        LongRunningOperationResultInner inner = this.serviceClient().convert(udid, outputOntology);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult convert(String udid, String outputOntology, String description, Context context) {
        LongRunningOperationResultInner inner =
            this.serviceClient().convert(udid, outputOntology, description, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConversionListDetailInfo> list() {
        PagedIterable<ConversionListDetailInfoInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ConversionListDetailInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ConversionListDetailInfo> list(Context context) {
        PagedIterable<ConversionListDetailInfoInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ConversionListDetailInfoImpl(inner1, this.manager()));
    }

    public ConversionListDetailInfo get(String conversionId) {
        ConversionListDetailInfoInner inner = this.serviceClient().get(conversionId);
        if (inner != null) {
            return new ConversionListDetailInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConversionListDetailInfo> getWithResponse(String conversionId, Context context) {
        Response<ConversionListDetailInfoInner> inner = this.serviceClient().getWithResponse(conversionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConversionListDetailInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String conversionId) {
        this.serviceClient().delete(conversionId);
    }

    public Response<Void> deleteWithResponse(String conversionId, Context context) {
        return this.serviceClient().deleteWithResponse(conversionId, context);
    }

    public LongRunningOperationResult getOperation(String operationId) {
        LongRunningOperationResultInner inner = this.serviceClient().getOperation(operationId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LongRunningOperationResult> getOperationWithResponse(String operationId, Context context) {
        ConversionsGetOperationResponse inner = this.serviceClient().getOperationWithResponse(operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LongRunningOperationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ConversionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
