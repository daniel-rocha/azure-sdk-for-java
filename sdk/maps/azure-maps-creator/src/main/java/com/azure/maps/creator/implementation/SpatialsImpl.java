// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.SpatialsClient;
import com.azure.maps.creator.fluent.models.BufferResponseInner;
import com.azure.maps.creator.fluent.models.ClosestPointResponseInner;
import com.azure.maps.creator.fluent.models.GeofenceResponseInner;
import com.azure.maps.creator.fluent.models.GreatCircleDistanceResponseInner;
import com.azure.maps.creator.fluent.models.PointInPolygonResponseInner;
import com.azure.maps.creator.models.BufferRequestBody;
import com.azure.maps.creator.models.BufferResponse;
import com.azure.maps.creator.models.ClosestPointResponse;
import com.azure.maps.creator.models.GeoJsonFeatureCollection;
import com.azure.maps.creator.models.GeofenceMode;
import com.azure.maps.creator.models.GeofenceResponse;
import com.azure.maps.creator.models.GreatCircleDistanceResponse;
import com.azure.maps.creator.models.PointInPolygonResponse;
import com.azure.maps.creator.models.ResponseFormat;
import com.azure.maps.creator.models.Spatials;
import com.azure.maps.creator.models.SpatialsGetGeofenceResponse;
import com.azure.maps.creator.models.SpatialsPostGeofenceResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.OffsetDateTime;

public final class SpatialsImpl implements Spatials {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SpatialsImpl.class);

    private final SpatialsClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public SpatialsImpl(SpatialsClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public GeofenceResponse getGeofence(
        ResponseFormat format, String deviceId, String udid, float latitude, float longitude) {
        GeofenceResponseInner inner = this.serviceClient().getGeofence(format, deviceId, udid, latitude, longitude);
        if (inner != null) {
            return new GeofenceResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GeofenceResponse> getGeofenceWithResponse(
        ResponseFormat format,
        String deviceId,
        String udid,
        float latitude,
        float longitude,
        Float z,
        OffsetDateTime userTime,
        Float searchBuffer,
        Boolean isAsync,
        GeofenceMode mode,
        Context context) {
        SpatialsGetGeofenceResponse inner =
            this
                .serviceClient()
                .getGeofenceWithResponse(
                    format, deviceId, udid, latitude, longitude, z, userTime, searchBuffer, isAsync, mode, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GeofenceResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GeofenceResponse postGeofence(
        ResponseFormat format,
        String deviceId,
        float latitude,
        float longitude,
        GeoJsonFeatureCollection searchGeofenceRequestBody) {
        GeofenceResponseInner inner =
            this.serviceClient().postGeofence(format, deviceId, latitude, longitude, searchGeofenceRequestBody);
        if (inner != null) {
            return new GeofenceResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GeofenceResponse> postGeofenceWithResponse(
        ResponseFormat format,
        String deviceId,
        float latitude,
        float longitude,
        GeoJsonFeatureCollection searchGeofenceRequestBody,
        Float z,
        OffsetDateTime userTime,
        Float searchBuffer,
        Boolean isAsync,
        GeofenceMode mode,
        Context context) {
        SpatialsPostGeofenceResponse inner =
            this
                .serviceClient()
                .postGeofenceWithResponse(
                    format,
                    deviceId,
                    latitude,
                    longitude,
                    searchGeofenceRequestBody,
                    z,
                    userTime,
                    searchBuffer,
                    isAsync,
                    mode,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GeofenceResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BufferResponse postBuffer(ResponseFormat format, BufferRequestBody bufferRequestBody) {
        BufferResponseInner inner = this.serviceClient().postBuffer(format, bufferRequestBody);
        if (inner != null) {
            return new BufferResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BufferResponse> postBufferWithResponse(
        ResponseFormat format, BufferRequestBody bufferRequestBody, Context context) {
        Response<BufferResponseInner> inner =
            this.serviceClient().postBufferWithResponse(format, bufferRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BufferResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BufferResponse getBuffer(ResponseFormat format, String udid, String distances) {
        BufferResponseInner inner = this.serviceClient().getBuffer(format, udid, distances);
        if (inner != null) {
            return new BufferResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BufferResponse> getBufferWithResponse(
        ResponseFormat format, String udid, String distances, Context context) {
        Response<BufferResponseInner> inner =
            this.serviceClient().getBufferWithResponse(format, udid, distances, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BufferResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ClosestPointResponse postClosestPoint(
        ResponseFormat format, float latitude, float longitude, GeoJsonFeatureCollection closestPointRequestBody) {
        ClosestPointResponseInner inner =
            this.serviceClient().postClosestPoint(format, latitude, longitude, closestPointRequestBody);
        if (inner != null) {
            return new ClosestPointResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ClosestPointResponse> postClosestPointWithResponse(
        ResponseFormat format,
        float latitude,
        float longitude,
        GeoJsonFeatureCollection closestPointRequestBody,
        Integer numberOfClosestPoints,
        Context context) {
        Response<ClosestPointResponseInner> inner =
            this
                .serviceClient()
                .postClosestPointWithResponse(
                    format, latitude, longitude, closestPointRequestBody, numberOfClosestPoints, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ClosestPointResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ClosestPointResponse getClosestPoint(ResponseFormat format, String udid, float latitude, float longitude) {
        ClosestPointResponseInner inner = this.serviceClient().getClosestPoint(format, udid, latitude, longitude);
        if (inner != null) {
            return new ClosestPointResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ClosestPointResponse> getClosestPointWithResponse(
        ResponseFormat format,
        String udid,
        float latitude,
        float longitude,
        Integer numberOfClosestPoints,
        Context context) {
        Response<ClosestPointResponseInner> inner =
            this
                .serviceClient()
                .getClosestPointWithResponse(format, udid, latitude, longitude, numberOfClosestPoints, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ClosestPointResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PointInPolygonResponse postPointInPolygon(
        ResponseFormat format, float latitude, float longitude, GeoJsonFeatureCollection pointInPolygonRequestBody) {
        PointInPolygonResponseInner inner =
            this.serviceClient().postPointInPolygon(format, latitude, longitude, pointInPolygonRequestBody);
        if (inner != null) {
            return new PointInPolygonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PointInPolygonResponse> postPointInPolygonWithResponse(
        ResponseFormat format,
        float latitude,
        float longitude,
        GeoJsonFeatureCollection pointInPolygonRequestBody,
        Context context) {
        Response<PointInPolygonResponseInner> inner =
            this
                .serviceClient()
                .postPointInPolygonWithResponse(format, latitude, longitude, pointInPolygonRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PointInPolygonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PointInPolygonResponse getPointInPolygon(
        ResponseFormat format, String udid, float latitude, float longitude) {
        PointInPolygonResponseInner inner = this.serviceClient().getPointInPolygon(format, udid, latitude, longitude);
        if (inner != null) {
            return new PointInPolygonResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PointInPolygonResponse> getPointInPolygonWithResponse(
        ResponseFormat format, String udid, float latitude, float longitude, Context context) {
        Response<PointInPolygonResponseInner> inner =
            this.serviceClient().getPointInPolygonWithResponse(format, udid, latitude, longitude, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PointInPolygonResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GreatCircleDistanceResponse getGreatCircleDistance(ResponseFormat format, String query) {
        GreatCircleDistanceResponseInner inner = this.serviceClient().getGreatCircleDistance(format, query);
        if (inner != null) {
            return new GreatCircleDistanceResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GreatCircleDistanceResponse> getGreatCircleDistanceWithResponse(
        ResponseFormat format, String query, Context context) {
        Response<GreatCircleDistanceResponseInner> inner =
            this.serviceClient().getGreatCircleDistanceWithResponse(format, query, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GreatCircleDistanceResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private SpatialsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
