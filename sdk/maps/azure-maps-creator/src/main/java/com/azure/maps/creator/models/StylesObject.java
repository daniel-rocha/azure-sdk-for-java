// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The styles model. */
@Fluent
public final class StylesObject {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StylesObject.class);

    /*
     * An array of stateset styles. The style rule could be a numeric or string
     * or a boolean type style rule.  Refer to NumberRuleObject,
     * StringRuleObject and BooleanRuleObject definitions
     * [here](https://aka.ms/AzureMapsStatesetStylesObject).
     */
    @JsonProperty(value = "styles")
    private List<StyleObject> styles;

    /**
     * Get the styles property: An array of stateset styles. The style rule could be a numeric or string or a boolean
     * type style rule. Refer to NumberRuleObject, StringRuleObject and BooleanRuleObject definitions
     * [here](https://aka.ms/AzureMapsStatesetStylesObject).
     *
     * @return the styles value.
     */
    public List<StyleObject> styles() {
        return this.styles;
    }

    /**
     * Set the styles property: An array of stateset styles. The style rule could be a numeric or string or a boolean
     * type style rule. Refer to NumberRuleObject, StringRuleObject and BooleanRuleObject definitions
     * [here](https://aka.ms/AzureMapsStatesetStylesObject).
     *
     * @param styles the styles value to set.
     * @return the StylesObject object itself.
     */
    public StylesObject withStyles(List<StyleObject> styles) {
        this.styles = styles;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (styles() != null) {
            styles().forEach(e -> e.validate());
        }
    }
}
