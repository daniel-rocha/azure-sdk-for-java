// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Closest Point Summary object. */
@Fluent
public final class ClosestPointSummary {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ClosestPointSummary.class);

    /*
     * A location represented as a latitude and longitude
     */
    @JsonProperty(value = "sourcePoint")
    private SpatialCoordinate sourcePoint;

    /*
     * A unique data id (udid) for the uploaded content
     */
    @JsonProperty(value = "udid", access = JsonProperty.Access.WRITE_ONLY)
    private String udid;

    /*
     * Processing information
     */
    @JsonProperty(value = "information", access = JsonProperty.Access.WRITE_ONLY)
    private String information;

    /**
     * Get the sourcePoint property: A location represented as a latitude and longitude.
     *
     * @return the sourcePoint value.
     */
    public SpatialCoordinate sourcePoint() {
        return this.sourcePoint;
    }

    /**
     * Set the sourcePoint property: A location represented as a latitude and longitude.
     *
     * @param sourcePoint the sourcePoint value to set.
     * @return the ClosestPointSummary object itself.
     */
    public ClosestPointSummary withSourcePoint(SpatialCoordinate sourcePoint) {
        this.sourcePoint = sourcePoint;
        return this;
    }

    /**
     * Get the udid property: A unique data id (udid) for the uploaded content.
     *
     * @return the udid value.
     */
    public String udid() {
        return this.udid;
    }

    /**
     * Get the information property: Processing information.
     *
     * @return the information value.
     */
    public String information() {
        return this.information;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourcePoint() != null) {
            sourcePoint().validate();
        }
    }
}
