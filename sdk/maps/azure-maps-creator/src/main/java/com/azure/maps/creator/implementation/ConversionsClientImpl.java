// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.maps.creator.fluent.ConversionsClient;
import com.azure.maps.creator.fluent.models.ConversionListDetailInfoInner;
import com.azure.maps.creator.fluent.models.LongRunningOperationResultInner;
import com.azure.maps.creator.models.ConversionListResponse;
import com.azure.maps.creator.models.ConversionsGetOperationResponse;
import com.azure.maps.creator.models.Geography;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ConversionsClient. */
public final class ConversionsClientImpl implements ConversionsClient {
    private final ClientLogger logger = new ClientLogger(ConversionsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ConversionsService service;

    /** The service client containing this operation class. */
    private final CreatorClientImpl client;

    /**
     * Initializes an instance of ConversionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConversionsClientImpl(CreatorClientImpl client) {
        this.service =
            RestProxy.create(ConversionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CreatorClientConversions to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "CreatorClientConvers")
    private interface ConversionsService {
        @Headers({"Content-Type: application/json"})
        @Post("/conversions")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> convert(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("udid") String udid,
            @QueryParam("outputOntology") String outputOntology,
            @QueryParam("description") String description,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/conversions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConversionListResponse>> list(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/conversions/{conversionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConversionListDetailInfoInner>> get(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("conversionId") String conversionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/conversions/{conversionId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("conversionId") String conversionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/conversions/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ConversionsGetOperationResponse> getOperation(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConversionListResponse>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> convertWithResponseAsync(
        String udid, String outputOntology, String description) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (udid == null) {
            return Mono.error(new IllegalArgumentException("Parameter udid is required and cannot be null."));
        }
        if (outputOntology == null) {
            return Mono.error(new IllegalArgumentException("Parameter outputOntology is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .convert(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            udid,
                            outputOntology,
                            description,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> convertWithResponseAsync(
        String udid, String outputOntology, String description, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (udid == null) {
            return Mono.error(new IllegalArgumentException("Parameter udid is required and cannot be null."));
        }
        if (outputOntology == null) {
            return Mono.error(new IllegalArgumentException("Parameter outputOntology is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .convert(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                udid,
                outputOntology,
                description,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<LongRunningOperationResultInner>, LongRunningOperationResultInner> beginConvertAsync(
        String udid, String outputOntology, String description) {
        Mono<Response<Flux<ByteBuffer>>> mono = convertWithResponseAsync(udid, outputOntology, description);
        return this
            .client
            .<LongRunningOperationResultInner, LongRunningOperationResultInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                LongRunningOperationResultInner.class,
                LongRunningOperationResultInner.class,
                Context.NONE);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<LongRunningOperationResultInner>, LongRunningOperationResultInner> beginConvertAsync(
        String udid, String outputOntology, String description, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = convertWithResponseAsync(udid, outputOntology, description, context);
        return this
            .client
            .<LongRunningOperationResultInner, LongRunningOperationResultInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                LongRunningOperationResultInner.class,
                LongRunningOperationResultInner.class,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<LongRunningOperationResultInner>, LongRunningOperationResultInner> beginConvert(
        String udid, String outputOntology, String description) {
        return beginConvertAsync(udid, outputOntology, description).getSyncPoller();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<LongRunningOperationResultInner>, LongRunningOperationResultInner> beginConvert(
        String udid, String outputOntology, String description, Context context) {
        return beginConvertAsync(udid, outputOntology, description, context).getSyncPoller();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LongRunningOperationResultInner> convertAsync(String udid, String outputOntology, String description) {
        return beginConvertAsync(udid, outputOntology, description)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LongRunningOperationResultInner> convertAsync(String udid, String outputOntology) {
        final String description = null;
        return beginConvertAsync(udid, outputOntology, description)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LongRunningOperationResultInner> convertAsync(
        String udid, String outputOntology, String description, Context context) {
        return beginConvertAsync(udid, outputOntology, description, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperationResultInner convert(String udid, String outputOntology, String description) {
        return convertAsync(udid, outputOntology, description).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperationResultInner convert(String udid, String outputOntology) {
        final String description = null;
        return convertAsync(udid, outputOntology, description).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
     * Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
     * Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data
     * Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data
     * Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
     *
     * <p>## Convert DWG package
     *
     * <p>The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Debug DWG package issues
     *
     * <p>During the Conversion process, if there are any issues with the DWG package [errors and
     * warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
     * visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion
     * operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the
     * *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The
     * *diagnostic package* location can be found in the properties section of the conversion operation status response
     * and looks like the following:
     *
     * <p>```json { "properties": { "diagnosticPackageLocation":
     * "https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0" } } ```
     *
     * <p>The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the
     * `diagnosticPackageLocation`. For more details on how to use the tool to visualize and diagnose all the errors and
     * warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
     *
     * <p>A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as
     * *failed* if any errors are encountered.
     *
     * @param udid The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param outputOntology Output ontology version. "facility-2.0" is the only supported value at this time. Please
     *     refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more
     *     information about Azure Maps Creator ontologies.
     * @param description User provided description of the content being converted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperationResultInner convert(
        String udid, String outputOntology, String description, Context context) {
        return convertAsync(udid, outputOntology, description, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConversionListDetailInfoInner>> listSinglePageAsync() {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.list(this.client.getGeography(), this.client.getXMsClientId(), apiVersion, accept, context))
            .<PagedResponse<ConversionListDetailInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().conversions(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConversionListDetailInfoInner>> listSinglePageAsync(Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getGeography(), this.client.getXMsClientId(), apiVersion, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().conversions(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConversionListDetailInfoInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConversionListDetailInfoInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConversionListDetailInfoInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all successful data conversions submitted previously using the
     * [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all successful conversions you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
     *
     * <p>Here is a sample response returning the details of two successful conversion requests:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "conversions": [ { "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d", "udid":
     * "31838736-8b84-11ea-bc55-0242ac130003", "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided
     * description.", "featureCounts": { "DIR": 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } }, {
     * "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003", "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
     * "created": "5/19/2020 9:00:00 AM +00:00", "description": "User provided description.", "featureCounts": { "DIR":
     * 1, "LVL": 3, "FCL": 1, "UNIT": 150, "CTG": 8, "AEL": 0, "OPN": 10 } } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConversionListDetailInfoInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the conversion requests.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConversionListDetailInfoInner>> getWithResponseAsync(String conversionId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (conversionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter conversionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            conversionId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the conversion requests.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConversionListDetailInfoInner>> getWithResponseAsync(String conversionId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (conversionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter conversionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getGeography(), this.client.getXMsClientId(), apiVersion, conversionId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the conversion requests.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConversionListDetailInfoInner> getAsync(String conversionId) {
        return getWithResponseAsync(conversionId)
            .flatMap(
                (Response<ConversionListDetailInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the conversion requests.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConversionListDetailInfoInner get(String conversionId) {
        return getAsync(conversionId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the conversion requests.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConversionListDetailInfoInner> getWithResponse(String conversionId, Context context) {
        return getWithResponseAsync(conversionId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete any data conversions created previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your conversion data you will issue a `DELETE` request where the path will contain the
     * `conversionId` of the data to delete.
     *
     * <p>### Conversion Delete Response
     *
     * <p>The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
     * resources were deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if no
     * resource associated with the passed-in `conversionId` is found.
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String conversionId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (conversionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter conversionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            conversionId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete any data conversions created previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your conversion data you will issue a `DELETE` request where the path will contain the
     * `conversionId` of the data to delete.
     *
     * <p>### Conversion Delete Response
     *
     * <p>The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
     * resources were deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if no
     * resource associated with the passed-in `conversionId` is found.
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String conversionId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (conversionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter conversionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, conversionId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete any data conversions created previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your conversion data you will issue a `DELETE` request where the path will contain the
     * `conversionId` of the data to delete.
     *
     * <p>### Conversion Delete Response
     *
     * <p>The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
     * resources were deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if no
     * resource associated with the passed-in `conversionId` is found.
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String conversionId) {
        return deleteWithResponseAsync(conversionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete any data conversions created previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your conversion data you will issue a `DELETE` request where the path will contain the
     * `conversionId` of the data to delete.
     *
     * <p>### Conversion Delete Response
     *
     * <p>The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
     * resources were deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if no
     * resource associated with the passed-in `conversionId` is found.
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String conversionId) {
        deleteAsync(conversionId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete any data conversions created previously using the [Conversion
     * API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your conversion data you will issue a `DELETE` request where the path will contain the
     * `conversionId` of the data to delete.
     *
     * <p>### Conversion Delete Response
     *
     * <p>The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
     * resources were deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if no
     * resource associated with the passed-in `conversionId` is found.
     *
     * @param conversionId The conversion id for the content. The `conversionId` must have been obtained from a
     *     successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String conversionId, Context context) {
        return deleteWithResponseAsync(conversionId, context).block();
    }

    /**
     * This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with
     * no extra headers - followed by an http200 with Resource-Location header once successfully completed.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConversionsGetOperationResponse> getOperationWithResponseAsync(String operationId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getOperation(this.client.getGeography(), apiVersion, operationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with
     * no extra headers - followed by an http200 with Resource-Location header once successfully completed.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConversionsGetOperationResponse> getOperationWithResponseAsync(String operationId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getOperation(this.client.getGeography(), apiVersion, operationId, accept, context);
    }

    /**
     * This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with
     * no extra headers - followed by an http200 with Resource-Location header once successfully completed.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LongRunningOperationResultInner> getOperationAsync(String operationId) {
        return getOperationWithResponseAsync(operationId)
            .flatMap(
                (ConversionsGetOperationResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with
     * no extra headers - followed by an http200 with Resource-Location header once successfully completed.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperationResultInner getOperation(String operationId) {
        return getOperationAsync(operationId).block();
    }

    /**
     * This path will be obtained from a call to POST /conversions. While in progress, an http200 will be returned with
     * no extra headers - followed by an http200 with Resource-Location header once successfully completed.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConversionsGetOperationResponse getOperationWithResponse(String operationId, Context context) {
        return getOperationWithResponseAsync(operationId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConversionListDetailInfoInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listNext(nextLink, this.client.getGeography(), this.client.getXMsClientId(), accept, context))
            .<PagedResponse<ConversionListDetailInfoInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().conversions(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Conversion List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConversionListDetailInfoInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getGeography(), this.client.getXMsClientId(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().conversions(),
                        res.getValue().nextLink(),
                        null));
    }
}
