// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Summary object. */
@Fluent
public final class GreatCircleDistanceResponseSummary {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GreatCircleDistanceResponseSummary.class);

    /*
     * A location represented as a latitude and longitude
     */
    @JsonProperty(value = "sourcePoint")
    private SpatialCoordinate sourcePoint;

    /*
     * A location represented as a latitude and longitude
     */
    @JsonProperty(value = "targetPoint")
    private SpatialCoordinate targetPoint;

    /**
     * Get the sourcePoint property: A location represented as a latitude and longitude.
     *
     * @return the sourcePoint value.
     */
    public SpatialCoordinate sourcePoint() {
        return this.sourcePoint;
    }

    /**
     * Set the sourcePoint property: A location represented as a latitude and longitude.
     *
     * @param sourcePoint the sourcePoint value to set.
     * @return the GreatCircleDistanceResponseSummary object itself.
     */
    public GreatCircleDistanceResponseSummary withSourcePoint(SpatialCoordinate sourcePoint) {
        this.sourcePoint = sourcePoint;
        return this;
    }

    /**
     * Get the targetPoint property: A location represented as a latitude and longitude.
     *
     * @return the targetPoint value.
     */
    public SpatialCoordinate targetPoint() {
        return this.targetPoint;
    }

    /**
     * Set the targetPoint property: A location represented as a latitude and longitude.
     *
     * @param targetPoint the targetPoint value to set.
     * @return the GreatCircleDistanceResponseSummary object itself.
     */
    public GreatCircleDistanceResponseSummary withTargetPoint(SpatialCoordinate targetPoint) {
        this.targetPoint = targetPoint;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourcePoint() != null) {
            sourcePoint().validate();
        }
        if (targetPoint() != null) {
            targetPoint().validate();
        }
    }
}
