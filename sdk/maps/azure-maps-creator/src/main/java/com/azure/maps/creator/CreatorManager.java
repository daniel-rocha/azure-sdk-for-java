// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.CreatorClient;
import com.azure.maps.creator.implementation.AliasImpl;
import com.azure.maps.creator.implementation.ConversionsImpl;
import com.azure.maps.creator.implementation.CreatorClientBuilder;
import com.azure.maps.creator.implementation.DatasImpl;
import com.azure.maps.creator.implementation.DatasetsImpl;
import com.azure.maps.creator.implementation.FeatureStatesImpl;
import com.azure.maps.creator.implementation.SpatialsImpl;
import com.azure.maps.creator.implementation.TilesetsImpl;
import com.azure.maps.creator.implementation.WfsImpl;
import com.azure.maps.creator.models.Alias;
import com.azure.maps.creator.models.Conversions;
import com.azure.maps.creator.models.Datas;
import com.azure.maps.creator.models.Datasets;
import com.azure.maps.creator.models.FeatureStates;
import com.azure.maps.creator.models.Spatials;
import com.azure.maps.creator.models.Tilesets;
import com.azure.maps.creator.models.Wfs;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to CreatorManager. APIs for managing aliases in Azure Maps. */
public final class CreatorManager {
    private Alias alias;

    private Datas datas;

    private Datasets datasets;

    private Conversions conversions;

    private FeatureStates featureStates;

    private Spatials spatials;

    private Tilesets tilesets;

    private Wfs wfs;

    private final CreatorClient clientObject;

    private CreatorManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new CreatorClientBuilder().pipeline(httpPipeline).defaultPollInterval(defaultPollInterval).buildClient();
    }

    /**
     * Creates an instance of Creator service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Creator service API instance.
     */
    public static CreatorManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create CreatorManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new CreatorManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Creator service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Creator service API instance.
         */
        public CreatorManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.maps.creator")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new CreatorManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of Alias. */
    public Alias alias() {
        if (this.alias == null) {
            this.alias = new AliasImpl(clientObject.getAlias(), this);
        }
        return alias;
    }

    /** @return Resource collection API of Datas. */
    public Datas datas() {
        if (this.datas == null) {
            this.datas = new DatasImpl(clientObject.getDatas(), this);
        }
        return datas;
    }

    /** @return Resource collection API of Datasets. */
    public Datasets datasets() {
        if (this.datasets == null) {
            this.datasets = new DatasetsImpl(clientObject.getDatasets(), this);
        }
        return datasets;
    }

    /** @return Resource collection API of Conversions. */
    public Conversions conversions() {
        if (this.conversions == null) {
            this.conversions = new ConversionsImpl(clientObject.getConversions(), this);
        }
        return conversions;
    }

    /** @return Resource collection API of FeatureStates. */
    public FeatureStates featureStates() {
        if (this.featureStates == null) {
            this.featureStates = new FeatureStatesImpl(clientObject.getFeatureStates(), this);
        }
        return featureStates;
    }

    /** @return Resource collection API of Spatials. */
    public Spatials spatials() {
        if (this.spatials == null) {
            this.spatials = new SpatialsImpl(clientObject.getSpatials(), this);
        }
        return spatials;
    }

    /** @return Resource collection API of Tilesets. */
    public Tilesets tilesets() {
        if (this.tilesets == null) {
            this.tilesets = new TilesetsImpl(clientObject.getTilesets(), this);
        }
        return tilesets;
    }

    /** @return Resource collection API of Wfs. */
    public Wfs wfs() {
        if (this.wfs == null) {
            this.wfs = new WfsImpl(clientObject.getWfs(), this);
        }
        return wfs;
    }

    /**
     * @return Wrapped service client CreatorClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public CreatorClient serviceClient() {
        return this.clientObject;
    }
}
