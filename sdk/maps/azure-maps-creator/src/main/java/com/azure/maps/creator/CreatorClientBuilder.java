// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.maps.creator.implementation.CreatorClientImpl;
import com.azure.maps.creator.models.Geography;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** A builder for creating a new instance of the CreatorClient type. */
@ServiceClientBuilder(
        serviceClients = {
            AliasClient.class,
            DataClient.class,
            DatasetClient.class,
            ConversionClient.class,
            FeatureStateClient.class,
            SpatialClient.class,
            TilesetClient.class,
            WFSClient.class,
            AliasAsyncClient.class,
            DataAsyncClient.class,
            DatasetAsyncClient.class,
            ConversionAsyncClient.class,
            FeatureStateAsyncClient.class,
            SpatialAsyncClient.class,
            TilesetAsyncClient.class,
            WFSAsyncClient.class
        })
public final class CreatorClientBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    static final String[] DEFAULT_SCOPES = new String[] {"https://atlas.microsoft.com/.default"};

    private final Map<String, String> properties = new HashMap<>();

    /** Create an instance of the CreatorClientBuilder. */
    public CreatorClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * Specifies which account is intended for usage in conjunction with the
     * Azure AD security model.  It represents a unique ID for the Azure Maps
     * account and can be retrieved from the Azure Maps management  plane
     * Account API. To use Azure AD security in Azure Maps see the following
     * [articles](https://aka.ms/amauthdetails) for guidance.
     */
    private String clientId;

    /**
     * Sets Specifies which account is intended for usage in conjunction with the Azure AD security model. It represents
     * a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane Account API. To
     * use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
     *
     * @param clientId the clientId value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder clientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /*
     * This parameter specifies where the Azure Maps Creator resource is
     * located.  Valid values are us and eu.
     */
    private Geography geography;

    /**
     * Sets This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
     *
     * @param geography the geography value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder geography(Geography geography) {
        this.geography = geography;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The serializer to serialize an object into a string
     */
    private SerializerAdapter serializerAdapter;

    /**
     * Sets The serializer to serialize an object into a string.
     *
     * @param serializerAdapter the serializerAdapter value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder serializerAdapter(SerializerAdapter serializerAdapter) {
        this.serializerAdapter = serializerAdapter;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service
     * client.
     */
    private Configuration configuration;

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /*
     * The client options such as application ID and custom headers to set on a
     * request.
     */
    private ClientOptions clientOptions;

    /**
     * Sets The client options such as application ID and custom headers to set on a request.
     *
     * @param clientOptions the clientOptions value.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the CreatorClientBuilder.
     */
    public CreatorClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /**
     * Builds an instance of CreatorClientImpl with the provided parameters.
     *
     * @return an instance of CreatorClientImpl.
     */
    private CreatorClientImpl buildInnerClient() {
        if (geography == null) {
            this.geography = Geography.US;
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializerAdapter == null) {
            this.serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();
        }
        CreatorClientImpl client = new CreatorClientImpl(pipeline, serializerAdapter, clientId, geography);
        return client;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        if (clientOptions == null) {
            clientOptions = new ClientOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(clientOptions, httpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        HttpHeaders headers = new HttpHeaders();
        clientOptions.getHeaders().forEach(header -> headers.set(header.getName(), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of AliasAsyncClient async client.
     *
     * @return an instance of AliasAsyncClient.
     */
    public AliasAsyncClient buildAliasAsyncClient() {
        return new AliasAsyncClient(buildInnerClient().getAliasOperations());
    }

    /**
     * Builds an instance of DataAsyncClient async client.
     *
     * @return an instance of DataAsyncClient.
     */
    public DataAsyncClient buildDataAsyncClient() {
        return new DataAsyncClient(buildInnerClient().getDatas());
    }

    /**
     * Builds an instance of DatasetAsyncClient async client.
     *
     * @return an instance of DatasetAsyncClient.
     */
    public DatasetAsyncClient buildDatasetAsyncClient() {
        return new DatasetAsyncClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of ConversionAsyncClient async client.
     *
     * @return an instance of ConversionAsyncClient.
     */
    public ConversionAsyncClient buildConversionAsyncClient() {
        return new ConversionAsyncClient(buildInnerClient().getConversions());
    }

    /**
     * Builds an instance of FeatureStateAsyncClient async client.
     *
     * @return an instance of FeatureStateAsyncClient.
     */
    public FeatureStateAsyncClient buildFeatureStateAsyncClient() {
        return new FeatureStateAsyncClient(buildInnerClient().getFeatureStates());
    }

    /**
     * Builds an instance of SpatialAsyncClient async client.
     *
     * @return an instance of SpatialAsyncClient.
     */
    public SpatialAsyncClient buildSpatialAsyncClient() {
        return new SpatialAsyncClient(buildInnerClient().getSpatials());
    }

    /**
     * Builds an instance of TilesetAsyncClient async client.
     *
     * @return an instance of TilesetAsyncClient.
     */
    public TilesetAsyncClient buildTilesetAsyncClient() {
        return new TilesetAsyncClient(buildInnerClient().getTilesets());
    }

    /**
     * Builds an instance of WFSAsyncClient async client.
     *
     * @return an instance of WFSAsyncClient.
     */
    public WFSAsyncClient buildWFSAsyncClient() {
        return new WFSAsyncClient(buildInnerClient().getWFS());
    }

    /**
     * Builds an instance of AliasClient sync client.
     *
     * @return an instance of AliasClient.
     */
    public AliasClient buildAliasClient() {
        return new AliasClient(buildInnerClient().getAliasOperations());
    }

    /**
     * Builds an instance of DataClient sync client.
     *
     * @return an instance of DataClient.
     */
    public DataClient buildDataClient() {
        return new DataClient(buildInnerClient().getDatas());
    }

    /**
     * Builds an instance of DatasetClient sync client.
     *
     * @return an instance of DatasetClient.
     */
    public DatasetClient buildDatasetClient() {
        return new DatasetClient(buildInnerClient().getDatasets());
    }

    /**
     * Builds an instance of ConversionClient sync client.
     *
     * @return an instance of ConversionClient.
     */
    public ConversionClient buildConversionClient() {
        return new ConversionClient(buildInnerClient().getConversions());
    }

    /**
     * Builds an instance of FeatureStateClient sync client.
     *
     * @return an instance of FeatureStateClient.
     */
    public FeatureStateClient buildFeatureStateClient() {
        return new FeatureStateClient(buildInnerClient().getFeatureStates());
    }

    /**
     * Builds an instance of SpatialClient sync client.
     *
     * @return an instance of SpatialClient.
     */
    public SpatialClient buildSpatialClient() {
        return new SpatialClient(buildInnerClient().getSpatials());
    }

    /**
     * Builds an instance of TilesetClient sync client.
     *
     * @return an instance of TilesetClient.
     */
    public TilesetClient buildTilesetClient() {
        return new TilesetClient(buildInnerClient().getTilesets());
    }

    /**
     * Builds an instance of WFSClient sync client.
     *
     * @return an instance of WFSClient.
     */
    public WFSClient buildWFSClient() {
        return new WFSClient(buildInnerClient().getWFS());
    }
}
