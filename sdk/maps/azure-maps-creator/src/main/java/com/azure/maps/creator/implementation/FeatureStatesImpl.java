// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.FeatureStatesClient;
import com.azure.maps.creator.fluent.models.FeatureStatesStructureInner;
import com.azure.maps.creator.fluent.models.StatesetCreatedResponseInner;
import com.azure.maps.creator.fluent.models.StatesetGetResponseInner;
import com.azure.maps.creator.models.FeatureStates;
import com.azure.maps.creator.models.FeatureStatesStructure;
import com.azure.maps.creator.models.StatesetCreatedResponse;
import com.azure.maps.creator.models.StatesetGetResponse;
import com.azure.maps.creator.models.StatesetInfoObject;
import com.azure.maps.creator.models.StylesObject;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class FeatureStatesImpl implements FeatureStates {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FeatureStatesImpl.class);

    private final FeatureStatesClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public FeatureStatesImpl(FeatureStatesClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public StatesetCreatedResponse createStateset(String datasetId, StylesObject statesetCreateRequestBody) {
        StatesetCreatedResponseInner inner = this.serviceClient().createStateset(datasetId, statesetCreateRequestBody);
        if (inner != null) {
            return new StatesetCreatedResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StatesetCreatedResponse> createStatesetWithResponse(
        String datasetId, StylesObject statesetCreateRequestBody, String description, Context context) {
        Response<StatesetCreatedResponseInner> inner =
            this.serviceClient().createStatesetWithResponse(datasetId, statesetCreateRequestBody, description, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StatesetCreatedResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<StatesetInfoObject> listStateset() {
        return this.serviceClient().listStateset();
    }

    public PagedIterable<StatesetInfoObject> listStateset(Context context) {
        return this.serviceClient().listStateset(context);
    }

    public void putStateset(String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        this.serviceClient().putStateset(statesetId, statesetStyleUpdateRequestBody);
    }

    public Response<Void> putStatesetWithResponse(
        String statesetId, StylesObject statesetStyleUpdateRequestBody, Context context) {
        return this.serviceClient().putStatesetWithResponse(statesetId, statesetStyleUpdateRequestBody, context);
    }

    public void deleteStateset(String statesetId) {
        this.serviceClient().deleteStateset(statesetId);
    }

    public Response<Void> deleteStatesetWithResponse(String statesetId, Context context) {
        return this.serviceClient().deleteStatesetWithResponse(statesetId, context);
    }

    public StatesetGetResponse getStateset(String statesetId) {
        StatesetGetResponseInner inner = this.serviceClient().getStateset(statesetId);
        if (inner != null) {
            return new StatesetGetResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StatesetGetResponse> getStatesetWithResponse(String statesetId, Context context) {
        Response<StatesetGetResponseInner> inner = this.serviceClient().getStatesetWithResponse(statesetId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StatesetGetResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void updateStates(
        String statesetId, String featureId, FeatureStatesStructureInner featureStateUpdateRequestBody) {
        this.serviceClient().updateStates(statesetId, featureId, featureStateUpdateRequestBody);
    }

    public Response<Void> updateStatesWithResponse(
        String statesetId,
        String featureId,
        FeatureStatesStructureInner featureStateUpdateRequestBody,
        Context context) {
        return this
            .serviceClient()
            .updateStatesWithResponse(statesetId, featureId, featureStateUpdateRequestBody, context);
    }

    public void deleteState(String statesetId, String featureId, String stateKeyName) {
        this.serviceClient().deleteState(statesetId, featureId, stateKeyName);
    }

    public Response<Void> deleteStateWithResponse(
        String statesetId, String featureId, String stateKeyName, Context context) {
        return this.serviceClient().deleteStateWithResponse(statesetId, featureId, stateKeyName, context);
    }

    public FeatureStatesStructure getStates(String statesetId, String featureId) {
        FeatureStatesStructureInner inner = this.serviceClient().getStates(statesetId, featureId);
        if (inner != null) {
            return new FeatureStatesStructureImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FeatureStatesStructure> getStatesWithResponse(
        String statesetId, String featureId, Context context) {
        Response<FeatureStatesStructureInner> inner =
            this.serviceClient().getStatesWithResponse(statesetId, featureId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FeatureStatesStructureImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private FeatureStatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
