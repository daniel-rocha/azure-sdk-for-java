// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.models.DatasetSources;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Detail information for the dataset. */
@Fluent
public final class DatasetDetailInfoInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatasetDetailInfoInner.class);

    /*
     * The created timestamp for the dataset.
     */
    @JsonProperty(value = "created", access = JsonProperty.Access.WRITE_ONLY)
    private String created;

    /*
     * The id for the dataset.
     */
    @JsonProperty(value = "datasetId", access = JsonProperty.Access.WRITE_ONLY)
    private String datasetId;

    /*
     * The ontology version of this dataset.
     */
    @JsonProperty(value = "ontology", access = JsonProperty.Access.WRITE_ONLY)
    private String ontology;

    /*
     * The description for the dataset.
     */
    @JsonProperty(value = "description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * Information about the details of the create request for the dataset.
     */
    @JsonProperty(value = "datasetSources")
    private DatasetSources datasetSources;

    /*
     * The feature counts for the dataset.
     */
    @JsonProperty(value = "featureCounts", access = JsonProperty.Access.WRITE_ONLY)
    private Object featureCounts;

    /**
     * Get the created property: The created timestamp for the dataset.
     *
     * @return the created value.
     */
    public String created() {
        return this.created;
    }

    /**
     * Get the datasetId property: The id for the dataset.
     *
     * @return the datasetId value.
     */
    public String datasetId() {
        return this.datasetId;
    }

    /**
     * Get the ontology property: The ontology version of this dataset.
     *
     * @return the ontology value.
     */
    public String ontology() {
        return this.ontology;
    }

    /**
     * Get the description property: The description for the dataset.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the datasetSources property: Information about the details of the create request for the dataset.
     *
     * @return the datasetSources value.
     */
    public DatasetSources datasetSources() {
        return this.datasetSources;
    }

    /**
     * Set the datasetSources property: Information about the details of the create request for the dataset.
     *
     * @param datasetSources the datasetSources value to set.
     * @return the DatasetDetailInfoInner object itself.
     */
    public DatasetDetailInfoInner withDatasetSources(DatasetSources datasetSources) {
        this.datasetSources = datasetSources;
        return this;
    }

    /**
     * Get the featureCounts property: The feature counts for the dataset.
     *
     * @return the featureCounts value.
     */
    public Object featureCounts() {
        return this.featureCounts;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datasetSources() != null) {
            datasetSources().validate();
        }
    }
}
