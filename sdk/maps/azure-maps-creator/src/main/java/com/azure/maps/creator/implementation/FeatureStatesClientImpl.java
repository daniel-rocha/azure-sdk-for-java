// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.FeatureStatesClient;
import com.azure.maps.creator.fluent.models.FeatureStatesStructureInner;
import com.azure.maps.creator.fluent.models.StatesetCreatedResponseInner;
import com.azure.maps.creator.fluent.models.StatesetGetResponseInner;
import com.azure.maps.creator.models.Geography;
import com.azure.maps.creator.models.StatesetInfoObject;
import com.azure.maps.creator.models.StatesetListResponse;
import com.azure.maps.creator.models.StylesObject;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FeatureStatesClient. */
public final class FeatureStatesClientImpl implements FeatureStatesClient {
    private final ClientLogger logger = new ClientLogger(FeatureStatesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final FeatureStatesService service;

    /** The service client containing this operation class. */
    private final CreatorClientImpl client;

    /**
     * Initializes an instance of FeatureStatesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FeatureStatesClientImpl(CreatorClientImpl client) {
        this.service =
            RestProxy.create(FeatureStatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CreatorClientFeatureStates to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "CreatorClientFeature")
    private interface FeatureStatesService {
        @Headers({"Content-Type: application/json"})
        @Post("/featureStateSets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StatesetCreatedResponseInner>> createStateset(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("datasetId") String datasetId,
            @QueryParam("description") String description,
            @BodyParam("application/json") StylesObject statesetCreateRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/featureStateSets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StatesetListResponse>> listStateset(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/featureStateSets/{statesetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> putStateset(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @BodyParam("application/json") StylesObject statesetStyleUpdateRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/featureStateSets/{statesetId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteStateset(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/featureStateSets/{statesetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StatesetGetResponseInner>> getStateset(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> updateStates(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @PathParam("featureId") String featureId,
            @BodyParam("application/json") FeatureStatesStructureInner featureStateUpdateRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteState(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @PathParam("featureId") String featureId,
            @QueryParam("stateKeyName") String stateKeyName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FeatureStatesStructureInner>> getStates(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("statesetId") String statesetId,
            @PathParam("featureId") String featureId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StatesetListResponse>> listStatesetNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("geography") Geography geography,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StatesetCreatedResponseInner>> createStatesetWithResponseAsync(
        String datasetId, StylesObject statesetCreateRequestBody, String description) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (statesetCreateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter statesetCreateRequestBody is required and cannot be null."));
        } else {
            statesetCreateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createStateset(
                            this.client.getGeography(),
                            apiVersion,
                            datasetId,
                            description,
                            statesetCreateRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StatesetCreatedResponseInner>> createStatesetWithResponseAsync(
        String datasetId, StylesObject statesetCreateRequestBody, String description, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (statesetCreateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter statesetCreateRequestBody is required and cannot be null."));
        } else {
            statesetCreateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createStateset(
                this.client.getGeography(),
                apiVersion,
                datasetId,
                description,
                statesetCreateRequestBody,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StatesetCreatedResponseInner> createStatesetAsync(
        String datasetId, StylesObject statesetCreateRequestBody, String description) {
        return createStatesetWithResponseAsync(datasetId, statesetCreateRequestBody, description)
            .flatMap(
                (Response<StatesetCreatedResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StatesetCreatedResponseInner> createStatesetAsync(
        String datasetId, StylesObject statesetCreateRequestBody) {
        final String description = null;
        return createStatesetWithResponseAsync(datasetId, statesetCreateRequestBody, description)
            .flatMap(
                (Response<StatesetCreatedResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatesetCreatedResponseInner createStateset(String datasetId, StylesObject statesetCreateRequestBody) {
        final String description = null;
        return createStatesetAsync(datasetId, statesetCreateRequestBody, description).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StatesetCreatedResponseInner> createStatesetWithResponse(
        String datasetId, StylesObject statesetCreateRequestBody, String description, Context context) {
        return createStatesetWithResponseAsync(datasetId, statesetCreateRequestBody, description, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StatesetInfoObject>> listStatesetSinglePageAsync() {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listStateset(this.client.getGeography(), apiVersion, accept, context))
            .<PagedResponse<StatesetInfoObject>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().statesets(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StatesetInfoObject>> listStatesetSinglePageAsync(Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listStateset(this.client.getGeography(), apiVersion, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().statesets(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StatesetInfoObject> listStatesetAsync() {
        return new PagedFlux<>(
            () -> listStatesetSinglePageAsync(), nextLink -> listStatesetNextSinglePageAsync(nextLink));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StatesetInfoObject> listStatesetAsync(Context context) {
        return new PagedFlux<>(
            () -> listStatesetSinglePageAsync(context), nextLink -> listStatesetNextSinglePageAsync(nextLink, context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StatesetInfoObject> listStateset() {
        return new PagedIterable<>(listStatesetAsync());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StatesetInfoObject> listStateset(Context context) {
        return new PagedIterable<>(listStatesetAsync(context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> putStatesetWithResponseAsync(
        String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (statesetStyleUpdateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter statesetStyleUpdateRequestBody is required and cannot be null."));
        } else {
            statesetStyleUpdateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .putStateset(
                            this.client.getGeography(),
                            apiVersion,
                            statesetId,
                            statesetStyleUpdateRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> putStatesetWithResponseAsync(
        String statesetId, StylesObject statesetStyleUpdateRequestBody, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (statesetStyleUpdateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter statesetStyleUpdateRequestBody is required and cannot be null."));
        } else {
            statesetStyleUpdateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .putStateset(
                this.client.getGeography(), apiVersion, statesetId, statesetStyleUpdateRequestBody, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> putStatesetAsync(String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        return putStatesetWithResponseAsync(statesetId, statesetStyleUpdateRequestBody)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putStateset(String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        putStatesetAsync(statesetId, statesetStyleUpdateRequestBody).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putStatesetWithResponse(
        String statesetId, StylesObject statesetStyleUpdateRequestBody, Context context) {
        return putStatesetWithResponseAsync(statesetId, statesetStyleUpdateRequestBody, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteStatesetWithResponseAsync(String statesetId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.deleteStateset(this.client.getGeography(), apiVersion, statesetId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteStatesetWithResponseAsync(String statesetId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteStateset(this.client.getGeography(), apiVersion, statesetId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteStatesetAsync(String statesetId) {
        return deleteStatesetWithResponseAsync(statesetId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteStateset(String statesetId) {
        deleteStatesetAsync(statesetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteStatesetWithResponse(String statesetId, Context context) {
        return deleteStatesetWithResponseAsync(statesetId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StatesetGetResponseInner>> getStatesetWithResponseAsync(String statesetId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getStateset(this.client.getGeography(), apiVersion, statesetId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StatesetGetResponseInner>> getStatesetWithResponseAsync(String statesetId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getStateset(this.client.getGeography(), apiVersion, statesetId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StatesetGetResponseInner> getStatesetAsync(String statesetId) {
        return getStatesetWithResponseAsync(statesetId)
            .flatMap(
                (Response<StatesetGetResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatesetGetResponseInner getStateset(String statesetId) {
        return getStatesetAsync(statesetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StatesetGetResponseInner> getStatesetWithResponse(String statesetId, Context context) {
        return getStatesetWithResponseAsync(statesetId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateStatesWithResponseAsync(
        String statesetId, String featureId, FeatureStatesStructureInner featureStateUpdateRequestBody) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        if (featureStateUpdateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter featureStateUpdateRequestBody is required and cannot be null."));
        } else {
            featureStateUpdateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateStates(
                            this.client.getGeography(),
                            apiVersion,
                            statesetId,
                            featureId,
                            featureStateUpdateRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateStatesWithResponseAsync(
        String statesetId,
        String featureId,
        FeatureStatesStructureInner featureStateUpdateRequestBody,
        Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        if (featureStateUpdateRequestBody == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter featureStateUpdateRequestBody is required and cannot be null."));
        } else {
            featureStateUpdateRequestBody.validate();
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateStates(
                this.client.getGeography(),
                apiVersion,
                statesetId,
                featureId,
                featureStateUpdateRequestBody,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> updateStatesAsync(
        String statesetId, String featureId, FeatureStatesStructureInner featureStateUpdateRequestBody) {
        return updateStatesWithResponseAsync(statesetId, featureId, featureStateUpdateRequestBody)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateStates(
        String statesetId, String featureId, FeatureStatesStructureInner featureStateUpdateRequestBody) {
        updateStatesAsync(statesetId, featureId, featureStateUpdateRequestBody).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateStatesWithResponse(
        String statesetId,
        String featureId,
        FeatureStatesStructureInner featureStateUpdateRequestBody,
        Context context) {
        return updateStatesWithResponseAsync(statesetId, featureId, featureStateUpdateRequestBody, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteStateWithResponseAsync(
        String statesetId, String featureId, String stateKeyName) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        if (stateKeyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter stateKeyName is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteState(
                            this.client.getGeography(),
                            apiVersion,
                            statesetId,
                            featureId,
                            stateKeyName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteStateWithResponseAsync(
        String statesetId, String featureId, String stateKeyName, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        if (stateKeyName == null) {
            return Mono.error(new IllegalArgumentException("Parameter stateKeyName is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteState(this.client.getGeography(), apiVersion, statesetId, featureId, stateKeyName, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteStateAsync(String statesetId, String featureId, String stateKeyName) {
        return deleteStateWithResponseAsync(statesetId, featureId, stateKeyName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteState(String statesetId, String featureId, String stateKeyName) {
        deleteStateAsync(statesetId, featureId, stateKeyName).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteStateWithResponse(
        String statesetId, String featureId, String stateKeyName, Context context) {
        return deleteStateWithResponseAsync(statesetId, featureId, stateKeyName, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FeatureStatesStructureInner>> getStatesWithResponseAsync(
        String statesetId, String featureId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getStates(this.client.getGeography(), apiVersion, statesetId, featureId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FeatureStatesStructureInner>> getStatesWithResponseAsync(
        String statesetId, String featureId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (statesetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter statesetId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getStates(this.client.getGeography(), apiVersion, statesetId, featureId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FeatureStatesStructureInner> getStatesAsync(String statesetId, String featureId) {
        return getStatesWithResponseAsync(statesetId, featureId)
            .flatMap(
                (Response<FeatureStatesStructureInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureStatesStructureInner getStates(String statesetId, String featureId) {
        return getStatesAsync(statesetId, featureId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FeatureStatesStructureInner> getStatesWithResponse(
        String statesetId, String featureId, Context context) {
        return getStatesWithResponseAsync(statesetId, featureId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StatesetInfoObject>> listStatesetNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listStatesetNext(nextLink, this.client.getGeography(), accept, context))
            .<PagedResponse<StatesetInfoObject>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().statesets(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StatesetInfoObject>> listStatesetNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listStatesetNext(nextLink, this.client.getGeography(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().statesets(),
                        res.getValue().nextLink(),
                        null));
    }
}
