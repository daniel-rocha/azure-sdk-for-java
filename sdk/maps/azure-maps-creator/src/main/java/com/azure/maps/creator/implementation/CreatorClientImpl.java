// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.maps.creator.models.Geography;

/** Initializes a new instance of the CreatorClient type. */
public final class CreatorClientImpl {
    /**
     * Specifies which account is intended for usage in conjunction with the Azure AD security model. It represents a
     * unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane Account API. To
     * use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
     */
    private final String xMsClientId;

    /**
     * Gets Specifies which account is intended for usage in conjunction with the Azure AD security model. It represents
     * a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management plane Account API. To
     * use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
     *
     * @return the xMsClientId value.
     */
    public String getXMsClientId() {
        return this.xMsClientId;
    }

    /** This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu. */
    private final Geography geography;

    /**
     * Gets This parameter specifies where the Azure Maps Creator resource is located. Valid values are us and eu.
     *
     * @return the geography value.
     */
    public Geography getGeography() {
        return this.geography;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The AliasImpl object to access its operations. */
    private final AliasImpl alias;

    /**
     * Gets the AliasImpl object to access its operations.
     *
     * @return the AliasImpl object.
     */
    public AliasImpl getAlias() {
        return this.alias;
    }

    /** The DatasImpl object to access its operations. */
    private final DatasImpl datas;

    /**
     * Gets the DatasImpl object to access its operations.
     *
     * @return the DatasImpl object.
     */
    public DatasImpl getDatas() {
        return this.datas;
    }

    /** The DatasetsImpl object to access its operations. */
    private final DatasetsImpl datasets;

    /**
     * Gets the DatasetsImpl object to access its operations.
     *
     * @return the DatasetsImpl object.
     */
    public DatasetsImpl getDatasets() {
        return this.datasets;
    }

    /** The ConversionsImpl object to access its operations. */
    private final ConversionsImpl conversions;

    /**
     * Gets the ConversionsImpl object to access its operations.
     *
     * @return the ConversionsImpl object.
     */
    public ConversionsImpl getConversions() {
        return this.conversions;
    }

    /** The FeatureStatesImpl object to access its operations. */
    private final FeatureStatesImpl featureStates;

    /**
     * Gets the FeatureStatesImpl object to access its operations.
     *
     * @return the FeatureStatesImpl object.
     */
    public FeatureStatesImpl getFeatureStates() {
        return this.featureStates;
    }

    /** The SpatialsImpl object to access its operations. */
    private final SpatialsImpl spatials;

    /**
     * Gets the SpatialsImpl object to access its operations.
     *
     * @return the SpatialsImpl object.
     */
    public SpatialsImpl getSpatials() {
        return this.spatials;
    }

    /** The TilesetsImpl object to access its operations. */
    private final TilesetsImpl tilesets;

    /**
     * Gets the TilesetsImpl object to access its operations.
     *
     * @return the TilesetsImpl object.
     */
    public TilesetsImpl getTilesets() {
        return this.tilesets;
    }

    /** The WFSImpl object to access its operations. */
    private final WFSImpl wFS;

    /**
     * Gets the WFSImpl object to access its operations.
     *
     * @return the WFSImpl object.
     */
    public WFSImpl getWFS() {
        return this.wFS;
    }

    /**
     * Initializes an instance of CreatorClient client.
     *
     * @param xMsClientId Specifies which account is intended for usage in conjunction with the Azure AD security model.
     *     It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management
     *     plane Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param geography This parameter specifies where the Azure Maps Creator resource is located. Valid values are us
     *     and eu.
     */
    public CreatorClientImpl(String xMsClientId, Geography geography) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                xMsClientId,
                geography);
    }

    /**
     * Initializes an instance of CreatorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param xMsClientId Specifies which account is intended for usage in conjunction with the Azure AD security model.
     *     It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management
     *     plane Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param geography This parameter specifies where the Azure Maps Creator resource is located. Valid values are us
     *     and eu.
     */
    public CreatorClientImpl(HttpPipeline httpPipeline, String xMsClientId, Geography geography) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), xMsClientId, geography);
    }

    /**
     * Initializes an instance of CreatorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param xMsClientId Specifies which account is intended for usage in conjunction with the Azure AD security model.
     *     It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management
     *     plane Account API. To use Azure AD security in Azure Maps see the following
     *     [articles](https://aka.ms/amauthdetails) for guidance.
     * @param geography This parameter specifies where the Azure Maps Creator resource is located. Valid values are us
     *     and eu.
     */
    public CreatorClientImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String xMsClientId, Geography geography) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.xMsClientId = xMsClientId;
        this.geography = geography;
        this.alias = new AliasImpl(this);
        this.datas = new DatasImpl(this);
        this.datasets = new DatasetsImpl(this);
        this.conversions = new ConversionsImpl(this);
        this.featureStates = new FeatureStatesImpl(this);
        this.spatials = new SpatialsImpl(this);
        this.tilesets = new TilesetsImpl(this);
        this.wFS = new WFSImpl(this);
    }
}
