// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.AliasClient;
import com.azure.maps.creator.fluent.models.AliasListItemInner;
import com.azure.maps.creator.fluent.models.AliasesCreateResponseInner;
import com.azure.maps.creator.models.Alias;
import com.azure.maps.creator.models.AliasCreateResponse;
import com.azure.maps.creator.models.AliasListItem;
import com.azure.maps.creator.models.AliasesCreateResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AliasImpl implements Alias {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AliasImpl.class);

    private final AliasClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public AliasImpl(AliasClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AliasesCreateResponse create() {
        AliasesCreateResponseInner inner = this.serviceClient().create();
        if (inner != null) {
            return new AliasesCreateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AliasesCreateResponse> createWithResponse(String creatorDataItemId, Context context) {
        AliasCreateResponse inner = this.serviceClient().createWithResponse(creatorDataItemId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AliasesCreateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<AliasListItem> list() {
        PagedIterable<AliasListItemInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new AliasListItemImpl(inner1, this.manager()));
    }

    public PagedIterable<AliasListItem> list(Context context) {
        PagedIterable<AliasListItemInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new AliasListItemImpl(inner1, this.manager()));
    }

    public AliasListItem assign(String aliasId, String creatorDataItemId) {
        AliasListItemInner inner = this.serviceClient().assign(aliasId, creatorDataItemId);
        if (inner != null) {
            return new AliasListItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AliasListItem> assignWithResponse(String aliasId, String creatorDataItemId, Context context) {
        Response<AliasListItemInner> inner =
            this.serviceClient().assignWithResponse(aliasId, creatorDataItemId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AliasListItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String aliasId) {
        this.serviceClient().delete(aliasId);
    }

    public Response<Void> deleteWithResponse(String aliasId, Context context) {
        return this.serviceClient().deleteWithResponse(aliasId, context);
    }

    public AliasListItem getDetails(String aliasId) {
        AliasListItemInner inner = this.serviceClient().getDetails(aliasId);
        if (inner != null) {
            return new AliasListItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AliasListItem> getDetailsWithResponse(String aliasId, Context context) {
        Response<AliasListItemInner> inner = this.serviceClient().getDetailsWithResponse(aliasId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AliasListItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private AliasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
