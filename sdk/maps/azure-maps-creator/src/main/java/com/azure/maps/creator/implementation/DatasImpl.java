// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.DatasClient;
import com.azure.maps.creator.fluent.models.LongRunningOperationResultInner;
import com.azure.maps.creator.fluent.models.MapDataListResponseInner;
import com.azure.maps.creator.models.Datas;
import com.azure.maps.creator.models.DatasGetOperationPreviewResponse;
import com.azure.maps.creator.models.LongRunningOperationResult;
import com.azure.maps.creator.models.MapDataListResponse;
import com.azure.maps.creator.models.UploadDataFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;

public final class DatasImpl implements Datas {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatasImpl.class);

    private final DatasClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public DatasImpl(DatasClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LongRunningOperationResult uploadPreview(
        UploadDataFormat uploadDataFormat,
        Flux<ByteBuffer> uploadContent,
        long contentLength,
        String uploadDataDescription) {
        LongRunningOperationResultInner inner =
            this.serviceClient().uploadPreview(uploadDataFormat, uploadContent, contentLength, uploadDataDescription);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult uploadPreview(
        UploadDataFormat uploadDataFormat, Flux<ByteBuffer> uploadContent, long contentLength) {
        LongRunningOperationResultInner inner =
            this.serviceClient().uploadPreview(uploadDataFormat, uploadContent, contentLength);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult uploadPreview(
        UploadDataFormat uploadDataFormat,
        Flux<ByteBuffer> uploadContent,
        long contentLength,
        String uploadDataDescription,
        Context context) {
        LongRunningOperationResultInner inner =
            this
                .serviceClient()
                .uploadPreview(uploadDataFormat, uploadContent, contentLength, uploadDataDescription, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult uploadPreview(
        UploadDataFormat uploadDataFormat, Object uploadContent, String uploadDataDescription) {
        LongRunningOperationResultInner inner =
            this.serviceClient().uploadPreview(uploadDataFormat, uploadContent, uploadDataDescription);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult uploadPreview(UploadDataFormat uploadDataFormat, Object uploadContent) {
        LongRunningOperationResultInner inner = this.serviceClient().uploadPreview(uploadDataFormat, uploadContent);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult uploadPreview(
        UploadDataFormat uploadDataFormat, Object uploadContent, String uploadDataDescription, Context context) {
        LongRunningOperationResultInner inner =
            this.serviceClient().uploadPreview(uploadDataFormat, uploadContent, uploadDataDescription, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MapDataListResponse listPreview() {
        MapDataListResponseInner inner = this.serviceClient().listPreview();
        if (inner != null) {
            return new MapDataListResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MapDataListResponse> listPreviewWithResponse(Context context) {
        Response<MapDataListResponseInner> inner = this.serviceClient().listPreviewWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MapDataListResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LongRunningOperationResult updatePreview(
        String uniqueDataId, Object updateContent, String uploadDataDescription) {
        LongRunningOperationResultInner inner =
            this.serviceClient().updatePreview(uniqueDataId, updateContent, uploadDataDescription);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult updatePreview(String uniqueDataId, Object updateContent) {
        LongRunningOperationResultInner inner = this.serviceClient().updatePreview(uniqueDataId, updateContent);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult updatePreview(
        String uniqueDataId, Object updateContent, String uploadDataDescription, Context context) {
        LongRunningOperationResultInner inner =
            this.serviceClient().updatePreview(uniqueDataId, updateContent, uploadDataDescription, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public InputStream downloadPreview(String uniqueDataId) {
        return this.serviceClient().downloadPreview(uniqueDataId);
    }

    public StreamResponse downloadPreviewWithResponse(String uniqueDataId, Context context) {
        return this.serviceClient().downloadPreviewWithResponse(uniqueDataId, context);
    }

    public void deletePreview(String uniqueDataId) {
        this.serviceClient().deletePreview(uniqueDataId);
    }

    public Response<Void> deletePreviewWithResponse(String uniqueDataId, Context context) {
        return this.serviceClient().deletePreviewWithResponse(uniqueDataId, context);
    }

    public LongRunningOperationResult getOperationPreview(String operationId) {
        LongRunningOperationResultInner inner = this.serviceClient().getOperationPreview(operationId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LongRunningOperationResult> getOperationPreviewWithResponse(String operationId, Context context) {
        DatasGetOperationPreviewResponse inner =
            this.serviceClient().getOperationPreviewWithResponse(operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LongRunningOperationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private DatasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
