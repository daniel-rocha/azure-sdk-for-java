// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.models.DefinitionProperties;
import com.azure.maps.creator.models.GeoJsonGeometryType;
import com.azure.maps.creator.models.WfsEndpointLink;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** collection of GeoJSON features. */
@Fluent
public final class CollectionDefinitionResponseInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CollectionDefinitionResponseInner.class);

    /*
     * describes the collection
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * prefix of the collection used
     */
    @JsonProperty(value = "idPrefix", required = true)
    private String idPrefix;

    /*
     * identifier of the collection used, for example, in URIs
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * title of collection
     */
    @JsonProperty(value = "title")
    private String title;

    /*
     * The ontology version of this dataset.
     */
    @JsonProperty(value = "ontology", access = JsonProperty.Access.WRITE_ONLY)
    private String ontology;

    /*
     * type of geometry returned
     */
    @JsonProperty(value = "geometryType", required = true)
    private GeoJsonGeometryType geometryType;

    /*
     * type of features returned
     */
    @JsonProperty(value = "featureTypes", required = true)
    private List<String> featureTypes;

    /*
     * attributes of the collection used
     */
    @JsonProperty(value = "properties")
    private List<DefinitionProperties> properties;

    /*
     * Links to other WFS endpoints.
     */
    @JsonProperty(value = "links")
    private List<WfsEndpointLink> links;

    /**
     * Get the description property: describes the collection.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: describes the collection.
     *
     * @param description the description value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the idPrefix property: prefix of the collection used.
     *
     * @return the idPrefix value.
     */
    public String idPrefix() {
        return this.idPrefix;
    }

    /**
     * Set the idPrefix property: prefix of the collection used.
     *
     * @param idPrefix the idPrefix value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withIdPrefix(String idPrefix) {
        this.idPrefix = idPrefix;
        return this;
    }

    /**
     * Get the name property: identifier of the collection used, for example, in URIs.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: identifier of the collection used, for example, in URIs.
     *
     * @param name the name value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the title property: title of collection.
     *
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: title of collection.
     *
     * @param title the title value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the ontology property: The ontology version of this dataset.
     *
     * @return the ontology value.
     */
    public String ontology() {
        return this.ontology;
    }

    /**
     * Get the geometryType property: type of geometry returned.
     *
     * @return the geometryType value.
     */
    public GeoJsonGeometryType geometryType() {
        return this.geometryType;
    }

    /**
     * Set the geometryType property: type of geometry returned.
     *
     * @param geometryType the geometryType value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withGeometryType(GeoJsonGeometryType geometryType) {
        this.geometryType = geometryType;
        return this;
    }

    /**
     * Get the featureTypes property: type of features returned.
     *
     * @return the featureTypes value.
     */
    public List<String> featureTypes() {
        return this.featureTypes;
    }

    /**
     * Set the featureTypes property: type of features returned.
     *
     * @param featureTypes the featureTypes value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withFeatureTypes(List<String> featureTypes) {
        this.featureTypes = featureTypes;
        return this;
    }

    /**
     * Get the properties property: attributes of the collection used.
     *
     * @return the properties value.
     */
    public List<DefinitionProperties> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: attributes of the collection used.
     *
     * @param properties the properties value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withProperties(List<DefinitionProperties> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the links property: Links to other WFS endpoints.
     *
     * @return the links value.
     */
    public List<WfsEndpointLink> links() {
        return this.links;
    }

    /**
     * Set the links property: Links to other WFS endpoints.
     *
     * @param links the links value to set.
     * @return the CollectionDefinitionResponseInner object itself.
     */
    public CollectionDefinitionResponseInner withLinks(List<WfsEndpointLink> links) {
        this.links = links;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (idPrefix() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property idPrefix in model CollectionDefinitionResponseInner"));
        }
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property name in model CollectionDefinitionResponseInner"));
        }
        if (geometryType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property geometryType in model CollectionDefinitionResponseInner"));
        }
        if (featureTypes() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property featureTypes in model CollectionDefinitionResponseInner"));
        }
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }
}
