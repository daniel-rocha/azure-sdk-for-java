// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.TilesetsClient;
import com.azure.maps.creator.fluent.models.LongRunningOperationResultInner;
import com.azure.maps.creator.fluent.models.TilesetDetailInfoInner;
import com.azure.maps.creator.models.LongRunningOperationResult;
import com.azure.maps.creator.models.TilesetDetailInfo;
import com.azure.maps.creator.models.Tilesets;
import com.azure.maps.creator.models.TilesetsGetOperationResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TilesetsImpl implements Tilesets {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TilesetsImpl.class);

    private final TilesetsClient innerClient;

    private final com.azure.maps.creator.CreatorManager serviceManager;

    public TilesetsImpl(TilesetsClient innerClient, com.azure.maps.creator.CreatorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LongRunningOperationResult create(String datasetId, String description) {
        LongRunningOperationResultInner inner = this.serviceClient().create(datasetId, description);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult create(String datasetId) {
        LongRunningOperationResultInner inner = this.serviceClient().create(datasetId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LongRunningOperationResult create(String datasetId, String description, Context context) {
        LongRunningOperationResultInner inner = this.serviceClient().create(datasetId, description, context);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<TilesetDetailInfo> list() {
        PagedIterable<TilesetDetailInfoInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new TilesetDetailInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<TilesetDetailInfo> list(Context context) {
        PagedIterable<TilesetDetailInfoInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new TilesetDetailInfoImpl(inner1, this.manager()));
    }

    public TilesetDetailInfo get(String tilesetId) {
        TilesetDetailInfoInner inner = this.serviceClient().get(tilesetId);
        if (inner != null) {
            return new TilesetDetailInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TilesetDetailInfo> getWithResponse(String tilesetId, Context context) {
        Response<TilesetDetailInfoInner> inner = this.serviceClient().getWithResponse(tilesetId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TilesetDetailInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String tilesetId) {
        this.serviceClient().delete(tilesetId);
    }

    public Response<Void> deleteWithResponse(String tilesetId, Context context) {
        return this.serviceClient().deleteWithResponse(tilesetId, context);
    }

    public LongRunningOperationResult getOperation(String operationId) {
        LongRunningOperationResultInner inner = this.serviceClient().getOperation(operationId);
        if (inner != null) {
            return new LongRunningOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LongRunningOperationResult> getOperationWithResponse(String operationId, Context context) {
        TilesetsGetOperationResponse inner = this.serviceClient().getOperationWithResponse(operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LongRunningOperationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private TilesetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.creator.CreatorManager manager() {
        return this.serviceManager;
    }
}
