// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.fluent.WfsClient;
import com.azure.maps.creator.fluent.models.CollectionDefinitionResponseInner;
import com.azure.maps.creator.fluent.models.CollectionInfoInner;
import com.azure.maps.creator.fluent.models.CollectionsResponseInner;
import com.azure.maps.creator.fluent.models.ConformanceResponseInner;
import com.azure.maps.creator.fluent.models.ExtendedGeoJsonFeatureCollectionInner;
import com.azure.maps.creator.fluent.models.FeatureResponseInner;
import com.azure.maps.creator.fluent.models.LandingPageResponseInner;
import com.azure.maps.creator.models.Geography;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WfsClient. */
public final class WfsClientImpl implements WfsClient {
    private final ClientLogger logger = new ClientLogger(WfsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final WfsService service;

    /** The service client containing this operation class. */
    private final CreatorClientImpl client;

    /**
     * Initializes an instance of WfsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WfsClientImpl(CreatorClientImpl client) {
        this.service = RestProxy.create(WfsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CreatorClientWfs to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "CreatorClientWfs")
    private interface WfsService {
        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingPageResponseInner>> getLandingPage(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/conformance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConformanceResponseInner>> getConformance(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/collections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CollectionsResponseInner>> getCollections(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/collections/{collectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CollectionInfoInner>> getCollection(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/collections/{collectionId}/definition")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CollectionDefinitionResponseInner>> getCollectionDefinition(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @PathParam("collectionId") String collectionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/collections/{collectionId}/items")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtendedGeoJsonFeatureCollectionInner>> getFeatures(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @PathParam("collectionId") String collectionId,
            @QueryParam("limit") Integer limit,
            @QueryParam("bbox") String bbox,
            @QueryParam("filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/wfs/datasets/{datasetId}/collections/{collectionId}/items/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FeatureResponseInner>> getFeature(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @PathParam("collectionId") String collectionId,
            @PathParam("featureId") String featureId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/wfs/datasets/{datasetId}/collections/{collectionId}/items/{featureId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteFeature(
            @HostParam("geography") Geography geography,
            @QueryParam("api-version") String apiVersion,
            @PathParam("datasetId") String datasetId,
            @PathParam("collectionId") String collectionId,
            @PathParam("featureId") String featureId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Landing Page API provides links to the API definition, the Conformance statements and the
     * metadata about the feature data in this dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingPageResponseInner>> getLandingPageWithResponseAsync(String datasetId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getLandingPage(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Landing Page API provides links to the API definition, the Conformance statements and the
     * metadata about the feature data in this dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingPageResponseInner>> getLandingPageWithResponseAsync(
        String datasetId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getLandingPage(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, datasetId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Landing Page API provides links to the API definition, the Conformance statements and the
     * metadata about the feature data in this dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingPageResponseInner> getLandingPageAsync(String datasetId) {
        return getLandingPageWithResponseAsync(datasetId)
            .flatMap(
                (Response<LandingPageResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Landing Page API provides links to the API definition, the Conformance statements and the
     * metadata about the feature data in this dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingPageResponseInner getLandingPage(String datasetId) {
        return getLandingPageAsync(datasetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Landing Page API provides links to the API definition, the Conformance statements and the
     * metadata about the feature data in this dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LandingPageResponseInner> getLandingPageWithResponse(String datasetId, Context context) {
        return getLandingPageWithResponseAsync(datasetId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Requirements Classes lists all requirements classes specified in the standard that the server
     * conforms to.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConformanceResponseInner>> getConformanceWithResponseAsync(String datasetId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getConformance(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Requirements Classes lists all requirements classes specified in the standard that the server
     * conforms to.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConformanceResponseInner>> getConformanceWithResponseAsync(
        String datasetId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getConformance(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, datasetId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Requirements Classes lists all requirements classes specified in the standard that the server
     * conforms to.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConformanceResponseInner> getConformanceAsync(String datasetId) {
        return getConformanceWithResponseAsync(datasetId)
            .flatMap(
                (Response<ConformanceResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Requirements Classes lists all requirements classes specified in the standard that the server
     * conforms to.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConformanceResponseInner getConformance(String datasetId) {
        return getConformanceAsync(datasetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Requirements Classes lists all requirements classes specified in the standard that the server
     * conforms to.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConformanceResponseInner> getConformanceWithResponse(String datasetId, Context context) {
        return getConformanceWithResponseAsync(datasetId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Collections Description API provides descriptions of all the collections in a given dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionsResponseInner>> getCollectionsWithResponseAsync(String datasetId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getCollections(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Collections Description API provides descriptions of all the collections in a given dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionsResponseInner>> getCollectionsWithResponseAsync(
        String datasetId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getCollections(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, datasetId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Collections Description API provides descriptions of all the collections in a given dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CollectionsResponseInner> getCollectionsAsync(String datasetId) {
        return getCollectionsWithResponseAsync(datasetId)
            .flatMap(
                (Response<CollectionsResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Collections Description API provides descriptions of all the collections in a given dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CollectionsResponseInner getCollections(String datasetId) {
        return getCollectionsAsync(datasetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Collections Description API provides descriptions of all the collections in a given dataset.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CollectionsResponseInner> getCollectionsWithResponse(String datasetId, Context context) {
        return getCollectionsWithResponseAsync(datasetId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Description API provides the description of a given collection. It includes the links to the
     * operations that can be performed on the collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionInfoInner>> getCollectionWithResponseAsync(String datasetId, String collectionId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getCollection(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            collectionId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Description API provides the description of a given collection. It includes the links to the
     * operations that can be performed on the collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionInfoInner>> getCollectionWithResponseAsync(
        String datasetId, String collectionId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getCollection(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                datasetId,
                collectionId,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Description API provides the description of a given collection. It includes the links to the
     * operations that can be performed on the collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CollectionInfoInner> getCollectionAsync(String datasetId, String collectionId) {
        return getCollectionWithResponseAsync(datasetId, collectionId)
            .flatMap(
                (Response<CollectionInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Description API provides the description of a given collection. It includes the links to the
     * operations that can be performed on the collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CollectionInfoInner getCollection(String datasetId, String collectionId) {
        return getCollectionAsync(datasetId, collectionId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Description API provides the description of a given collection. It includes the links to the
     * operations that can be performed on the collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CollectionInfoInner> getCollectionWithResponse(
        String datasetId, String collectionId, Context context) {
        return getCollectionWithResponseAsync(datasetId, collectionId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>[This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
     * Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Definition API provides the detailed data model of a given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of GeoJSON features.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionDefinitionResponseInner>> getCollectionDefinitionWithResponseAsync(
        String datasetId, String collectionId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getCollectionDefinition(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            collectionId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>[This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
     * Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Definition API provides the detailed data model of a given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of GeoJSON features.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CollectionDefinitionResponseInner>> getCollectionDefinitionWithResponseAsync(
        String datasetId, String collectionId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getCollectionDefinition(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                datasetId,
                collectionId,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>[This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
     * Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Definition API provides the detailed data model of a given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of GeoJSON features.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CollectionDefinitionResponseInner> getCollectionDefinitionAsync(
        String datasetId, String collectionId) {
        return getCollectionDefinitionWithResponseAsync(datasetId, collectionId)
            .flatMap(
                (Response<CollectionDefinitionResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>[This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
     * Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Definition API provides the detailed data model of a given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of GeoJSON features.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CollectionDefinitionResponseInner getCollectionDefinition(String datasetId, String collectionId) {
        return getCollectionDefinitionAsync(datasetId, collectionId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>[This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
     * Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema.
     *
     * <p>The Collection Definition API provides the detailed data model of a given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of GeoJSON features.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CollectionDefinitionResponseInner> getCollectionDefinitionWithResponse(
        String datasetId, String collectionId, Context context) {
        return getCollectionDefinitionWithResponseAsync(datasetId, collectionId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param limit The optional limit parameter limits the number of features that are presented in the response
     *     document. Only features that are on the first level of the collection in the response document are counted.
     *     Nested objects contained within the explicitly requested features shall not be counted. * Minimum = 1 *
     *     Maximum = 50 * Default = 10.
     * @param bbox Only features that have a geometry that intersects the supplied bounding box are selected. * Lower
     *     left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1
     *     * Upper right corner, coordinate axis 2 The coordinate reference system of the values is WGS84
     *     longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference
     *     system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases
     *     the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in
     *     cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third
     *     value (east-most box edge).
     * @param filter Filter expression to search for features with specific property values in a given collection. Only
     *     feature properties of scalar type and equals operator are supported. This is a special parameter where the
     *     parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property
     *     value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a
     *     parameter name. To search for features with "name" property value "21N13", use "name=21N13". Multiple filters
     *     are supported and should be represented as multiple query parameters. E.g.,
     *     &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtendedGeoJsonFeatureCollectionInner>> getFeaturesWithResponseAsync(
        String datasetId, String collectionId, Integer limit, String bbox, String filter) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getFeatures(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            apiVersion,
                            datasetId,
                            collectionId,
                            limit,
                            bbox,
                            filter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param limit The optional limit parameter limits the number of features that are presented in the response
     *     document. Only features that are on the first level of the collection in the response document are counted.
     *     Nested objects contained within the explicitly requested features shall not be counted. * Minimum = 1 *
     *     Maximum = 50 * Default = 10.
     * @param bbox Only features that have a geometry that intersects the supplied bounding box are selected. * Lower
     *     left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1
     *     * Upper right corner, coordinate axis 2 The coordinate reference system of the values is WGS84
     *     longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference
     *     system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases
     *     the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in
     *     cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third
     *     value (east-most box edge).
     * @param filter Filter expression to search for features with specific property values in a given collection. Only
     *     feature properties of scalar type and equals operator are supported. This is a special parameter where the
     *     parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property
     *     value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a
     *     parameter name. To search for features with "name" property value "21N13", use "name=21N13". Multiple filters
     *     are supported and should be represented as multiple query parameters. E.g.,
     *     &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtendedGeoJsonFeatureCollectionInner>> getFeaturesWithResponseAsync(
        String datasetId, String collectionId, Integer limit, String bbox, String filter, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getFeatures(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                datasetId,
                collectionId,
                limit,
                bbox,
                filter,
                accept,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param limit The optional limit parameter limits the number of features that are presented in the response
     *     document. Only features that are on the first level of the collection in the response document are counted.
     *     Nested objects contained within the explicitly requested features shall not be counted. * Minimum = 1 *
     *     Maximum = 50 * Default = 10.
     * @param bbox Only features that have a geometry that intersects the supplied bounding box are selected. * Lower
     *     left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1
     *     * Upper right corner, coordinate axis 2 The coordinate reference system of the values is WGS84
     *     longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference
     *     system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases
     *     the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in
     *     cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third
     *     value (east-most box edge).
     * @param filter Filter expression to search for features with specific property values in a given collection. Only
     *     feature properties of scalar type and equals operator are supported. This is a special parameter where the
     *     parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property
     *     value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a
     *     parameter name. To search for features with "name" property value "21N13", use "name=21N13". Multiple filters
     *     are supported and should be represented as multiple query parameters. E.g.,
     *     &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtendedGeoJsonFeatureCollectionInner> getFeaturesAsync(
        String datasetId, String collectionId, Integer limit, String bbox, String filter) {
        return getFeaturesWithResponseAsync(datasetId, collectionId, limit, bbox, filter)
            .flatMap(
                (Response<ExtendedGeoJsonFeatureCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtendedGeoJsonFeatureCollectionInner> getFeaturesAsync(String datasetId, String collectionId) {
        final Integer limit = null;
        final String bbox = null;
        final String filter = null;
        return getFeaturesWithResponseAsync(datasetId, collectionId, limit, bbox, filter)
            .flatMap(
                (Response<ExtendedGeoJsonFeatureCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtendedGeoJsonFeatureCollectionInner getFeatures(String datasetId, String collectionId) {
        final Integer limit = null;
        final String bbox = null;
        final String filter = null;
        return getFeaturesAsync(datasetId, collectionId, limit, bbox, filter).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Features API returns the list of features in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param limit The optional limit parameter limits the number of features that are presented in the response
     *     document. Only features that are on the first level of the collection in the response document are counted.
     *     Nested objects contained within the explicitly requested features shall not be counted. * Minimum = 1 *
     *     Maximum = 50 * Default = 10.
     * @param bbox Only features that have a geometry that intersects the supplied bounding box are selected. * Lower
     *     left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1
     *     * Upper right corner, coordinate axis 2 The coordinate reference system of the values is WGS84
     *     longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference
     *     system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases
     *     the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in
     *     cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third
     *     value (east-most box edge).
     * @param filter Filter expression to search for features with specific property values in a given collection. Only
     *     feature properties of scalar type and equals operator are supported. This is a special parameter where the
     *     parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property
     *     value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a
     *     parameter name. To search for features with "name" property value "21N13", use "name=21N13". Multiple filters
     *     are supported and should be represented as multiple query parameters. E.g.,
     *     &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtendedGeoJsonFeatureCollectionInner> getFeaturesWithResponse(
        String datasetId, String collectionId, Integer limit, String bbox, String filter, Context context) {
        return getFeaturesWithResponseAsync(datasetId, collectionId, limit, bbox, filter, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Feature API returns the feature identified by the provided id in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FeatureResponseInner>> getFeatureWithResponseAsync(
        String datasetId, String collectionId, String featureId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getFeature(
                            this.client.getGeography(),
                            apiVersion,
                            datasetId,
                            collectionId,
                            featureId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Feature API returns the feature identified by the provided id in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FeatureResponseInner>> getFeatureWithResponseAsync(
        String datasetId, String collectionId, String featureId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getFeature(this.client.getGeography(), apiVersion, datasetId, collectionId, featureId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Feature API returns the feature identified by the provided id in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FeatureResponseInner> getFeatureAsync(String datasetId, String collectionId, String featureId) {
        return getFeatureWithResponseAsync(datasetId, collectionId, featureId)
            .flatMap(
                (Response<FeatureResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Feature API returns the feature identified by the provided id in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureResponseInner getFeature(String datasetId, String collectionId, String featureId) {
        return getFeatureAsync(datasetId, collectionId, featureId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Get Feature API returns the feature identified by the provided id in the given collection.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FeatureResponseInner> getFeatureWithResponse(
        String datasetId, String collectionId, String featureId, Context context) {
        return getFeatureWithResponseAsync(datasetId, collectionId, featureId, context).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Delete Feature API deletes the feature identified by the provided id in the given collection. At this
     * point this API supports only facility features. Deleting a facility feature deletes all the child features of
     * that facility recursively.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteFeatureWithResponseAsync(
        String datasetId, String collectionId, String featureId) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteFeature(
                            this.client.getGeography(),
                            apiVersion,
                            datasetId,
                            collectionId,
                            featureId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Delete Feature API deletes the feature identified by the provided id in the given collection. At this
     * point this API supports only facility features. Deleting a facility feature deletes all the child features of
     * that facility recursively.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteFeatureWithResponseAsync(
        String datasetId, String collectionId, String featureId, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (datasetId == null) {
            return Mono.error(new IllegalArgumentException("Parameter datasetId is required and cannot be null."));
        }
        if (collectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter collectionId is required and cannot be null."));
        }
        if (featureId == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureId is required and cannot be null."));
        }
        final String apiVersion = "2.0";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteFeature(this.client.getGeography(), apiVersion, datasetId, collectionId, featureId, accept, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Delete Feature API deletes the feature identified by the provided id in the given collection. At this
     * point this API supports only facility features. Deleting a facility feature deletes all the child features of
     * that facility recursively.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteFeatureAsync(String datasetId, String collectionId, String featureId) {
        return deleteFeatureWithResponseAsync(datasetId, collectionId, featureId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Delete Feature API deletes the feature identified by the provided id in the given collection. At this
     * point this API supports only facility features. Deleting a facility feature deletes all the child features of
     * that facility recursively.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFeature(String datasetId, String collectionId, String featureId) {
        deleteFeatureAsync(datasetId, collectionId, featureId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>The Web Feature Service (WFS) API is part of Creator. WFS API follows the [Open Geospatial Consortium API
     * standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
     * [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). A dataset consists of multiple
     * feature collections. A feature collection is a collection of features of a similar type, based on a common
     * schema. The Delete Feature API deletes the feature identified by the provided id in the given collection. At this
     * point this API supports only facility features. Deleting a facility feature deletes all the child features of
     * that facility recursively.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param collectionId Identifier (name) of a specific collection.
     * @param featureId Local identifier of a specific feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFeatureWithResponse(
        String datasetId, String collectionId, String featureId, Context context) {
        return deleteFeatureWithResponseAsync(datasetId, collectionId, featureId, context).block();
    }
}
