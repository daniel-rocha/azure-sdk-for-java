// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The numeric value range for this style rule. If the value is in the range, all the conditions must hold true. */
@Fluent
public final class Range {
    /*
     * All the number x that x ≥ minimum.
     */
    @JsonProperty(value = "minimum")
    private String minimum;

    /*
     * All the number x that x ≤ maximum.
     */
    @JsonProperty(value = "maximum")
    private String maximum;

    /*
     * All the number x that x > exclusiveMinimum.
     */
    @JsonProperty(value = "exclusiveMinimum")
    private String exclusiveMinimum;

    /*
     * All the number x that x < exclusiveMaximum.
     */
    @JsonProperty(value = "exclusiveMaximum")
    private String exclusiveMaximum;

    /**
     * Get the minimum property: All the number x that x ≥ minimum.
     *
     * @return the minimum value.
     */
    public String getMinimum() {
        return this.minimum;
    }

    /**
     * Set the minimum property: All the number x that x ≥ minimum.
     *
     * @param minimum the minimum value to set.
     * @return the Range object itself.
     */
    public Range setMinimum(String minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * Get the maximum property: All the number x that x ≤ maximum.
     *
     * @return the maximum value.
     */
    public String getMaximum() {
        return this.maximum;
    }

    /**
     * Set the maximum property: All the number x that x ≤ maximum.
     *
     * @param maximum the maximum value to set.
     * @return the Range object itself.
     */
    public Range setMaximum(String maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * Get the exclusiveMinimum property: All the number x that x &gt; exclusiveMinimum.
     *
     * @return the exclusiveMinimum value.
     */
    public String getExclusiveMinimum() {
        return this.exclusiveMinimum;
    }

    /**
     * Set the exclusiveMinimum property: All the number x that x &gt; exclusiveMinimum.
     *
     * @param exclusiveMinimum the exclusiveMinimum value to set.
     * @return the Range object itself.
     */
    public Range setExclusiveMinimum(String exclusiveMinimum) {
        this.exclusiveMinimum = exclusiveMinimum;
        return this;
    }

    /**
     * Get the exclusiveMaximum property: All the number x that x &lt; exclusiveMaximum.
     *
     * @return the exclusiveMaximum value.
     */
    public String getExclusiveMaximum() {
        return this.exclusiveMaximum;
    }

    /**
     * Set the exclusiveMaximum property: All the number x that x &lt; exclusiveMaximum.
     *
     * @param exclusiveMaximum the exclusiveMaximum value to set.
     * @return the Range object itself.
     */
    public Range setExclusiveMaximum(String exclusiveMaximum) {
        this.exclusiveMaximum = exclusiveMaximum;
        return this;
    }
}
