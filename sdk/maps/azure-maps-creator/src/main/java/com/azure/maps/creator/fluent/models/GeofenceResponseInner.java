// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.creator.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.creator.models.GeofenceGeometry;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** This object is returned from a geofence proximity call. */
@Immutable
public final class GeofenceResponseInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GeofenceResponseInner.class);

    /*
     * Lists the fence geometries that contain the coordinate position or
     * overlap the searchBuffer around the position.
     */
    @JsonProperty(value = "geometries", access = JsonProperty.Access.WRITE_ONLY)
    private List<GeofenceGeometry> geometries;

    /*
     * Lists of the geometry ID of the geofence which is expired relative to
     * the user time in the request.
     */
    @JsonProperty(value = "expiredGeofenceGeometryId", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> expiredGeofenceGeometryId;

    /*
     * Lists of the geometry ID of the geofence which is in invalid period
     * relative to the user time in the request.
     */
    @JsonProperty(value = "invalidPeriodGeofenceGeometryId", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> invalidPeriodGeofenceGeometryId;

    /*
     * True if at least one event is published to the Azure Maps event
     * subscriber, false if no event is published to the Azure Maps event
     * subscriber. This will only be presented in response when 'isAsync' query
     * parameter is set to true.
     */
    @JsonProperty(value = "isEventPublished", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isEventPublished;

    /**
     * Get the geometries property: Lists the fence geometries that contain the coordinate position or overlap the
     * searchBuffer around the position.
     *
     * @return the geometries value.
     */
    public List<GeofenceGeometry> geometries() {
        return this.geometries;
    }

    /**
     * Get the expiredGeofenceGeometryId property: Lists of the geometry ID of the geofence which is expired relative to
     * the user time in the request.
     *
     * @return the expiredGeofenceGeometryId value.
     */
    public List<String> expiredGeofenceGeometryId() {
        return this.expiredGeofenceGeometryId;
    }

    /**
     * Get the invalidPeriodGeofenceGeometryId property: Lists of the geometry ID of the geofence which is in invalid
     * period relative to the user time in the request.
     *
     * @return the invalidPeriodGeofenceGeometryId value.
     */
    public List<String> invalidPeriodGeofenceGeometryId() {
        return this.invalidPeriodGeofenceGeometryId;
    }

    /**
     * Get the isEventPublished property: True if at least one event is published to the Azure Maps event subscriber,
     * false if no event is published to the Azure Maps event subscriber. This will only be presented in response when
     * 'isAsync' query parameter is set to true.
     *
     * @return the isEventPublished value.
     */
    public Boolean isEventPublished() {
        return this.isEventPublished;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (geometries() != null) {
            geometries().forEach(e -> e.validate());
        }
    }
}
