// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.geolocation.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.geolocation.fluent.GeolocationsClient;
import com.azure.maps.geolocation.fluent.models.IpAddressToLocationResultInner;
import com.azure.maps.geolocation.models.Geography;
import com.azure.maps.geolocation.models.ResponseFormat;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GeolocationsClient. */
public final class GeolocationsClientImpl implements GeolocationsClient {
    private final ClientLogger logger = new ClientLogger(GeolocationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GeolocationsService service;

    /** The service client containing this operation class. */
    private final GeolocationClientImpl client;

    /**
     * Initializes an instance of GeolocationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GeolocationsClientImpl(GeolocationClientImpl client) {
        this.service =
            RestProxy.create(GeolocationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for GeolocationClientGeolocations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "GeolocationClientGeo")
    private interface GeolocationsService {
        @Headers({"Content-Type: application/json"})
        @Get("/geolocation/ip/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IpAddressToLocationResultInner>> getIpToLocationPreview(
            @HostParam("geography") Geography geography,
            @HeaderParam("x-ms-client-id") String xMsClientId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("format") ResponseFormat format,
            @QueryParam("ip") String ip,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IpAddressToLocationResultInner>> getIpToLocationPreviewWithResponseAsync(
        ResponseFormat format, String ip) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (ip == null) {
            return Mono.error(new IllegalArgumentException("Parameter ip is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getIpToLocationPreview(
                            this.client.getGeography(),
                            this.client.getXMsClientId(),
                            this.client.getApiVersion(),
                            format,
                            ip,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IpAddressToLocationResultInner>> getIpToLocationPreviewWithResponseAsync(
        ResponseFormat format, String ip, Context context) {
        if (this.client.getGeography() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getGeography() is required and cannot be null."));
        }
        if (format == null) {
            return Mono.error(new IllegalArgumentException("Parameter format is required and cannot be null."));
        }
        if (ip == null) {
            return Mono.error(new IllegalArgumentException("Parameter ip is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getIpToLocationPreview(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                this.client.getApiVersion(),
                format,
                ip,
                accept,
                context);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IpAddressToLocationResultInner> getIpToLocationPreviewAsync(ResponseFormat format, String ip) {
        return getIpToLocationPreviewWithResponseAsync(format, ip)
            .flatMap(
                (Response<IpAddressToLocationResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IpAddressToLocationResultInner getIpToLocationPreview(ResponseFormat format, String ip) {
        return getIpToLocationPreviewAsync(format, ip).block();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IpAddressToLocationResultInner> getIpToLocationPreviewWithResponse(
        ResponseFormat format, String ip, Context context) {
        return getIpToLocationPreviewWithResponseAsync(format, ip, context).block();
    }
}
