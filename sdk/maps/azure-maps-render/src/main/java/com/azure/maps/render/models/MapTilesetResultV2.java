// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.render.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Metadata for a tileset in the TileJSON format. */
@Fluent
public final class MapTilesetResultV2 {
    /*
     * Version of the TileJSON spec.
     */
    @JsonProperty(value = "tilejson")
    private String tilejson;

    /*
     * Name of the tileset.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Text description of the tileset.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * A semver.org style version number for the tiles contained within the
     * tileset.
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * Copyright attribution to be displayed on the map.
     */
    @JsonProperty(value = "attribution")
    private String attribution;

    /*
     * A mustache template to be used to format data from grids for
     * interaction.
     */
    @JsonProperty(value = "template")
    private String template;

    /*
     * A legend to be displayed with the map.
     */
    @JsonProperty(value = "legend")
    private String legend;

    /*
     * Default: "xyz". Either "xyz" or "tms". Influences the y direction of the
     * tile coordinates.
     */
    @JsonProperty(value = "scheme")
    private String scheme;

    /*
     * An array of tile endpoints.
     */
    @JsonProperty(value = "tiles")
    private List<String> tiles;

    /*
     * An array of interactivity endpoints.
     */
    @JsonProperty(value = "grids")
    private List<String> grids;

    /*
     * An array of data files in GeoJSON format.
     */
    @JsonProperty(value = "data")
    private List<String> data;

    /*
     * The minimum zoom level.
     */
    @JsonProperty(value = "minzoom")
    private Integer minzoom;

    /*
     * The maximum zoom level.
     */
    @JsonProperty(value = "maxzoom")
    private Integer maxzoom;

    /*
     * The WGS84 bounds of the tileset.
     */
    @JsonProperty(value = "bounds")
    private List<Float> bounds;

    /*
     * The default location of the tileset in the form [longitude, latitude,
     * zoom].
     */
    @JsonProperty(value = "center")
    private List<Float> center;

    /**
     * Get the tilejson property: Version of the TileJSON spec.
     *
     * @return the tilejson value.
     */
    public String getTilejson() {
        return this.tilejson;
    }

    /**
     * Set the tilejson property: Version of the TileJSON spec.
     *
     * @param tilejson the tilejson value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setTilejson(String tilejson) {
        this.tilejson = tilejson;
        return this;
    }

    /**
     * Get the name property: Name of the tileset.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the tileset.
     *
     * @param name the name value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: Text description of the tileset.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Text description of the tileset.
     *
     * @param description the description value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the version property: A semver.org style version number for the tiles contained within the tileset.
     *
     * @return the version value.
     */
    public String getVersion() {
        return this.version;
    }

    /**
     * Set the version property: A semver.org style version number for the tiles contained within the tileset.
     *
     * @param version the version value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the attribution property: Copyright attribution to be displayed on the map.
     *
     * @return the attribution value.
     */
    public String getAttribution() {
        return this.attribution;
    }

    /**
     * Set the attribution property: Copyright attribution to be displayed on the map.
     *
     * @param attribution the attribution value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setAttribution(String attribution) {
        this.attribution = attribution;
        return this;
    }

    /**
     * Get the template property: A mustache template to be used to format data from grids for interaction.
     *
     * @return the template value.
     */
    public String getTemplate() {
        return this.template;
    }

    /**
     * Set the template property: A mustache template to be used to format data from grids for interaction.
     *
     * @param template the template value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setTemplate(String template) {
        this.template = template;
        return this;
    }

    /**
     * Get the legend property: A legend to be displayed with the map.
     *
     * @return the legend value.
     */
    public String getLegend() {
        return this.legend;
    }

    /**
     * Set the legend property: A legend to be displayed with the map.
     *
     * @param legend the legend value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setLegend(String legend) {
        this.legend = legend;
        return this;
    }

    /**
     * Get the scheme property: Default: "xyz". Either "xyz" or "tms". Influences the y direction of the tile
     * coordinates.
     *
     * @return the scheme value.
     */
    public String getScheme() {
        return this.scheme;
    }

    /**
     * Set the scheme property: Default: "xyz". Either "xyz" or "tms". Influences the y direction of the tile
     * coordinates.
     *
     * @param scheme the scheme value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setScheme(String scheme) {
        this.scheme = scheme;
        return this;
    }

    /**
     * Get the tiles property: An array of tile endpoints.
     *
     * @return the tiles value.
     */
    public List<String> getTiles() {
        return this.tiles;
    }

    /**
     * Set the tiles property: An array of tile endpoints.
     *
     * @param tiles the tiles value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setTiles(List<String> tiles) {
        this.tiles = tiles;
        return this;
    }

    /**
     * Get the grids property: An array of interactivity endpoints.
     *
     * @return the grids value.
     */
    public List<String> getGrids() {
        return this.grids;
    }

    /**
     * Set the grids property: An array of interactivity endpoints.
     *
     * @param grids the grids value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setGrids(List<String> grids) {
        this.grids = grids;
        return this;
    }

    /**
     * Get the data property: An array of data files in GeoJSON format.
     *
     * @return the data value.
     */
    public List<String> getData() {
        return this.data;
    }

    /**
     * Set the data property: An array of data files in GeoJSON format.
     *
     * @param data the data value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setData(List<String> data) {
        this.data = data;
        return this;
    }

    /**
     * Get the minzoom property: The minimum zoom level.
     *
     * @return the minzoom value.
     */
    public Integer getMinzoom() {
        return this.minzoom;
    }

    /**
     * Set the minzoom property: The minimum zoom level.
     *
     * @param minzoom the minzoom value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setMinzoom(Integer minzoom) {
        this.minzoom = minzoom;
        return this;
    }

    /**
     * Get the maxzoom property: The maximum zoom level.
     *
     * @return the maxzoom value.
     */
    public Integer getMaxzoom() {
        return this.maxzoom;
    }

    /**
     * Set the maxzoom property: The maximum zoom level.
     *
     * @param maxzoom the maxzoom value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setMaxzoom(Integer maxzoom) {
        this.maxzoom = maxzoom;
        return this;
    }

    /**
     * Get the bounds property: The WGS84 bounds of the tileset.
     *
     * @return the bounds value.
     */
    public List<Float> getBounds() {
        return this.bounds;
    }

    /**
     * Set the bounds property: The WGS84 bounds of the tileset.
     *
     * @param bounds the bounds value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setBounds(List<Float> bounds) {
        this.bounds = bounds;
        return this;
    }

    /**
     * Get the center property: The default location of the tileset in the form [longitude, latitude, zoom].
     *
     * @return the center value.
     */
    public List<Float> getCenter() {
        return this.center;
    }

    /**
     * Set the center property: The default location of the tileset in the form [longitude, latitude, zoom].
     *
     * @param center the center value to set.
     * @return the MapTilesetResultV2 object itself.
     */
    public MapTilesetResultV2 setCenter(List<Float> center) {
        this.center = center;
        return this;
    }
}
