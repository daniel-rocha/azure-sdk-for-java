// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.render.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.maps.render.fluent.RendersClient;
import com.azure.maps.render.fluent.models.GetCopyrightCaptionResultInner;
import com.azure.maps.render.fluent.models.GetCopyrightForTileResultInner;
import com.azure.maps.render.fluent.models.GetCopyrightForWorldResultInner;
import com.azure.maps.render.fluent.models.GetCopyrightFromBoundingBoxResultInner;
import com.azure.maps.render.models.GetCopyrightCaptionResult;
import com.azure.maps.render.models.GetCopyrightForTileResult;
import com.azure.maps.render.models.GetCopyrightForWorldResult;
import com.azure.maps.render.models.GetCopyrightFromBoundingBoxResult;
import com.azure.maps.render.models.IncludeText;
import com.azure.maps.render.models.MapImageStyle;
import com.azure.maps.render.models.MapImageryStyle;
import com.azure.maps.render.models.MapTileLayer;
import com.azure.maps.render.models.MapTileSize;
import com.azure.maps.render.models.MapTileStyle;
import com.azure.maps.render.models.RasterTileFormat;
import com.azure.maps.render.models.Renders;
import com.azure.maps.render.models.StaticMapLayer;
import com.azure.maps.render.models.TextFormat;
import com.azure.maps.render.models.TileFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;
import java.util.List;

public final class RendersImpl implements Renders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RendersImpl.class);

    private final RendersClient innerClient;

    private final com.azure.maps.render.RenderManager serviceManager;

    public RendersImpl(RendersClient innerClient, com.azure.maps.render.RenderManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public InputStream getMapStaticImage(RasterTileFormat format) {
        return this.serviceClient().getMapStaticImage(format);
    }

    public StreamResponse getMapStaticImageWithResponse(
        RasterTileFormat format,
        StaticMapLayer layer,
        MapImageStyle style,
        Integer zoom,
        String center,
        String bbox,
        Integer height,
        Integer width,
        String language,
        String view,
        List<String> pins,
        List<String> path,
        Context context) {
        return this
            .serviceClient()
            .getMapStaticImageWithResponse(
                format, layer, style, zoom, center, bbox, height, width, language, view, pins, path, context);
    }

    public InputStream getMapTile(
        TileFormat format, MapTileLayer layer, MapTileStyle style, int zoom, int xTileIndex, int yTileIndex) {
        return this.serviceClient().getMapTile(format, layer, style, zoom, xTileIndex, yTileIndex);
    }

    public StreamResponse getMapTileWithResponse(
        TileFormat format,
        MapTileLayer layer,
        MapTileStyle style,
        int zoom,
        int xTileIndex,
        int yTileIndex,
        MapTileSize tileSize,
        String language,
        String view,
        Context context) {
        return this
            .serviceClient()
            .getMapTileWithResponse(
                format, layer, style, zoom, xTileIndex, yTileIndex, tileSize, language, view, context);
    }

    public InputStream getMapStateTilePreview(int zoom, int xTileIndex, int yTileIndex, String statesetId) {
        return this.serviceClient().getMapStateTilePreview(zoom, xTileIndex, yTileIndex, statesetId);
    }

    public StreamResponse getMapStateTilePreviewWithResponse(
        int zoom, int xTileIndex, int yTileIndex, String statesetId, Context context) {
        return this
            .serviceClient()
            .getMapStateTilePreviewWithResponse(zoom, xTileIndex, yTileIndex, statesetId, context);
    }

    public GetCopyrightCaptionResult getCopyrightCaption(TextFormat format) {
        GetCopyrightCaptionResultInner inner = this.serviceClient().getCopyrightCaption(format);
        if (inner != null) {
            return new GetCopyrightCaptionResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetCopyrightCaptionResult> getCopyrightCaptionWithResponse(TextFormat format, Context context) {
        Response<GetCopyrightCaptionResultInner> inner =
            this.serviceClient().getCopyrightCaptionWithResponse(format, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetCopyrightCaptionResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InputStream getMapImageryTile(
        RasterTileFormat format, MapImageryStyle style, int zoom, int xTileIndex, int yTileIndex) {
        return this.serviceClient().getMapImageryTile(format, style, zoom, xTileIndex, yTileIndex);
    }

    public StreamResponse getMapImageryTileWithResponse(
        RasterTileFormat format, MapImageryStyle style, int zoom, int xTileIndex, int yTileIndex, Context context) {
        return this.serviceClient().getMapImageryTileWithResponse(format, style, zoom, xTileIndex, yTileIndex, context);
    }

    public GetCopyrightFromBoundingBoxResult getCopyrightFromBoundingBox(
        TextFormat format, String mincoordinates, String maxcoordinates) {
        GetCopyrightFromBoundingBoxResultInner inner =
            this.serviceClient().getCopyrightFromBoundingBox(format, mincoordinates, maxcoordinates);
        if (inner != null) {
            return new GetCopyrightFromBoundingBoxResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetCopyrightFromBoundingBoxResult> getCopyrightFromBoundingBoxWithResponse(
        TextFormat format, String mincoordinates, String maxcoordinates, IncludeText text, Context context) {
        Response<GetCopyrightFromBoundingBoxResultInner> inner =
            this
                .serviceClient()
                .getCopyrightFromBoundingBoxWithResponse(format, mincoordinates, maxcoordinates, text, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetCopyrightFromBoundingBoxResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetCopyrightForTileResult getCopyrightForTile(TextFormat format, int zoom, int xTileIndex, int yTileIndex) {
        GetCopyrightForTileResultInner inner =
            this.serviceClient().getCopyrightForTile(format, zoom, xTileIndex, yTileIndex);
        if (inner != null) {
            return new GetCopyrightForTileResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetCopyrightForTileResult> getCopyrightForTileWithResponse(
        TextFormat format, int zoom, int xTileIndex, int yTileIndex, IncludeText text, Context context) {
        Response<GetCopyrightForTileResultInner> inner =
            this.serviceClient().getCopyrightForTileWithResponse(format, zoom, xTileIndex, yTileIndex, text, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetCopyrightForTileResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetCopyrightForWorldResult getCopyrightForWorld(TextFormat format) {
        GetCopyrightForWorldResultInner inner = this.serviceClient().getCopyrightForWorld(format);
        if (inner != null) {
            return new GetCopyrightForWorldResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetCopyrightForWorldResult> getCopyrightForWorldWithResponse(
        TextFormat format, IncludeText text, Context context) {
        Response<GetCopyrightForWorldResultInner> inner =
            this.serviceClient().getCopyrightForWorldWithResponse(format, text, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetCopyrightForWorldResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private RendersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.maps.render.RenderManager manager() {
        return this.serviceManager;
    }
}
